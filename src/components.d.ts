/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface GdsAccordion {
        /**
          * Content floats.
         */
        "contentFloats": boolean;
        /**
          * Keeps track of when the user has actively collapsed or expanded the accordion.
         */
        "expanded": boolean;
        /**
          * Opens automatically when hovered (desktop only).
         */
        "openOnHover": boolean;
    }
    interface GdsButton {
        "disabled": boolean;
        /**
          * Left side icon with a font. https://www.martinstoeckli.ch/fontmap/fontmap.html
         */
        "leftIcon": string;
        "leftIconRotate": number;
        /**
          * Right side icon with a font.
         */
        "rightIcon": string;
        "rightIconRotate": number;
        /**
          * Button size.
         */
        "size": string;
    }
    interface GdsCard {
    }
    interface GdsGoogleMaps {
        "addMarker": (lat: string, lng: string, options?: object) => Promise<any>;
        /**
          * API key from GCP.
         */
        "apiKey": string;
        /**
          * Add marker to the initial center.
         */
        "initialMarker": boolean;
        /**
          * Latitude.
         */
        "lat": string;
        /**
          * Longitude.
         */
        "lng": string;
        /**
          * Zoom level for maps.
         */
        "zoom": number;
    }
    interface GdsHeading {
        /**
          * Render the heading as a h element for SEO purposes.  Those h element should be visible to GoogleBot: https://www.searchenginejournal.com/shadow-dom/353644/
         */
        "as": string;
        /**
          * Size of the heading.
         */
        "size": string;
    }
    interface GdsHint {
    }
    interface GdsIcon {
        /**
          * Accessible Label
         */
        "accessibleLabel": string;
        /**
          * Style overrides.
         */
        "class": string;
        "duotone": boolean;
        "light": boolean;
        /**
          * FA icon name.
         */
        "name": string;
        /**
          * FA icon style. Only use one style.
         */
        "regular": boolean;
        "solid": boolean;
    }
    interface GdsInputWrapper {
        /**
          * TODO: Add this feature.
         */
        "error": string;
        /**
          * Display the label above the input element.
         */
        "label": string;
    }
    interface GdsLabel {
        /**
          * Text color. TODO: Implement the color custom variable scheme.
         */
        "color": string;
        /**
          * Size of the label.
         */
        "size": string;
    }
    interface GdsLink {
        /**
          * Accessible label.
         */
        "accessibleLabel": string;
        /**
          * Block element.
         */
        "block": boolean;
        /**
          * Expand across container.
         */
        "full": boolean;
        /**
          * Link url.
         */
        "href": string;
        /**
          * Link rel. (can be used for nofollow, sponsored etc.)
         */
        "rel": string;
        /**
          * Link open target.
         */
        "target": string;
    }
    interface GdsLogoGrid {
    }
    interface GdsLogoGridItem {
        /**
          * Accessible label.
         */
        "accessibleLabel": string;
        /**
          * Image alternative text. Defaults to "" which makes it decorative only.
         */
        "alt": string;
        /**
          * If defined, the logo will be a link.
         */
        "href": string;
        /**
          * Image url.
         */
        "imageUrl": string;
        /**
          * Link open target.
         */
        "target": string;
    }
    interface GdsMediaCard {
        "accessibleLabel": string;
        "description": string;
        /**
          * Title for the card (note: title is a reserved word).
         */
        "headline": string;
        /**
          * If defined, the card will be a link.
         */
        "href": string;
        /**
          * Image alt. Defaults to "" representing a decorative image.
         */
        "imageAlt": string;
        /**
          * Image url.
         */
        "imageUrl": string;
        /**
          * Overlay.
         */
        "overlay": boolean;
        /**
          * Overlay effect.
         */
        "overlayEffect": string;
        "superimposedBottom": number;
        "superimposedLeft": number;
        "superimposedRight": number;
        /**
          * superimpose image overflow amount in pixels.
         */
        "superimposedTop": number;
        /**
          * superimpose image url.
         */
        "superimposedUrl": string;
        /**
          * Link open target.
         */
        "target": string;
    }
    interface GdsMenu {
        /**
          * Direction: "horizontal" or "vertial". Defaults to "vertical".
         */
        "direction": string;
        /**
          * Aria role Defaults to "".
         */
        "role": string;
    }
    interface GdsMenuItem {
        /**
          * Is menu item appear active.
         */
        "active": boolean;
    }
    interface GdsMenuItemNested {
        /**
          * Accessible label of the submenu. Defaults to textContent of the link slot.
         */
        "accessibleLabel": string;
        /**
          * Is menu item appear active.
         */
        "active": boolean;
        /**
          * Keeps track of when the user has actively collapsed or expanded the submenu.
         */
        "expanded": boolean;
        /**
          * Submenu icon.
         */
        "submenuIcon": string;
    }
    interface GdsNavigation {
        /**
          * Accessible label for the inner navigation
         */
        "accessibleNavigationLabel": string;
        "closeMenu": () => Promise<void>;
    }
    interface GdsParagraph {
        /**
          * Use to override p element's style.
         */
        "class": string;
        /**
          * Size of the text.
         */
        "size": string;
    }
    interface GdsSearchForm {
        "accessibleInputLabel": string;
        "accessibleSubmitLabel": string;
        "action": string;
        "collapsed": boolean;
        "floating": boolean;
        "placeholder": string;
        "query": string;
    }
    interface GdsSlider {
        "accessibleLabel": string;
        "max": number;
        "min": number;
        "value": number;
    }
    interface GdsSubmenu {
        /**
          * Aria role
         */
        "role": string;
    }
    interface GdsTag {
        /**
          * If defined, the tag will be a link.
         */
        "href": string;
        /**
          * Link open target.
         */
        "target": string;
    }
    interface GdsTagGroup {
    }
    interface GdsText {
        /**
          * Size of the text.
         */
        "size": string;
    }
    interface GdsTextButton {
        "disabled": boolean;
        /**
          * Left side icon with a font. https://www.martinstoeckli.ch/fontmap/fontmap.html
         */
        "leftIcon": string;
        "leftIconRotate": number;
        /**
          * Right side icon with a font.
         */
        "rightIcon": string;
        "rightIconRotate": number;
        /**
          * Button size.
         */
        "size": string;
    }
    interface GdsYoutubePlayer {
        /**
          * Accessible Label
         */
        "accessibleLabel": string;
        /**
          * Indicates whether the video player controls are displayed.
         */
        "controls": boolean;
        /**
          * Video ID
         */
        "videoId": string;
    }
}
declare global {
    interface HTMLGdsAccordionElement extends Components.GdsAccordion, HTMLStencilElement {
    }
    var HTMLGdsAccordionElement: {
        prototype: HTMLGdsAccordionElement;
        new (): HTMLGdsAccordionElement;
    };
    interface HTMLGdsButtonElement extends Components.GdsButton, HTMLStencilElement {
    }
    var HTMLGdsButtonElement: {
        prototype: HTMLGdsButtonElement;
        new (): HTMLGdsButtonElement;
    };
    interface HTMLGdsCardElement extends Components.GdsCard, HTMLStencilElement {
    }
    var HTMLGdsCardElement: {
        prototype: HTMLGdsCardElement;
        new (): HTMLGdsCardElement;
    };
    interface HTMLGdsGoogleMapsElement extends Components.GdsGoogleMaps, HTMLStencilElement {
    }
    var HTMLGdsGoogleMapsElement: {
        prototype: HTMLGdsGoogleMapsElement;
        new (): HTMLGdsGoogleMapsElement;
    };
    interface HTMLGdsHeadingElement extends Components.GdsHeading, HTMLStencilElement {
    }
    var HTMLGdsHeadingElement: {
        prototype: HTMLGdsHeadingElement;
        new (): HTMLGdsHeadingElement;
    };
    interface HTMLGdsHintElement extends Components.GdsHint, HTMLStencilElement {
    }
    var HTMLGdsHintElement: {
        prototype: HTMLGdsHintElement;
        new (): HTMLGdsHintElement;
    };
    interface HTMLGdsIconElement extends Components.GdsIcon, HTMLStencilElement {
    }
    var HTMLGdsIconElement: {
        prototype: HTMLGdsIconElement;
        new (): HTMLGdsIconElement;
    };
    interface HTMLGdsInputWrapperElement extends Components.GdsInputWrapper, HTMLStencilElement {
    }
    var HTMLGdsInputWrapperElement: {
        prototype: HTMLGdsInputWrapperElement;
        new (): HTMLGdsInputWrapperElement;
    };
    interface HTMLGdsLabelElement extends Components.GdsLabel, HTMLStencilElement {
    }
    var HTMLGdsLabelElement: {
        prototype: HTMLGdsLabelElement;
        new (): HTMLGdsLabelElement;
    };
    interface HTMLGdsLinkElement extends Components.GdsLink, HTMLStencilElement {
    }
    var HTMLGdsLinkElement: {
        prototype: HTMLGdsLinkElement;
        new (): HTMLGdsLinkElement;
    };
    interface HTMLGdsLogoGridElement extends Components.GdsLogoGrid, HTMLStencilElement {
    }
    var HTMLGdsLogoGridElement: {
        prototype: HTMLGdsLogoGridElement;
        new (): HTMLGdsLogoGridElement;
    };
    interface HTMLGdsLogoGridItemElement extends Components.GdsLogoGridItem, HTMLStencilElement {
    }
    var HTMLGdsLogoGridItemElement: {
        prototype: HTMLGdsLogoGridItemElement;
        new (): HTMLGdsLogoGridItemElement;
    };
    interface HTMLGdsMediaCardElement extends Components.GdsMediaCard, HTMLStencilElement {
    }
    var HTMLGdsMediaCardElement: {
        prototype: HTMLGdsMediaCardElement;
        new (): HTMLGdsMediaCardElement;
    };
    interface HTMLGdsMenuElement extends Components.GdsMenu, HTMLStencilElement {
    }
    var HTMLGdsMenuElement: {
        prototype: HTMLGdsMenuElement;
        new (): HTMLGdsMenuElement;
    };
    interface HTMLGdsMenuItemElement extends Components.GdsMenuItem, HTMLStencilElement {
    }
    var HTMLGdsMenuItemElement: {
        prototype: HTMLGdsMenuItemElement;
        new (): HTMLGdsMenuItemElement;
    };
    interface HTMLGdsMenuItemNestedElement extends Components.GdsMenuItemNested, HTMLStencilElement {
    }
    var HTMLGdsMenuItemNestedElement: {
        prototype: HTMLGdsMenuItemNestedElement;
        new (): HTMLGdsMenuItemNestedElement;
    };
    interface HTMLGdsNavigationElement extends Components.GdsNavigation, HTMLStencilElement {
    }
    var HTMLGdsNavigationElement: {
        prototype: HTMLGdsNavigationElement;
        new (): HTMLGdsNavigationElement;
    };
    interface HTMLGdsParagraphElement extends Components.GdsParagraph, HTMLStencilElement {
    }
    var HTMLGdsParagraphElement: {
        prototype: HTMLGdsParagraphElement;
        new (): HTMLGdsParagraphElement;
    };
    interface HTMLGdsSliderElement extends Components.GdsSlider, HTMLStencilElement {
    }
    var HTMLGdsSliderElement: {
        prototype: HTMLGdsSliderElement;
        new (): HTMLGdsSliderElement;
    };
    interface HTMLGdsSubmenuElement extends Components.GdsSubmenu, HTMLStencilElement {
    }
    var HTMLGdsSubmenuElement: {
        prototype: HTMLGdsSubmenuElement;
        new (): HTMLGdsSubmenuElement;
    };
    interface HTMLGdsTagElement extends Components.GdsTag, HTMLStencilElement {
    }
    var HTMLGdsTagElement: {
        prototype: HTMLGdsTagElement;
        new (): HTMLGdsTagElement;
    };
    interface HTMLGdsTagGroupElement extends Components.GdsTagGroup, HTMLStencilElement {
    }
    var HTMLGdsTagGroupElement: {
        prototype: HTMLGdsTagGroupElement;
        new (): HTMLGdsTagGroupElement;
    };
    interface HTMLGdsTextElement extends Components.GdsText, HTMLStencilElement {
    }
    var HTMLGdsTextElement: {
        prototype: HTMLGdsTextElement;
        new (): HTMLGdsTextElement;
    };
    interface HTMLGdsTextButtonElement extends Components.GdsTextButton, HTMLStencilElement {
    }
    var HTMLGdsTextButtonElement: {
        prototype: HTMLGdsTextButtonElement;
        new (): HTMLGdsTextButtonElement;
    };
    interface HTMLGdsYoutubePlayerElement extends Components.GdsYoutubePlayer, HTMLStencilElement {
    }
    var HTMLGdsYoutubePlayerElement: {
        prototype: HTMLGdsYoutubePlayerElement;
        new (): HTMLGdsYoutubePlayerElement;
    };
    interface HTMLElementTagNameMap {
        "gds-accordion": HTMLGdsAccordionElement;
        "gds-button": HTMLGdsButtonElement;
        "gds-card": HTMLGdsCardElement;
        "gds-google-maps": HTMLGdsGoogleMapsElement;
        "gds-heading": HTMLGdsHeadingElement;
        "gds-hint": HTMLGdsHintElement;
        "gds-icon": HTMLGdsIconElement;
        "gds-input-wrapper": HTMLGdsInputWrapperElement;
        "gds-label": HTMLGdsLabelElement;
        "gds-link": HTMLGdsLinkElement;
        "gds-logo-grid": HTMLGdsLogoGridElement;
        "gds-logo-grid-item": HTMLGdsLogoGridItemElement;
        "gds-media-card": HTMLGdsMediaCardElement;
        "gds-menu": HTMLGdsMenuElement;
        "gds-menu-item": HTMLGdsMenuItemElement;
        "gds-menu-item-nested": HTMLGdsMenuItemNestedElement;
        "gds-navigation": HTMLGdsNavigationElement;
        "gds-paragraph": HTMLGdsParagraphElement;
        "gds-slider": HTMLGdsSliderElement;
        "gds-submenu": HTMLGdsSubmenuElement;
        "gds-tag": HTMLGdsTagElement;
        "gds-tag-group": HTMLGdsTagGroupElement;
        "gds-text": HTMLGdsTextElement;
        "gds-text-button": HTMLGdsTextButtonElement;
        "gds-youtube-player": HTMLGdsYoutubePlayerElement;
    }
}
declare namespace LocalJSX {
    interface GdsAccordion {
        /**
          * Content floats.
         */
        "contentFloats"?: boolean;
        /**
          * Keeps track of when the user has actively collapsed or expanded the accordion.
         */
        "expanded"?: boolean;
        /**
          * Opens automatically when hovered (desktop only).
         */
        "openOnHover"?: boolean;
    }
    interface GdsButton {
        "disabled"?: boolean;
        /**
          * Left side icon with a font. https://www.martinstoeckli.ch/fontmap/fontmap.html
         */
        "leftIcon"?: string;
        "leftIconRotate"?: number;
        /**
          * Right side icon with a font.
         */
        "rightIcon"?: string;
        "rightIconRotate"?: number;
        /**
          * Button size.
         */
        "size"?: string;
    }
    interface GdsCard {
    }
    interface GdsGoogleMaps {
        /**
          * API key from GCP.
         */
        "apiKey"?: string;
        /**
          * Add marker to the initial center.
         */
        "initialMarker"?: boolean;
        /**
          * Latitude.
         */
        "lat"?: string;
        /**
          * Longitude.
         */
        "lng"?: string;
        /**
          * Emits Google Maps SDK once map is loaded.
         */
        "onReady"?: (event: CustomEvent<any>) => void;
        /**
          * Zoom level for maps.
         */
        "zoom"?: number;
    }
    interface GdsHeading {
        /**
          * Render the heading as a h element for SEO purposes.  Those h element should be visible to GoogleBot: https://www.searchenginejournal.com/shadow-dom/353644/
         */
        "as"?: string;
        /**
          * Size of the heading.
         */
        "size"?: string;
    }
    interface GdsHint {
    }
    interface GdsIcon {
        /**
          * Accessible Label
         */
        "accessibleLabel"?: string;
        /**
          * Style overrides.
         */
        "class"?: string;
        "duotone"?: boolean;
        "light"?: boolean;
        /**
          * FA icon name.
         */
        "name"?: string;
        /**
          * FA icon style. Only use one style.
         */
        "regular"?: boolean;
        "solid"?: boolean;
    }
    interface GdsInputWrapper {
        /**
          * TODO: Add this feature.
         */
        "error"?: string;
        /**
          * Display the label above the input element.
         */
        "label"?: string;
    }
    interface GdsLabel {
        /**
          * Text color. TODO: Implement the color custom variable scheme.
         */
        "color"?: string;
        /**
          * Size of the label.
         */
        "size"?: string;
    }
    interface GdsLink {
        /**
          * Accessible label.
         */
        "accessibleLabel"?: string;
        /**
          * Block element.
         */
        "block"?: boolean;
        /**
          * Expand across container.
         */
        "full"?: boolean;
        /**
          * Link url.
         */
        "href"?: string;
        /**
          * Link rel. (can be used for nofollow, sponsored etc.)
         */
        "rel"?: string;
        /**
          * Link open target.
         */
        "target"?: string;
    }
    interface GdsLogoGrid {
    }
    interface GdsLogoGridItem {
        /**
          * Accessible label.
         */
        "accessibleLabel"?: string;
        /**
          * Image alternative text. Defaults to "" which makes it decorative only.
         */
        "alt"?: string;
        /**
          * If defined, the logo will be a link.
         */
        "href"?: string;
        /**
          * Image url.
         */
        "imageUrl"?: string;
        /**
          * Link open target.
         */
        "target"?: string;
    }
    interface GdsMediaCard {
        "accessibleLabel"?: string;
        "description"?: string;
        /**
          * Title for the card (note: title is a reserved word).
         */
        "headline"?: string;
        /**
          * If defined, the card will be a link.
         */
        "href"?: string;
        /**
          * Image alt. Defaults to "" representing a decorative image.
         */
        "imageAlt"?: string;
        /**
          * Image url.
         */
        "imageUrl"?: string;
        /**
          * Overlay.
         */
        "overlay"?: boolean;
        /**
          * Overlay effect.
         */
        "overlayEffect"?: string;
        "superimposedBottom"?: number;
        "superimposedLeft"?: number;
        "superimposedRight"?: number;
        /**
          * superimpose image overflow amount in pixels.
         */
        "superimposedTop"?: number;
        /**
          * superimpose image url.
         */
        "superimposedUrl"?: string;
        /**
          * Link open target.
         */
        "target"?: string;
    }
    interface GdsMenu {
        /**
          * Direction: "horizontal" or "vertial". Defaults to "vertical".
         */
        "direction"?: string;
        /**
          * Aria role Defaults to "".
         */
        "role"?: string;
    }
    interface GdsMenuItem {
        /**
          * Is menu item appear active.
         */
        "active"?: boolean;
    }
    interface GdsMenuItemNested {
        /**
          * Accessible label of the submenu. Defaults to textContent of the link slot.
         */
        "accessibleLabel"?: string;
        /**
          * Is menu item appear active.
         */
        "active"?: boolean;
        /**
          * Keeps track of when the user has actively collapsed or expanded the submenu.
         */
        "expanded"?: boolean;
        /**
          * Submenu icon.
         */
        "submenuIcon"?: string;
    }
    interface GdsNavigation {
        /**
          * Accessible label for the inner navigation
         */
        "accessibleNavigationLabel"?: string;
    }
    interface GdsParagraph {
        /**
          * Use to override p element's style.
         */
        "class"?: string;
        /**
          * Size of the text.
         */
        "size"?: string;
    }
    interface GdsSearchForm {
        "accessibleInputLabel"?: string;
        "accessibleSubmitLabel"?: string;
        "action"?: string;
        "collapsed"?: boolean;
        "floating"?: boolean;
        "placeholder"?: string;
        "query"?: string;
    }
    interface GdsSlider {
        "accessibleLabel"?: string;
        "max"?: number;
        "min"?: number;
        "onValue-changed"?: (event: CustomEvent<any>) => void;
        "value"?: number;
    }
    interface GdsSubmenu {
        "onClose"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * Aria role
         */
        "role"?: string;
    }
    interface GdsTag {
        /**
          * If defined, the tag will be a link.
         */
        "href"?: string;
        /**
          * Link open target.
         */
        "target"?: string;
    }
    interface GdsTagGroup {
    }
    interface GdsText {
        /**
          * Size of the text.
         */
        "size"?: string;
    }
    interface GdsTextButton {
        "disabled"?: boolean;
        /**
          * Left side icon with a font. https://www.martinstoeckli.ch/fontmap/fontmap.html
         */
        "leftIcon"?: string;
        "leftIconRotate"?: number;
        /**
          * Right side icon with a font.
         */
        "rightIcon"?: string;
        "rightIconRotate"?: number;
        /**
          * Button size.
         */
        "size"?: string;
    }
    interface GdsYoutubePlayer {
        /**
          * Accessible Label
         */
        "accessibleLabel"?: string;
        /**
          * Indicates whether the video player controls are displayed.
         */
        "controls"?: boolean;
        /**
          * Video ID
         */
        "videoId"?: string;
    }
    interface IntrinsicElements {
        "gds-accordion": GdsAccordion;
        "gds-button": GdsButton;
        "gds-card": GdsCard;
        "gds-google-maps": GdsGoogleMaps;
        "gds-heading": GdsHeading;
        "gds-hint": GdsHint;
        "gds-icon": GdsIcon;
        "gds-input-wrapper": GdsInputWrapper;
        "gds-label": GdsLabel;
        "gds-link": GdsLink;
        "gds-logo-grid": GdsLogoGrid;
        "gds-logo-grid-item": GdsLogoGridItem;
        "gds-media-card": GdsMediaCard;
        "gds-menu": GdsMenu;
        "gds-menu-item": GdsMenuItem;
        "gds-menu-item-nested": GdsMenuItemNested;
        "gds-navigation": GdsNavigation;
        "gds-paragraph": GdsParagraph;
        "gds-slider": GdsSlider;
        "gds-submenu": GdsSubmenu;
        "gds-tag": GdsTag;
        "gds-tag-group": GdsTagGroup;
        "gds-text": GdsText;
        "gds-text-button": GdsTextButton;
        "gds-youtube-player": GdsYoutubePlayer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gds-accordion": LocalJSX.GdsAccordion & JSXBase.HTMLAttributes<HTMLGdsAccordionElement>;
            "gds-button": LocalJSX.GdsButton & JSXBase.HTMLAttributes<HTMLGdsButtonElement>;
            "gds-card": LocalJSX.GdsCard & JSXBase.HTMLAttributes<HTMLGdsCardElement>;
            "gds-google-maps": LocalJSX.GdsGoogleMaps & JSXBase.HTMLAttributes<HTMLGdsGoogleMapsElement>;
            "gds-heading": LocalJSX.GdsHeading & JSXBase.HTMLAttributes<HTMLGdsHeadingElement>;
            "gds-hint": LocalJSX.GdsHint & JSXBase.HTMLAttributes<HTMLGdsHintElement>;
            "gds-icon": LocalJSX.GdsIcon & JSXBase.HTMLAttributes<HTMLGdsIconElement>;
            "gds-input-wrapper": LocalJSX.GdsInputWrapper & JSXBase.HTMLAttributes<HTMLGdsInputWrapperElement>;
            "gds-label": LocalJSX.GdsLabel & JSXBase.HTMLAttributes<HTMLGdsLabelElement>;
            "gds-link": LocalJSX.GdsLink & JSXBase.HTMLAttributes<HTMLGdsLinkElement>;
            "gds-logo-grid": LocalJSX.GdsLogoGrid & JSXBase.HTMLAttributes<HTMLGdsLogoGridElement>;
            "gds-logo-grid-item": LocalJSX.GdsLogoGridItem & JSXBase.HTMLAttributes<HTMLGdsLogoGridItemElement>;
            "gds-media-card": LocalJSX.GdsMediaCard & JSXBase.HTMLAttributes<HTMLGdsMediaCardElement>;
            "gds-menu": LocalJSX.GdsMenu & JSXBase.HTMLAttributes<HTMLGdsMenuElement>;
            "gds-menu-item": LocalJSX.GdsMenuItem & JSXBase.HTMLAttributes<HTMLGdsMenuItemElement>;
            "gds-menu-item-nested": LocalJSX.GdsMenuItemNested & JSXBase.HTMLAttributes<HTMLGdsMenuItemNestedElement>;
            "gds-navigation": LocalJSX.GdsNavigation & JSXBase.HTMLAttributes<HTMLGdsNavigationElement>;
            "gds-paragraph": LocalJSX.GdsParagraph & JSXBase.HTMLAttributes<HTMLGdsParagraphElement>;
            "gds-slider": LocalJSX.GdsSlider & JSXBase.HTMLAttributes<HTMLGdsSliderElement>;
            "gds-submenu": LocalJSX.GdsSubmenu & JSXBase.HTMLAttributes<HTMLGdsSubmenuElement>;
            "gds-tag": LocalJSX.GdsTag & JSXBase.HTMLAttributes<HTMLGdsTagElement>;
            "gds-tag-group": LocalJSX.GdsTagGroup & JSXBase.HTMLAttributes<HTMLGdsTagGroupElement>;
            "gds-text": LocalJSX.GdsText & JSXBase.HTMLAttributes<HTMLGdsTextElement>;
            "gds-text-button": LocalJSX.GdsTextButton & JSXBase.HTMLAttributes<HTMLGdsTextButtonElement>;
            "gds-youtube-player": LocalJSX.GdsYoutubePlayer & JSXBase.HTMLAttributes<HTMLGdsYoutubePlayerElement>;
        }
    }
}
