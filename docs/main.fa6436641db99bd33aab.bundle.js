(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,exports){module.exports=storybook_docs_dll},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ERkP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1t7P")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("IAdD")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ho0z")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+KXO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("M+/F")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("vrRf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jQ/y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7x/C")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("plBw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("2G9S")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("87if")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lTEL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("kYxP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("z84I")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aLgo")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DZ+c")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("cARO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("KqXw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hCOa")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("EgRP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("yH/f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("UvmB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("NyMY")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aokA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lN5B")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LW0h")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Ysgh")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jwue")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+oxZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7xRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1Iuc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("MvUL")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ZVkB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("KOtZ")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("jQ3i")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("x4t0")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("WNMA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Yct5")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1IsZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("A3UQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hBpG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("vbDw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("y2Ah")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JtPf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("tVqn")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5o43")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getMockImageUrl}));__webpack_require__(12);function getMockImageUrl(term,width,height,rand){return"https://source.unsplash.com/".concat(width||500,"x").concat(height||500,"/?").concat((term?encodeURIComponent(term):"")+(rand?Math.random():""))}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LUwd")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("P2aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Cm4o")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("j4Sf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("OZaJ")},,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Host})),__webpack_require__.d(__webpack_exports__,"b",(function(){return patchEsm})),__webpack_require__.d(__webpack_exports__,"c",(function(){return bootstrapLazy})),__webpack_require__.d(__webpack_exports__,"d",(function(){return h})),__webpack_require__.d(__webpack_exports__,"e",(function(){return registerInstance}));__webpack_require__(2),__webpack_require__(9),__webpack_require__(17),__webpack_require__(12),__webpack_require__(29),__webpack_require__(49),__webpack_require__(22),__webpack_require__(42),__webpack_require__(8),__webpack_require__(11),__webpack_require__(14),__webpack_require__(35),__webpack_require__(16),__webpack_require__(7),__webpack_require__(81),__webpack_require__(20),__webpack_require__(82),__webpack_require__(5),__webpack_require__(100),__webpack_require__(4),__webpack_require__(72),__webpack_require__(25),__webpack_require__(39),__webpack_require__(59),__webpack_require__(6),__webpack_require__(64),__webpack_require__(10),__webpack_require__(132),__webpack_require__(57),__webpack_require__(73),__webpack_require__(101),__webpack_require__(21),__webpack_require__(18),__webpack_require__(83),__webpack_require__(44),__webpack_require__(13),__webpack_require__(37),__webpack_require__(32),__webpack_require__(58),__webpack_require__(102),__webpack_require__(15),__webpack_require__(89),__webpack_require__(67),__webpack_require__(84);function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?_assertThisInitialized(self):call}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _wrapNativeSuper(Class){var _cache="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function _wrapNativeSuper(Class){if(null===Class||!function _isNativeFunction(fn){return-1!==Function.toString.call(fn).indexOf("[native code]")}(Class))return Class;if("function"!=typeof Class)throw new TypeError("Super expression must either be null or a function");if(void 0!==_cache){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper)}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class)})(Class)}function _construct(Parent,args,Class){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var instance=new(Function.bind.apply(Parent,a));return Class&&_setPrototypeOf(instance,Class.prototype),instance}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o})(o,p)}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var scopeId,contentRef,hostTagName,useNativeShadowDom=!1,checkSlotFallbackVisibility=!1,checkSlotRelocate=!1,queuePending=!1,win="undefined"!=typeof window?window:{},CSS=win.CSS,doc=win.document||{head:{}},plt={$flags$:0,$resourcesUrl$:"",jmp:function jmp(h){return h()},raf:function raf(h){return requestAnimationFrame(h)},ael:function ael(el,eventName,listener,opts){return el.addEventListener(eventName,listener,opts)},rel:function rel(el,eventName,listener,opts){return el.removeEventListener(eventName,listener,opts)}},supportsShadow=function(){return(doc.head.attachShadow+"").indexOf("[native")>-1}(),promiseResolve=function promiseResolve(v){return Promise.resolve(v)},supportsConstructibleStylesheets=function(){try{return new CSSStyleSheet,!0}catch(e){}return!1}(),HYDRATED_CSS="{visibility:hidden}.hydrated{visibility:inherit}",rootAppliedStyles=new WeakMap,registerStyle=function registerStyle(scopeId,cssText,allowCS){var style=styles.get(scopeId);supportsConstructibleStylesheets&&allowCS?(style=style||new CSSStyleSheet).replace(cssText):style=cssText,styles.set(scopeId,style)},attachStyles=function attachStyles(hostRef){var cmpMeta=hostRef.$cmpMeta$,elm=hostRef.$hostElement$,flags=cmpMeta.$flags$,endAttachStyles=(cmpMeta.$tagName$,function(){}),scopeId=function addStyle(styleContainerNode,cmpMeta,mode,hostElm){var scopeId=getScopeId(cmpMeta.$tagName$),style=styles.get(scopeId);if(styleContainerNode=11===styleContainerNode.nodeType?styleContainerNode:doc,style)if("string"==typeof style){styleContainerNode=styleContainerNode.head||styleContainerNode;var styleElm,appliedStyles=rootAppliedStyles.get(styleContainerNode);if(appliedStyles||rootAppliedStyles.set(styleContainerNode,appliedStyles=new Set),!appliedStyles.has(scopeId)){if(plt.$cssShim$){var newScopeId=(styleElm=plt.$cssShim$.createHostStyle(hostElm,scopeId,style,!!(10&cmpMeta.$flags$)))["s-sc"];newScopeId&&(scopeId=newScopeId,appliedStyles=null)}else(styleElm=doc.createElement("style")).innerHTML=style;styleContainerNode.insertBefore(styleElm,styleContainerNode.querySelector("link")),appliedStyles&&appliedStyles.add(scopeId)}}else styleContainerNode.adoptedStyleSheets.includes(style)||(styleContainerNode.adoptedStyleSheets=[].concat(_toConsumableArray(styleContainerNode.adoptedStyleSheets),[style]));return scopeId}(supportsShadow&&elm.shadowRoot?elm.shadowRoot:elm.getRootNode(),cmpMeta,hostRef.$modeName$,elm);10&flags&&(elm["s-sc"]=scopeId,elm.classList.add(scopeId+"-h")),endAttachStyles()},getScopeId=function getScopeId(tagName,mode){return"sc-"+tagName},EMPTY_OBJ={},isComplexType=function isComplexType(o){return"object"===(o=_typeof(o))||"function"===o},h=function h(nodeName,vnodeData){for(var child=null,slotName=null,simple=!1,lastSimple=!1,vNodeChildren=[],walk=function walk(c){for(var i=0;i<c.length;i++)child=c[i],Array.isArray(child)?walk(child):null!=child&&"boolean"!=typeof child&&((simple="function"!=typeof nodeName&&!isComplexType(child))&&(child=String(child)),simple&&lastSimple?vNodeChildren[vNodeChildren.length-1].$text$+=child:vNodeChildren.push(simple?newVNode(null,child):child),lastSimple=simple)},_len=arguments.length,children=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++)children[_key-2]=arguments[_key];if(walk(children),vnodeData){vnodeData.name&&(slotName=vnodeData.name);var classData=vnodeData.className||vnodeData.class;classData&&(vnodeData.class="object"!==_typeof(classData)?classData:Object.keys(classData).filter((function(k){return classData[k]})).join(" "))}var vnode=newVNode(nodeName,null);return vnode.$attrs$=vnodeData,vNodeChildren.length>0&&(vnode.$children$=vNodeChildren),vnode.$name$=slotName,vnode},newVNode=function newVNode(tag,text){var vnode={$flags$:0,$tag$:tag,$text$:text,$elm$:null,$children$:null,$attrs$:null,$name$:null};return vnode},Host={},setAccessor=function setAccessor(elm,memberName,oldValue,newValue,isSvg,flags){if(oldValue!==newValue){var isProp=isMemberInElement(elm,memberName),ln=memberName.toLowerCase();if("class"===memberName){var classList=elm.classList,oldClasses=parseClassList(oldValue),newClasses=parseClassList(newValue);classList.remove.apply(classList,_toConsumableArray(oldClasses.filter((function(c){return c&&!newClasses.includes(c)})))),classList.add.apply(classList,_toConsumableArray(newClasses.filter((function(c){return c&&!oldClasses.includes(c)}))))}else if("style"===memberName){for(var prop in oldValue)newValue&&null!=newValue[prop]||(prop.includes("-")?elm.style.removeProperty(prop):elm.style[prop]="");for(var _prop in newValue)oldValue&&newValue[_prop]===oldValue[_prop]||(_prop.includes("-")?elm.style.setProperty(_prop,newValue[_prop]):elm.style[_prop]=newValue[_prop])}else if("ref"===memberName)newValue&&newValue(elm);else if(isProp||"o"!==memberName[0]||"n"!==memberName[1]){var isComplex=isComplexType(newValue);if((isProp||isComplex&&null!==newValue)&&!isSvg)try{if(elm.tagName.includes("-"))elm[memberName]=newValue;else{var n=null==newValue?"":newValue;"list"===memberName?isProp=!1:null!=oldValue&&elm[memberName]==n||(elm[memberName]=n)}}catch(e){}null==newValue||!1===newValue?elm.removeAttribute(memberName):(!isProp||4&flags||isSvg)&&!isComplex&&(newValue=!0===newValue?"":newValue,elm.setAttribute(memberName,newValue))}else memberName="-"===memberName[2]?memberName.slice(3):isMemberInElement(win,ln)?ln.slice(2):ln[2]+memberName.slice(3),oldValue&&plt.rel(elm,memberName,oldValue,!1),newValue&&plt.ael(elm,memberName,newValue,!1)}},parseClassListRegex=/\s/,parseClassList=function parseClassList(value){return value?value.split(parseClassListRegex):[]},updateElement=function updateElement(oldVnode,newVnode,isSvgMode,memberName){var elm=11===newVnode.$elm$.nodeType&&newVnode.$elm$.host?newVnode.$elm$.host:newVnode.$elm$,oldVnodeAttrs=oldVnode&&oldVnode.$attrs$||EMPTY_OBJ,newVnodeAttrs=newVnode.$attrs$||EMPTY_OBJ;for(memberName in oldVnodeAttrs)memberName in newVnodeAttrs||setAccessor(elm,memberName,oldVnodeAttrs[memberName],void 0,isSvgMode,newVnode.$flags$);for(memberName in newVnodeAttrs)setAccessor(elm,memberName,oldVnodeAttrs[memberName],newVnodeAttrs[memberName],isSvgMode,newVnode.$flags$)},createElm=function createElm(oldParentVNode,newParentVNode,childIndex,parentElm){var elm,childNode,oldVNode,newVNode=newParentVNode.$children$[childIndex],i=0;if(useNativeShadowDom||(checkSlotRelocate=!0,"slot"===newVNode.$tag$&&(scopeId&&parentElm.classList.add(scopeId+"-s"),newVNode.$flags$|=newVNode.$children$?2:1)),null!==newVNode.$text$)elm=newVNode.$elm$=doc.createTextNode(newVNode.$text$);else if(1&newVNode.$flags$)elm=newVNode.$elm$=doc.createTextNode("");else if(elm=newVNode.$elm$=doc.createElement(2&newVNode.$flags$?"slot-fb":newVNode.$tag$),updateElement(null,newVNode,!1),function isDef(v){return null!=v}(scopeId)&&elm["s-si"]!==scopeId&&elm.classList.add(elm["s-si"]=scopeId),newVNode.$children$)for(i=0;i<newVNode.$children$.length;++i)(childNode=createElm(oldParentVNode,newVNode,i,elm))&&elm.appendChild(childNode);return elm["s-hn"]=hostTagName,3&newVNode.$flags$&&(elm["s-sr"]=!0,elm["s-cr"]=contentRef,elm["s-sn"]=newVNode.$name$||"",(oldVNode=oldParentVNode&&oldParentVNode.$children$&&oldParentVNode.$children$[childIndex])&&oldVNode.$tag$===newVNode.$tag$&&oldParentVNode.$elm$&&putBackInOriginalLocation(oldParentVNode.$elm$,!1)),elm},putBackInOriginalLocation=function putBackInOriginalLocation(parentElm,recursive){plt.$flags$|=1;for(var oldSlotChildNodes=parentElm.childNodes,i=oldSlotChildNodes.length-1;i>=0;i--){var childNode=oldSlotChildNodes[i];childNode["s-hn"]!==hostTagName&&childNode["s-ol"]&&(parentReferenceNode(childNode).insertBefore(childNode,referenceNode(childNode)),childNode["s-ol"].remove(),childNode["s-ol"]=void 0,checkSlotRelocate=!0),recursive&&putBackInOriginalLocation(childNode,recursive)}plt.$flags$&=-2},addVnodes=function addVnodes(parentElm,before,parentVNode,vnodes,startIdx,endIdx){var childNode,containerElm=parentElm["s-cr"]&&parentElm["s-cr"].parentNode||parentElm;for(containerElm.shadowRoot&&containerElm.tagName===hostTagName&&(containerElm=containerElm.shadowRoot);startIdx<=endIdx;++startIdx)vnodes[startIdx]&&(childNode=createElm(null,parentVNode,startIdx,parentElm))&&(vnodes[startIdx].$elm$=childNode,containerElm.insertBefore(childNode,referenceNode(before)))},removeVnodes=function removeVnodes(vnodes,startIdx,endIdx,vnode,elm){for(;startIdx<=endIdx;++startIdx)(vnode=vnodes[startIdx])&&(elm=vnode.$elm$,callNodeRefs(vnode),checkSlotFallbackVisibility=!0,elm["s-ol"]?elm["s-ol"].remove():putBackInOriginalLocation(elm,!0),elm.remove())},updateChildren=function updateChildren(parentElm,oldCh,newVNode,newCh){for(var node,oldStartIdx=0,newStartIdx=0,oldEndIdx=oldCh.length-1,oldStartVnode=oldCh[0],oldEndVnode=oldCh[oldEndIdx],newEndIdx=newCh.length-1,newStartVnode=newCh[0],newEndVnode=newCh[newEndIdx];oldStartIdx<=oldEndIdx&&newStartIdx<=newEndIdx;)null==oldStartVnode?oldStartVnode=oldCh[++oldStartIdx]:null==oldEndVnode?oldEndVnode=oldCh[--oldEndIdx]:null==newStartVnode?newStartVnode=newCh[++newStartIdx]:null==newEndVnode?newEndVnode=newCh[--newEndIdx]:isSameVnode(oldStartVnode,newStartVnode)?(patch(oldStartVnode,newStartVnode),oldStartVnode=oldCh[++oldStartIdx],newStartVnode=newCh[++newStartIdx]):isSameVnode(oldEndVnode,newEndVnode)?(patch(oldEndVnode,newEndVnode),oldEndVnode=oldCh[--oldEndIdx],newEndVnode=newCh[--newEndIdx]):isSameVnode(oldStartVnode,newEndVnode)?("slot"!==oldStartVnode.$tag$&&"slot"!==newEndVnode.$tag$||putBackInOriginalLocation(oldStartVnode.$elm$.parentNode,!1),patch(oldStartVnode,newEndVnode),parentElm.insertBefore(oldStartVnode.$elm$,oldEndVnode.$elm$.nextSibling),oldStartVnode=oldCh[++oldStartIdx],newEndVnode=newCh[--newEndIdx]):isSameVnode(oldEndVnode,newStartVnode)?("slot"!==oldStartVnode.$tag$&&"slot"!==newEndVnode.$tag$||putBackInOriginalLocation(oldEndVnode.$elm$.parentNode,!1),patch(oldEndVnode,newStartVnode),parentElm.insertBefore(oldEndVnode.$elm$,oldStartVnode.$elm$),oldEndVnode=oldCh[--oldEndIdx],newStartVnode=newCh[++newStartIdx]):(node=createElm(oldCh&&oldCh[newStartIdx],newVNode,newStartIdx,parentElm),newStartVnode=newCh[++newStartIdx],node&&parentReferenceNode(oldStartVnode.$elm$).insertBefore(node,referenceNode(oldStartVnode.$elm$)));oldStartIdx>oldEndIdx?addVnodes(parentElm,null==newCh[newEndIdx+1]?null:newCh[newEndIdx+1].$elm$,newVNode,newCh,newStartIdx,newEndIdx):newStartIdx>newEndIdx&&removeVnodes(oldCh,oldStartIdx,oldEndIdx)},isSameVnode=function isSameVnode(vnode1,vnode2){return vnode1.$tag$===vnode2.$tag$&&("slot"!==vnode1.$tag$||vnode1.$name$===vnode2.$name$)},referenceNode=function referenceNode(node){return node&&node["s-ol"]||node},parentReferenceNode=function parentReferenceNode(node){return(node["s-ol"]?node["s-ol"]:node).parentNode},patch=function patch(oldVNode,newVNode){var defaultHolder,elm=newVNode.$elm$=oldVNode.$elm$,oldChildren=oldVNode.$children$,newChildren=newVNode.$children$,tag=newVNode.$tag$,text=newVNode.$text$;null===text?("slot"===tag||updateElement(oldVNode,newVNode,!1),null!==oldChildren&&null!==newChildren?updateChildren(elm,oldChildren,newVNode,newChildren):null!==newChildren?(null!==oldVNode.$text$&&(elm.textContent=""),addVnodes(elm,null,newVNode,newChildren,0,newChildren.length-1)):null!==oldChildren&&removeVnodes(oldChildren,0,oldChildren.length-1)):(defaultHolder=elm["s-cr"])?defaultHolder.parentNode.textContent=text:oldVNode.$text$!==text&&(elm.data=text)},relocateNodes=[],isNodeLocatedInSlot=function isNodeLocatedInSlot(nodeToRelocate,slotNameAttr){return 1===nodeToRelocate.nodeType?null===nodeToRelocate.getAttribute("slot")&&""===slotNameAttr||nodeToRelocate.getAttribute("slot")===slotNameAttr:nodeToRelocate["s-sn"]===slotNameAttr||""===slotNameAttr},callNodeRefs=function callNodeRefs(vNode){vNode.$attrs$&&vNode.$attrs$.ref&&vNode.$attrs$.ref(null),vNode.$children$&&vNode.$children$.map(callNodeRefs)},renderVdom=function renderVdom(hostRef,renderFnResults){var hostElm=hostRef.$hostElement$,cmpMeta=hostRef.$cmpMeta$,oldVNode=hostRef.$vnode$||newVNode(null,null),rootVnode=function isHost(node){return node&&node.$tag$===Host}(renderFnResults)?renderFnResults:h(null,null,renderFnResults);if(hostTagName=hostElm.tagName,cmpMeta.$attrsToReflect$&&(rootVnode.$attrs$=rootVnode.$attrs$||{},cmpMeta.$attrsToReflect$.map((function(_ref){var _ref2=_slicedToArray(_ref,2),propName=_ref2[0],attribute=_ref2[1];return rootVnode.$attrs$[attribute]=hostElm[propName]}))),rootVnode.$tag$=null,rootVnode.$flags$|=4,hostRef.$vnode$=rootVnode,rootVnode.$elm$=oldVNode.$elm$=hostElm.shadowRoot||hostElm,scopeId=hostElm["s-sc"],contentRef=hostElm["s-cr"],useNativeShadowDom=supportsShadow&&0!=(1&cmpMeta.$flags$),checkSlotFallbackVisibility=!1,patch(oldVNode,rootVnode),plt.$flags$|=1,checkSlotRelocate){var relocateData,nodeToRelocate,orgLocationNode,parentNodeRef,insertBeforeNode,refNode;!function relocateSlotContent(elm){for(var childNode,node,hostContentNodes,slotNameAttr,relocateNodeData,j,i=0,childNodes=elm.childNodes,ilen=childNodes.length;i<ilen;i++){if((childNode=childNodes[i])["s-sr"]&&(node=childNode["s-cr"]))for(hostContentNodes=node.parentNode.childNodes,slotNameAttr=childNode["s-sn"],j=hostContentNodes.length-1;j>=0;j--)(node=hostContentNodes[j])["s-cn"]||node["s-nr"]||node["s-hn"]===childNode["s-hn"]||(isNodeLocatedInSlot(node,slotNameAttr)?(relocateNodeData=relocateNodes.find((function(r){return r.$nodeToRelocate$===node})),checkSlotFallbackVisibility=!0,node["s-sn"]=node["s-sn"]||slotNameAttr,relocateNodeData?relocateNodeData.$slotRefNode$=childNode:relocateNodes.push({$slotRefNode$:childNode,$nodeToRelocate$:node}),node["s-sr"]&&relocateNodes.map((function(relocateNode){isNodeLocatedInSlot(relocateNode.$nodeToRelocate$,node["s-sn"])&&(relocateNodeData=relocateNodes.find((function(r){return r.$nodeToRelocate$===node})))&&!relocateNode.$slotRefNode$&&(relocateNode.$slotRefNode$=relocateNodeData.$slotRefNode$)}))):relocateNodes.some((function(r){return r.$nodeToRelocate$===node}))||relocateNodes.push({$nodeToRelocate$:node}));1===childNode.nodeType&&relocateSlotContent(childNode)}}(rootVnode.$elm$);for(var i=0;i<relocateNodes.length;i++)(nodeToRelocate=(relocateData=relocateNodes[i]).$nodeToRelocate$)["s-ol"]||((orgLocationNode=doc.createTextNode(""))["s-nr"]=nodeToRelocate,nodeToRelocate.parentNode.insertBefore(nodeToRelocate["s-ol"]=orgLocationNode,nodeToRelocate));for(i=0;i<relocateNodes.length;i++)if(nodeToRelocate=(relocateData=relocateNodes[i]).$nodeToRelocate$,relocateData.$slotRefNode$){for(parentNodeRef=relocateData.$slotRefNode$.parentNode,insertBeforeNode=relocateData.$slotRefNode$.nextSibling,orgLocationNode=nodeToRelocate["s-ol"];orgLocationNode=orgLocationNode.previousSibling;)if((refNode=orgLocationNode["s-nr"])&&refNode["s-sn"]===nodeToRelocate["s-sn"]&&parentNodeRef===refNode.parentNode&&(!(refNode=refNode.nextSibling)||!refNode["s-nr"])){insertBeforeNode=refNode;break}(!insertBeforeNode&&parentNodeRef!==nodeToRelocate.parentNode||nodeToRelocate.nextSibling!==insertBeforeNode)&&nodeToRelocate!==insertBeforeNode&&(!nodeToRelocate["s-hn"]&&nodeToRelocate["s-ol"]&&(nodeToRelocate["s-hn"]=nodeToRelocate["s-ol"].parentNode.nodeName),parentNodeRef.insertBefore(nodeToRelocate,insertBeforeNode))}else 1===nodeToRelocate.nodeType&&(nodeToRelocate.hidden=!0)}checkSlotFallbackVisibility&&function updateFallbackSlotVisibility(elm){var childNode,i,ilen,j,slotNameAttr,nodeType,childNodes=elm.childNodes;for(i=0,ilen=childNodes.length;i<ilen;i++)if(1===(childNode=childNodes[i]).nodeType){if(childNode["s-sr"])for(slotNameAttr=childNode["s-sn"],childNode.hidden=!1,j=0;j<ilen;j++)if(childNodes[j]["s-hn"]!==childNode["s-hn"])if(nodeType=childNodes[j].nodeType,""!==slotNameAttr){if(1===nodeType&&slotNameAttr===childNodes[j].getAttribute("slot")){childNode.hidden=!0;break}}else if(1===nodeType||3===nodeType&&""!==childNodes[j].textContent.trim()){childNode.hidden=!0;break}updateFallbackSlotVisibility(childNode)}}(rootVnode.$elm$),plt.$flags$&=-2,relocateNodes.length=0},attachToAncestor=function attachToAncestor(hostRef,ancestorComponent){ancestorComponent&&!hostRef.$onRenderResolve$&&ancestorComponent["s-p"]&&ancestorComponent["s-p"].push(new Promise((function(r){return hostRef.$onRenderResolve$=r})))},scheduleUpdate=function scheduleUpdate(hostRef,isInitialLoad){if(hostRef.$flags$|=16,!(4&hostRef.$flags$)){attachToAncestor(hostRef,hostRef.$ancestorComponent$);return writeTask((function dispatch(){return dispatchHooks(hostRef,isInitialLoad)}))}hostRef.$flags$|=512},dispatchHooks=function dispatchHooks(hostRef,isInitialLoad){var endSchedule=(hostRef.$cmpMeta$.$tagName$,function(){}),instance=hostRef.$lazyInstance$;return endSchedule(),then(void 0,(function(){return updateComponent(hostRef,instance,isInitialLoad)}))},updateComponent=function updateComponent(hostRef,instance,isInitialLoad){var elm=hostRef.$hostElement$,endUpdate=(hostRef.$cmpMeta$.$tagName$,function(){}),rc=elm["s-rc"];isInitialLoad&&attachStyles(hostRef);var endRender=(hostRef.$cmpMeta$.$tagName$,function(){});renderVdom(hostRef,callRender(instance)),plt.$cssShim$&&plt.$cssShim$.updateHost(elm),hostRef.$flags$&=-17,hostRef.$flags$|=2,rc&&(rc.map((function(cb){return cb()})),elm["s-rc"]=void 0),endRender(),endUpdate();var childrenPromises=elm["s-p"],postUpdate=function postUpdate(){return postUpdateComponent(hostRef)};0===childrenPromises.length?postUpdate():(Promise.all(childrenPromises).then(postUpdate),hostRef.$flags$|=4,childrenPromises.length=0)},callRender=function callRender(instance){try{instance=instance.render()}catch(e){consoleError(e)}return instance},postUpdateComponent=function postUpdateComponent(hostRef){hostRef.$cmpMeta$.$tagName$;var elm=hostRef.$hostElement$,endPostUpdate=function(){},ancestorComponent=hostRef.$ancestorComponent$;64&hostRef.$flags$?endPostUpdate():(hostRef.$flags$|=64,addHydratedFlag(elm),endPostUpdate(),hostRef.$onReadyResolve$(elm),ancestorComponent||appDidLoad()),hostRef.$onRenderResolve$&&(hostRef.$onRenderResolve$(),hostRef.$onRenderResolve$=void 0),512&hostRef.$flags$&&nextTick((function(){return scheduleUpdate(hostRef,!1)})),hostRef.$flags$&=-517},_forceUpdate=function forceUpdate(ref){var hostRef=getHostRef(ref),isConnected=hostRef.$hostElement$.isConnected;return isConnected&&2==(18&hostRef.$flags$)&&scheduleUpdate(hostRef,!1),isConnected},appDidLoad=function appDidLoad(who){addHydratedFlag(doc.documentElement),nextTick((function(){return function emitEvent(elm,name,opts){var ev=new CustomEvent(name,opts);return elm.dispatchEvent(ev),ev}(win,"appload",{detail:{namespace:"gds"}})}))},then=function then(promise,thenFn){return promise&&promise.then?promise.then(thenFn):thenFn()},addHydratedFlag=function addHydratedFlag(elm){return elm.classList.add("hydrated")},setValue=function setValue(ref,propName,newVal,cmpMeta){var hostRef=getHostRef(ref),oldVal=hostRef.$instanceValues$.get(propName),flags=hostRef.$flags$,instance=hostRef.$lazyInstance$;newVal=function parsePropertyValue(propValue,propType){return null==propValue||isComplexType(propValue)?propValue:4&propType?"false"!==propValue&&(""===propValue||!!propValue):2&propType?parseFloat(propValue):1&propType?String(propValue):propValue}(newVal,cmpMeta.$members$[propName][0]),8&flags&&void 0!==oldVal||newVal===oldVal||(hostRef.$instanceValues$.set(propName,newVal),instance&&2==(18&flags)&&scheduleUpdate(hostRef,!1))},proxyComponent=function proxyComponent(Cstr,cmpMeta,flags){if(cmpMeta.$members$){var members=Object.entries(cmpMeta.$members$),prototype=Cstr.prototype;if(members.map((function(_ref3){var _ref4=_slicedToArray(_ref3,2),memberName=_ref4[0],memberFlags=_slicedToArray(_ref4[1],1)[0];(31&memberFlags||2&flags&&32&memberFlags)&&Object.defineProperty(prototype,memberName,{get:function get(){return function getValue(ref,propName){return getHostRef(ref).$instanceValues$.get(propName)}(this,memberName)},set:function set(newValue){setValue(this,memberName,newValue,cmpMeta)},configurable:!0,enumerable:!0})})),1&flags){var attrNameToPropName=new Map;prototype.attributeChangedCallback=function(attrName,_oldValue,newValue){var _this=this;plt.jmp((function(){var propName=attrNameToPropName.get(attrName);_this[propName]=(null!==newValue||"boolean"!=typeof _this[propName])&&newValue}))},Cstr.observedAttributes=members.filter((function(_ref5){var _ref6=_slicedToArray(_ref5,2);_ref6[0];return 15&_ref6[1][0]})).map((function(_ref7){var _ref8=_slicedToArray(_ref7,2),propName=_ref8[0],m=_ref8[1],attrName=m[1]||propName;return attrNameToPropName.set(attrName,propName),512&m[0]&&cmpMeta.$attrsToReflect$.push([propName,attrName]),attrName}))}}return Cstr},initializeComponent=function(){var _ref9=function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}(regeneratorRuntime.mark((function _callee(elm,hostRef,cmpMeta,hmrVersionId,Cstr){var endLoad,endNewInstance,_scopeId,endRegisterStyles,style,ancestorComponent,schedule;return regeneratorRuntime.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(0!=(32&hostRef.$flags$)){_context.next=25;break}if(hostRef.$flags$|=32,!(Cstr=loadModule(cmpMeta)).then){_context.next=9;break}return endLoad=function(){},_context.next=7,Cstr;case 7:Cstr=_context.sent,endLoad();case 9:Cstr.isProxied||(proxyComponent(Cstr,cmpMeta,2),Cstr.isProxied=!0),cmpMeta.$tagName$,endNewInstance=function(){},hostRef.$flags$|=8;try{new Cstr(hostRef)}catch(e){consoleError(e)}if(hostRef.$flags$&=-9,endNewInstance(),_scopeId=getScopeId(cmpMeta.$tagName$),styles.has(_scopeId)||!Cstr.style){_context.next=25;break}if(cmpMeta.$tagName$,endRegisterStyles=function(){},style=Cstr.style,!(8&cmpMeta.$flags$)){_context.next=23;break}return _context.next=22,__webpack_require__.e(5).then(__webpack_require__.bind(null,380)).then((function(m){return m.scopeCss(style,_scopeId,!1)}));case 22:style=_context.sent;case 23:registerStyle(_scopeId,style,!!(1&cmpMeta.$flags$)),endRegisterStyles();case 25:ancestorComponent=hostRef.$ancestorComponent$,schedule=function schedule(){return scheduleUpdate(hostRef,!0)},ancestorComponent&&ancestorComponent["s-rc"]?ancestorComponent["s-rc"].push(schedule):schedule();case 28:case"end":return _context.stop()}}),_callee)})));return function initializeComponent(_x,_x2,_x3,_x4,_x5){return _ref9.apply(this,arguments)}}(),_connectedCallback=function connectedCallback(elm){if(0==(1&plt.$flags$)){var hostRef=getHostRef(elm),cmpMeta=hostRef.$cmpMeta$,endConnected=(cmpMeta.$tagName$,function(){});if(!(1&hostRef.$flags$)){hostRef.$flags$|=1,12&cmpMeta.$flags$&&setContentReference(elm);for(var ancestorComponent=elm;ancestorComponent=ancestorComponent.parentNode||ancestorComponent.host;)if(ancestorComponent["s-p"]){attachToAncestor(hostRef,hostRef.$ancestorComponent$=ancestorComponent);break}cmpMeta.$members$&&Object.entries(cmpMeta.$members$).map((function(_ref10){var _ref11=_slicedToArray(_ref10,2),memberName=_ref11[0];if(31&_slicedToArray(_ref11[1],1)[0]&&elm.hasOwnProperty(memberName)){var value=elm[memberName];delete elm[memberName],elm[memberName]=value}})),nextTick((function(){return initializeComponent(elm,hostRef,cmpMeta)}))}endConnected()}},setContentReference=function setContentReference(elm){var contentRefElm=elm["s-cr"]=doc.createComment("");contentRefElm["s-cn"]=!0,elm.insertBefore(contentRefElm,elm.firstChild)},_disconnectedCallback=function disconnectedCallback(elm){if(0==(1&plt.$flags$)){getHostRef(elm);plt.$cssShim$&&plt.$cssShim$.removeHost(elm)}},bootstrapLazy=function bootstrapLazy(lazyBundles){var appLoadFallback,options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},endBootstrap=function(){},cmpTags=[],exclude=options.exclude||[],customElements=win.customElements,head=doc.head,metaCharset=head.querySelector("meta[charset]"),visibilityStyle=doc.createElement("style"),deferredConnectedCallbacks=[],isBootstrapping=!0;Object.assign(plt,options),plt.$resourcesUrl$=new URL(options.resourcesUrl||"./",doc.baseURI).href,lazyBundles.map((function(lazyBundle){return lazyBundle[1].map((function(compactMeta){var cmpMeta={$flags$:compactMeta[0],$tagName$:compactMeta[1],$members$:compactMeta[2],$listeners$:compactMeta[3]};cmpMeta.$members$=compactMeta[2],cmpMeta.$attrsToReflect$=[],!supportsShadow&&1&cmpMeta.$flags$&&(cmpMeta.$flags$|=8);var tagName=cmpMeta.$tagName$,HostElement=function(_HTMLElement){_inherits(HostElement,_HTMLElement);var _super=_createSuper(HostElement);function HostElement(self){var _this2;return _classCallCheck(this,HostElement),self=_assertThisInitialized(_this2=_super.call(this,self)),registerHost(self,cmpMeta),1&cmpMeta.$flags$&&(supportsShadow?self.attachShadow({mode:"open"}):"shadowRoot"in self||(self.shadowRoot=self)),_this2}return _createClass(HostElement,[{key:"connectedCallback",value:function connectedCallback(){var _this3=this;appLoadFallback&&(clearTimeout(appLoadFallback),appLoadFallback=null),isBootstrapping?deferredConnectedCallbacks.push(this):plt.jmp((function(){return _connectedCallback(_this3)}))}},{key:"disconnectedCallback",value:function disconnectedCallback(){var _this4=this;plt.jmp((function(){return _disconnectedCallback(_this4)}))}},{key:"forceUpdate",value:function forceUpdate(){_forceUpdate(this)}},{key:"componentOnReady",value:function componentOnReady(){return getHostRef(this).$onReadyPromise$}}]),HostElement}(_wrapNativeSuper(HTMLElement));cmpMeta.$lazyBundleIds$=lazyBundle[0],exclude.includes(tagName)||customElements.get(tagName)||(cmpTags.push(tagName),customElements.define(tagName,proxyComponent(HostElement,cmpMeta,1)))}))})),visibilityStyle.innerHTML=cmpTags+HYDRATED_CSS,visibilityStyle.setAttribute("data-styles",""),head.insertBefore(visibilityStyle,metaCharset?metaCharset.nextSibling:head.firstChild),isBootstrapping=!1,deferredConnectedCallbacks.length?deferredConnectedCallbacks.map((function(host){return host.connectedCallback()})):plt.jmp((function(){return appLoadFallback=setTimeout(appDidLoad,30)})),endBootstrap()},hostRefs=new WeakMap,getHostRef=function getHostRef(ref){return hostRefs.get(ref)},registerInstance=function registerInstance(lazyInstance,hostRef){return hostRefs.set(hostRef.$lazyInstance$=lazyInstance,hostRef)},registerHost=function registerHost(elm,cmpMeta){var hostRef={$flags$:0,$hostElement$:elm,$cmpMeta$:cmpMeta,$instanceValues$:new Map};return hostRef.$onReadyPromise$=new Promise((function(r){return hostRef.$onReadyResolve$=r})),elm["s-p"]=[],elm["s-rc"]=[],hostRefs.set(elm,hostRef)},isMemberInElement=function isMemberInElement(elm,memberName){return memberName in elm},consoleError=function consoleError(e){return console.error(e)},cmpModules=new Map,loadModule=function loadModule(cmpMeta,hostRef,hmrVersionId){var exportName=cmpMeta.$tagName$.replace(/-/g,"_"),bundleId=cmpMeta.$lazyBundleIds$,module=cmpModules.get(bundleId);return module?module[exportName]:__webpack_require__(364)("./".concat(bundleId,".entry.js")).then((function(importedModule){return cmpModules.set(bundleId,importedModule),importedModule[exportName]}),consoleError)},styles=new Map,queueDomReads=[],queueDomWrites=[],queueTask=function queueTask(queue,write){return function(cb){queue.push(cb),queuePending||(queuePending=!0,write&&4&plt.$flags$?nextTick(flush):plt.raf(flush))}},consume=function consume(queue){for(var i=0;i<queue.length;i++)try{queue[i](performance.now())}catch(e){consoleError(e)}queue.length=0},flush=function flush(){consume(queueDomReads),consume(queueDomWrites),(queuePending=queueDomReads.length>0)&&plt.raf(flush)},nextTick=function nextTick(cb){return promiseResolve().then(cb)},writeTask=queueTask(queueDomWrites,!0),patchEsm=function patchEsm(){return CSS&&CSS.supports&&CSS.supports("color","var(--c)")?promiseResolve():__webpack_require__.e(1).then(__webpack_require__.t.bind(null,381,7)).then((function(){return(plt.$cssShim$=win.__cssshim)?plt.$cssShim$.i():0}))}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ax0f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5BYb")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("5878")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LqLs")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3yYM")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("6U7i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("sVFb")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("m9LP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("iKE+")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ZUdG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3voH")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("N4z3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("GFpt")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+kY7")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("aYSr")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DfhM")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LJOr")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("pu3o")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("l1C2")},,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("CUMQ")},,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("lZm3")},,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("1Mu/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("tQbP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Ee2X")},,function(module,exports,__webpack_require__){__webpack_require__(153),__webpack_require__(178),__webpack_require__(179),__webpack_require__(220),__webpack_require__(352),__webpack_require__(355),module.exports=__webpack_require__(365)},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ARua")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("9JhN")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("PjZX")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(85)},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/Qos")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JY+C")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("PuIx")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("dSaG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("hQin")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("7nmT")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("LJ7e")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("I2fK")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("DY47")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("3kp9")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/bc2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("/JuR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("+Bxv")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("muFx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Wci6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("WoRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("o3fS")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("JmTi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("xaiR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("SlD/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Monn")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("fmNP")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("uFXj")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("V0IW")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("OCSl")},,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("kA4r")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("Blm6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ssvU")},,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("b2e3")},,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("fRV1")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("maj8")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("F63i")},,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("H87J")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("S3pA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("O1Sc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("zF5n")},,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";__webpack_require__(2),__webpack_require__(29),__webpack_require__(33),__webpack_require__(23),__webpack_require__(25),__webpack_require__(151),__webpack_require__(357),__webpack_require__(6),__webpack_require__(34);var _clientApi=__webpack_require__(41),_clientLogger=__webpack_require__(30),_configFilename=__webpack_require__(379);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator)})),(_configFilename.parameters||_configFilename.globalArgs||_configFilename.globalArgTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globalArgs:_configFilename.globalArgs,globalArgTypes:_configFilename.globalArgTypes})),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("ct80")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("oD4t")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(0)("2sZ7")},function(module,exports,__webpack_require__){var api=__webpack_require__(361),content=__webpack_require__(362);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},,function(module,exports,__webpack_require__){(exports=__webpack_require__(363)(!1)).push([module.i,"/* NOTE: Use plain css for now. Switch to using Sass once someone get's it to load in storybook preview iframe. */\n\n/**\n * Naming scheme for variables is `--component-name-size-property-modifier`.\n */\n\n:root {\n  /* Colors */\n  --color-primary: #00a06e;\n  --color-secondary: #00a3b7;\n  --border-color-light: #dddddd;\n  --background-color-primary: #eeeeee;\n  --background-color-secondary: #eeeeee;\n  --text-color-primary: #333031;\n  /* TODO: all colors here and use them in the color definitions in this file. */\n\n  /* Spacing */\n  --spacing-xxxs: 4px;\n  --spacing-xxs: 8px;\n  --spacing-xs: 12px;\n  --spacing-s: 16px;\n  --spacing-m: 24px;\n  --spacing-l: 32px;\n  --spacing-xl: 40px;\n  --spacing-xxl: 48px;\n\n  /* Body */\n  --body-font-family: Gilroy, Arial, Helvetica, sans-serif;\n  --body-background-color: var(--background-color-primary);\n  --body-text-color: var(--text-color-primary);\n\n  /* Headings */\n  --heading-font-family: Gilroy, Arial, Helvetica, sans-serif;\n\n  /* Labels */\n  --label-font-family: Gilroy, Arial, Helvetica, sans-serif;\n  --label-s-font-weight: 600;\n  --label-m-font-weight: 500;\n  --label-l-font-weight: 400;\n  --label-s-font-size: 10px;\n  --label-m-font-size: 12px;\n  --label-l-font-size: 16px;\n  --label-s-letter-spacing: 0.5px;\n  --label-m-letter-spacing: 1px;\n  --label-l-letter-spacing: 1.28px;\n\n  /* Tags */\n  --tag-color: white;\n  --tag-background-color: black;\n  --tag-border-color: transparent;\n\n  /* Buttons */\n  --button-font-family: Gilroy, Arial, Helvetica, sans-serif;\n  --button-color: white;\n  --button-background-color: #333031;\n  --button-background-color-hover: #646464;\n  --button-font-weight: 500;\n  --button-text-transform: uppercase;\n  --button-s-letter-spacing: 1.6px;\n  --button-m-letter-spacing: 1.28px;\n  --button-l-letter-spacing: 1.28px;\n  --button-border-radius: 8px;\n  --button-box-shadow: none;\n  /* Precise vertical position is dependent on the font. So you might need to adjust this. */\n  --button-s-padding: 12px 24px 8px 24px;\n  --button-m-padding: 18px 32px 14px 32px;\n  --button-l-padding: 18px 32px 14px 32px;\n  --button-s-font-size: 16px;\n  --button-m-font-size: 20px;\n  --button-l-font-size: 24px;\n\n  /* Navigation */\n  --navigation-color: black;\n  --navigation-background-color: white;\n  --navigation-desktop-height: 100px;\n  --navigation-mobile-height: 70px;\n}\n",""]),module.exports=exports},,function(module,exports,__webpack_require__){var map={"./gds-button_2.entry.js":[383,6],"./gds-card_2.entry.js":[384,7],"./gds-label.entry.js":[385,8],"./gds-link.entry.js":[386,9],"./gds-logo-grid-item.entry.js":[387,10],"./gds-logo-grid.entry.js":[388,11],"./gds-media-card.entry.js":[389,12],"./gds-menu-item.entry.js":[390,13],"./gds-menu.entry.js":[391,14],"./gds-navigation.entry.js":[392,15],"./gds-tag.entry.js":[393,16]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return __webpack_require__.e(ids[1]).then((function(){return __webpack_require__(id)}))}webpackAsyncContext.keys=function webpackAsyncContextKeys(){return Object.keys(map)},webpackAsyncContext.id=364,module.exports=webpackAsyncContext},function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(85);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(366)],module)}).call(this,__webpack_require__(107)(module))},function(module,exports,__webpack_require__){var map={"./components/gds-button/gds-button.stories.js":367,"./components/gds-card/gds-card.stories.js":368,"./components/gds-heading/gds-heading.stories.js":369,"./components/gds-label/gds-label.stories.js":370,"./components/gds-link/gds-link.stories.js":371,"./components/gds-logo-grid/gds-logo-grid.stories.js":372,"./components/gds-media-card/gds-media-card.stories.js":373,"./components/gds-menu/gds-menu.stories.js":374,"./components/gds-navigation/gds-navigation.stories.js":375,"./components/gds-paragraph/gds-paragraph.stories.js":376,"./components/gds-tag/gds-tag.stories.js":377,"./styles/style.stories.js":378};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=366},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Button",(function(){return Button}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <p>\n    <gds-button size="s">Basic Button S</gds-button>\n  </p>\n  <p>\n    <gds-button>Basic Default Button M</gds-button>\n  </p>\n  <p>\n    <gds-button left-icon="❮">Icon as character</gds-button>\n  </p>\n  <p>\n    <gds-button right-icon="❮" right-icon-rotate="90">Rotated icon</gds-button>\n  </p>\n  <p>\n    <gds-button left-icon="❮" right-icon="❯">Both icons</gds-button>\n  </p>\n  <p>\n    <gds-button size="s" text left-icon="➞">Text Button S</gds-button>\n  </p>\n  <p>\n    <gds-button size="m" text>Text Button M</gds-button>\n  </p>\n  <p>\n    <gds-button disabled>Disabled Button</gds-button>\n  </p>\n  <gds-paragraph>\n    <a href="https://www.martinstoeckli.ch/fontmap/fontmap.html" target="_blank">List of icon like fonts</a>\n  </gds-paragraph>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:'import { html } from \'lit-html\'\n\nexport default {\n  // This is the folder where this component shows in Storybook.\n  title: \'Atomic Elements\',\n}\n\nexport const Button = () => html`\n  <p>\n    <gds-button size="s">Basic Button S</gds-button>\n  </p>\n  <p>\n    <gds-button>Basic Default Button M</gds-button>\n  </p>\n  <p>\n    <gds-button left-icon="❮">Icon as character</gds-button>\n  </p>\n  <p>\n    <gds-button right-icon="❮" right-icon-rotate="90">Rotated icon</gds-button>\n  </p>\n  <p>\n    <gds-button left-icon="❮" right-icon="❯">Both icons</gds-button>\n  </p>\n  <p>\n    <gds-button size="s" text left-icon="➞">Text Button S</gds-button>\n  </p>\n  <p>\n    <gds-button size="m" text>Text Button M</gds-button>\n  </p>\n  <p>\n    <gds-button disabled>Disabled Button</gds-button>\n  </p>\n  <gds-paragraph>\n    <a href="https://www.martinstoeckli.ch/fontmap/fontmap.html" target="_blank">List of icon like fonts</a>\n  </gds-paragraph>\n`\n',locationsMap:{button:{startLoc:{col:22,line:8},endLoc:{col:1,line:36},startBody:{col:22,line:8},endBody:{col:1,line:36}}}}},title:"Atomic Elements"};var Button=function Button(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Card",(function(){return Card}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <p>\n    <gds-card>\n      A card that renders content in a container that has * white background and border shadows. Comes without\n      padding by default.\n    </gds-card>\n  </p>\n  <p>\n    <gds-card style="padding: 40px;">\n      With padding\n    </gds-card>\n  </p>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  title: 'Containers',\n  component: 'gds-card',\n}\n\n// prettier-ignore\nexport const Card = () => html`\n  <p>\n    <gds-card>\n      A card that renders content in a container that has * white background and border shadows. Comes without\n      padding by default.\n    </gds-card>\n  </p>\n  <p>\n    <gds-card style=\"padding: 40px;\">\n      With padding\n    </gds-card>\n  </p>\n`\n",locationsMap:{card:{startLoc:{col:20,line:9},endLoc:{col:1,line:21},startBody:{col:20,line:9},endBody:{col:1,line:21}}}}},title:"Containers",component:"gds-card"};var Card=function Card(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Heading",(function(){return Heading}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <gds-heading size="xxl">XXL Heading</gds-heading>\n  <gds-heading size="xl">XL Heading</gds-heading>\n  <gds-heading size="l">L Heading</gds-heading>\n  <gds-heading size="m">M Heading</gds-heading>\n  <gds-heading size="s">S Heading</gds-heading>\n  <gds-heading size="l" as="h3">L Heading rendered as h3</gds-heading>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:'import { html } from \'lit-html\'\n\nexport default {\n  title: \'Atomic Elements\',\n  component: \'gds-heading\',\n}\n\n// prettier-ignore\nexport const Heading = () => html`\n  <gds-heading size="xxl">XXL Heading</gds-heading>\n  <gds-heading size="xl">XL Heading</gds-heading>\n  <gds-heading size="l">L Heading</gds-heading>\n  <gds-heading size="m">M Heading</gds-heading>\n  <gds-heading size="s">S Heading</gds-heading>\n  <gds-heading size="l" as="h3">L Heading rendered as h3</gds-heading>\n`\n',locationsMap:{heading:{startLoc:{col:23,line:9},endLoc:{col:1,line:16},startBody:{col:23,line:9},endBody:{col:1,line:16}}}}},title:"Atomic Elements",component:"gds-heading"};var Heading=function Heading(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Label",(function(){return Label}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <p>\n    <gds-label size="l">L Label</gds-label>\n  </p>\n  <p>\n    <gds-label>M Label</gds-label>\n  </p>\n  <p>\n    <gds-label size="s">S Label</gds-label>\n  </p>\n  <p>\n    some text <gds-label color="blue">Label are inline and can use color</gds-label> some text\n  </p>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  title: 'Atomic Elements',\n  component: 'gds-label',\n}\n\n// prettier-ignore\nexport const Label = () => html`\n  <p>\n    <gds-label size=\"l\">L Label</gds-label>\n  </p>\n  <p>\n    <gds-label>M Label</gds-label>\n  </p>\n  <p>\n    <gds-label size=\"s\">S Label</gds-label>\n  </p>\n  <p>\n    some text <gds-label color=\"blue\">Label are inline and can use color</gds-label> some text\n  </p>\n`\n",locationsMap:{label:{startLoc:{col:21,line:9},endLoc:{col:1,line:22},startBody:{col:21,line:9},endBody:{col:1,line:22}}}}},title:"Atomic Elements",component:"gds-label"};var Label=function Label(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Link",(function(){return Link}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <p>\n    <gds-link href="https://www.genero.fi" target="_blank">Basic Link</gds-link>\n  </p>\n  <p>\n    <gds-link>Link without href</gds-link>\n  </p>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  // This is the folder where this component shows in Storybook.\n  title: 'Atomic Elements',\n}\n\n// prettier-ignore\nexport const Link = () => html`\n  <p>\n    <gds-link href=\"https://www.genero.fi\" target=\"_blank\">Basic Link</gds-link>\n  </p>\n  <p>\n    <gds-link>Link without href</gds-link>\n  </p>\n`\n",locationsMap:{link:{startLoc:{col:20,line:9},endLoc:{col:1,line:16},startBody:{col:20,line:9},endBody:{col:1,line:16}}}}},title:"Atomic Elements"};var Link=function Link(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"LogoGrid",(function(){return LogoGrid}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19),_stories_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(63);function _templateObject2(){var data=_taggedTemplateLiteral(['\n  <gds-logo-grid>\n    <gds-logo-grid-item\n      href="https://www.genero.fi"\n      image-url="images/genero-logo.svg"\n    ></gds-logo-grid-item>\n    ',"","","","","","","","","","\n  </gds-logo-grid>\n"]);return _templateObject2=function _templateObject2(){return data},data}function _templateObject(){var data=_taggedTemplateLiteral(['<gds-logo-grid-item\n  image-url="','"\n  ></gds-logo-grid-item>']);return _templateObject=function _templateObject(){return data},data}function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nimport { getMockImageUrl } from '../../stories/utils'\n\nexport default {\n  title: 'Containers',\n  component: 'gds-logo-grid',\n}\n\n// prettier-ignore\nconst item = html`<gds-logo-grid-item\n  image-url=\"${getMockImageUrl('logo', 400, 400, true)}\"\n  ></gds-logo-grid-item>`\n\n// prettier-ignore\nexport const LogoGrid = () => html`\n  <gds-logo-grid>\n    <gds-logo-grid-item\n      href=\"https://www.genero.fi\"\n      image-url=\"images/genero-logo.svg\"\n    ></gds-logo-grid-item>\n    ${item}${item}${item}${item}${item}${item}${item}${item}${item}${item}\n  </gds-logo-grid>\n`\n",locationsMap:{"logo-grid":{startLoc:{col:24,line:16},endLoc:{col:1,line:24},startBody:{col:24,line:16},endBody:{col:1,line:24}}}}},title:"Containers",component:"gds-logo-grid"};var item=Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject(),Object(_stories_utils__WEBPACK_IMPORTED_MODULE_4__.a)("logo",400,400,!0)),LogoGrid=function LogoGrid(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject2(),item,item,item,item,item,item,item,item,item,item)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"MediaCard",(function(){return MediaCard}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19),_stories_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(63);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <p>\n    <gds-media-card headline="Card Headline" image-url="','">\n      <gds-tag>First Tag</gds-tag>\n      <gds-tag href="https://www.genero.fi">Tag with a link</gds-tag>\n    </gds-media-card>\n  </p>\n  <p>\n    <gds-media-card\n      headline="Card Headline"\n      image-url="','"\n      description="L Body: A single micro service platform for five media sites and 16 media brands."\n    >\n      <gds-tag>First Tag</gds-tag>\n      <gds-tag href="https://www.genero.fi">Tag with a link</gds-tag>\n    </gds-media-card>\n  </p>\n  ']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:'import { html } from \'lit-html\'\n\nimport { getMockImageUrl } from \'../../stories/utils\'\n\nexport default {\n  title: \'Complex Components\',\n  component: \'gds-media-card\',\n}\n\n// prettier-ignore\nexport const MediaCard = () => html`\n  <p>\n    <gds-media-card headline="Card Headline" image-url="${getMockImageUrl(\'product\', 500, 500)}">\n      <gds-tag>First Tag</gds-tag>\n      <gds-tag href="https://www.genero.fi">Tag with a link</gds-tag>\n    </gds-media-card>\n  </p>\n  <p>\n    <gds-media-card\n      headline="Card Headline"\n      image-url="${getMockImageUrl(\'product\', 500, 500)}"\n      description="L Body: A single micro service platform for five media sites and 16 media brands."\n    >\n      <gds-tag>First Tag</gds-tag>\n      <gds-tag href="https://www.genero.fi">Tag with a link</gds-tag>\n    </gds-media-card>\n  </p>\n  `\n',locationsMap:{"media-card":{startLoc:{col:25,line:11},endLoc:{col:3,line:28},startBody:{col:25,line:11},endBody:{col:3,line:28}}}}},title:"Complex Components",component:"gds-media-card"};var MediaCard=function MediaCard(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject(),Object(_stories_utils__WEBPACK_IMPORTED_MODULE_4__.a)("product",500,500),Object(_stories_utils__WEBPACK_IMPORTED_MODULE_4__.a)("product",500,500))}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Menu",(function(){return Menu}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject2(){var data=_taggedTemplateLiteral(["\n  <gds-paragraph>Menu can adjust to the screen width.</gds-paragraph>\n  ","\n  <gds-paragraph>Menu be forced to horizontal.</gds-paragraph>\n  ","\n  <gds-paragraph>Menu be forced to vertical.</gds-paragraph>\n  ","\n"]);return _templateObject2=function _templateObject2(){return data},data}function _templateObject(){var data=_taggedTemplateLiteral(['\n  <gds-menu direction="','">\n    <a slot="item" href="#first">\n      <gds-menu-item>First item</gds-menu-item>\n    </a>\n    <a slot="item" href="#2">\n      <gds-menu-item active>Second item</gds-menu-item>\n    </a>\n    <a slot="item" href="#short">\n      <gds-menu-item>Short</gds-menu-item>\n    </a>\n    <a slot="item" href="#4">\n      <gds-menu-item>And with ÖÄÅ</gds-menu-item>\n    </a>\n  </gds-menu>\n']);return _templateObject=function _templateObject(){return data},data}function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}__webpack_exports__.default={parameters:{storySource:{source:'import { html } from \'lit-html\'\n\nexport default {\n  title: \'Containers\',\n  component: \'gds-menu\',\n}\n\nconst getMenu = direction => html`\n  <gds-menu direction="${direction}">\n    <a slot="item" href="#first">\n      <gds-menu-item>First item</gds-menu-item>\n    </a>\n    <a slot="item" href="#2">\n      <gds-menu-item active>Second item</gds-menu-item>\n    </a>\n    <a slot="item" href="#short">\n      <gds-menu-item>Short</gds-menu-item>\n    </a>\n    <a slot="item" href="#4">\n      <gds-menu-item>And with ÖÄÅ</gds-menu-item>\n    </a>\n  </gds-menu>\n`\n\n// prettier-ignore\nexport const Menu = () => html`\n  <gds-paragraph>Menu can adjust to the screen width.</gds-paragraph>\n  ${getMenu()}\n  <gds-paragraph>Menu be forced to horizontal.</gds-paragraph>\n  ${getMenu(\'horizontal\')}\n  <gds-paragraph>Menu be forced to vertical.</gds-paragraph>\n  ${getMenu(\'vertical\')}\n`\n',locationsMap:{menu:{startLoc:{col:20,line:26},endLoc:{col:1,line:33},startBody:{col:20,line:26},endBody:{col:1,line:33}}}}},title:"Containers",component:"gds-menu"};var getMenu=function getMenu(direction){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject(),direction)},Menu=function Menu(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject2(),getMenu(),getMenu("horizontal"),getMenu("vertical"))}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Navigation",(function(){return Navigation}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <gds-navigation>\n    <a slot="logo" href="/">\n      <img src="images/genero-logo.png" />\n    </a>\n    <div slot="menu">\n      <gds-menu key="123">\n        <a slot="item" href="#first">\n          <gds-menu-item>First item</gds-menu-item>\n        </a>\n        <a slot="item" href="#2">\n          <gds-menu-item active>Second item</gds-menu-item>\n        </a>\n        <a slot="item" href="#short">\n          <gds-menu-item>Short</gds-menu-item>\n        </a>\n        <a slot="item" href="#4">\n          <gds-menu-item>And with ÖÄÅ</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n    <div slot="desktop-extensions">\n      <gds-menu key="321">\n        <a slot="item" href="#fi">\n          <gds-menu-item>FI</gds-menu-item>\n        </a>\n        <a slot="item" href="#se">\n          <gds-menu-item>SE</gds-menu-item>\n        </a>\n        <a slot="item" href="#en">\n          <gds-menu-item>EN</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n    <div slot="mobile-extensions">\n      <gds-menu key="321">\n        <a slot="item" href="#fi">\n          <gds-menu-item>Finnish</gds-menu-item>\n        </a>\n        <a slot="item" href="#se">\n          <gds-menu-item>Sverge</gds-menu-item>\n        </a>\n        <a slot="item" href="#en">\n          <gds-menu-item>English</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n  </gds-navigation>\n  <gds-paragraph>Navigation adjusts to the screen width.</gds-paragraph>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:'import { html } from \'lit-html\'\n\nexport default {\n  title: \'Complex Components\',\n  component: \'gds-navigation\',\n}\n\n// prettier-ignore\nexport const Navigation = () => html`\n  <gds-navigation>\n    <a slot="logo" href="/">\n      <img src="images/genero-logo.png" />\n    </a>\n    <div slot="menu">\n      <gds-menu key="123">\n        <a slot="item" href="#first">\n          <gds-menu-item>First item</gds-menu-item>\n        </a>\n        <a slot="item" href="#2">\n          <gds-menu-item active>Second item</gds-menu-item>\n        </a>\n        <a slot="item" href="#short">\n          <gds-menu-item>Short</gds-menu-item>\n        </a>\n        <a slot="item" href="#4">\n          <gds-menu-item>And with ÖÄÅ</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n    <div slot="desktop-extensions">\n      <gds-menu key="321">\n        <a slot="item" href="#fi">\n          <gds-menu-item>FI</gds-menu-item>\n        </a>\n        <a slot="item" href="#se">\n          <gds-menu-item>SE</gds-menu-item>\n        </a>\n        <a slot="item" href="#en">\n          <gds-menu-item>EN</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n    <div slot="mobile-extensions">\n      <gds-menu key="321">\n        <a slot="item" href="#fi">\n          <gds-menu-item>Finnish</gds-menu-item>\n        </a>\n        <a slot="item" href="#se">\n          <gds-menu-item>Sverge</gds-menu-item>\n        </a>\n        <a slot="item" href="#en">\n          <gds-menu-item>English</gds-menu-item>\n        </a>\n      </gds-menu>\n    </div>\n  </gds-navigation>\n  <gds-paragraph>Navigation adjusts to the screen width.</gds-paragraph>\n`\n',locationsMap:{navigation:{startLoc:{col:26,line:9},endLoc:{col:1,line:58},startBody:{col:26,line:9},endBody:{col:1,line:58}}}}},title:"Complex Components",component:"gds-navigation"};var Navigation=function Navigation(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Paragraph",(function(){return Paragraph}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <gds-paragraph size="l">L Paragraph</gds-paragraph>\n  <gds-paragraph size="m">M Paragraph</gds-paragraph>\n  <gds-paragraph size="s">S Paragraph</gds-paragraph>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  title: 'Atomic Elements',\n  component: 'gds-paragraph',\n}\n\n// prettier-ignore\nexport const Paragraph = () => html`\n  <gds-paragraph size=\"l\">L Paragraph</gds-paragraph>\n  <gds-paragraph size=\"m\">M Paragraph</gds-paragraph>\n  <gds-paragraph size=\"s\">S Paragraph</gds-paragraph>\n`\n",locationsMap:{paragraph:{startLoc:{col:25,line:9},endLoc:{col:1,line:13},startBody:{col:25,line:9},endBody:{col:1,line:13}}}}},title:"Atomic Elements",component:"gds-paragraph"};var Paragraph=function Paragraph(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Tag",(function(){return Tag}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <style>\n    .override {\n      --tag-color: red;\n      --tag-background-color: transparent;\n      --tag-border-color: red;\n    }\n  </style>\n  <gds-tag>Label for labels and tags</gds-tag>\n  <gds-tag href="https://www.genero.fi" target="_blank">Label with a link</gds-tag>\n  <gds-tag class="override">Label can override colors and borders</gds-tag>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  title: 'Atomic Elements',\n  component: 'gds-tag',\n}\n\n// prettier-ignore\nexport const Tag = () => html`\n  <style>\n    .override {\n      --tag-color: red;\n      --tag-background-color: transparent;\n      --tag-border-color: red;\n    }\n  </style>\n  <gds-tag>Label for labels and tags</gds-tag>\n  <gds-tag href=\"https://www.genero.fi\" target=\"_blank\">Label with a link</gds-tag>\n  <gds-tag class=\"override\">Label can override colors and borders</gds-tag>\n`\n",locationsMap:{tag:{startLoc:{col:19,line:9},endLoc:{col:1,line:20},startBody:{col:19,line:9},endBody:{col:1,line:20}}}}},title:"Atomic Elements",component:"gds-tag"};var Tag=function Tag(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject())}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Colors",(function(){return Colors}));__webpack_require__(7),__webpack_require__(23),__webpack_require__(24);var lit_html__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);function _templateObject(){var data=function _taggedTemplateLiteral(strings,raw){raw||(raw=strings.slice(0));return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(['\n  <gds-paragraph>\n    <gds-card style="background-color: var(--color-primary); ','">\n      Primary\n    </gds-card>\n    <gds-card style="background-color: var(--color-secondary); ','">\n      Secondary\n    </gds-card>\n    <gds-card style="background-color: var(--body-background-color); ',' color: black;">\n      Body\n    </gds-card>\n  </gds-paragraph>\n']);return _templateObject=function _templateObject(){return data},data}__webpack_exports__.default={parameters:{storySource:{source:"import { html } from 'lit-html'\n\nexport default {\n  title: 'Atomic Elements',\n  component: 'gds-paragraph',\n}\n\nconst style = `\n  padding: 20px;\n  margin: 20px;\n  color: white;\n`\n\n// prettier-ignore\nexport const Colors = () => html`\n  <gds-paragraph>\n    <gds-card style=\"background-color: var(--color-primary); ${style}\">\n      Primary\n    </gds-card>\n    <gds-card style=\"background-color: var(--color-secondary); ${style}\">\n      Secondary\n    </gds-card>\n    <gds-card style=\"background-color: var(--body-background-color); ${style} color: black;\">\n      Body\n    </gds-card>\n  </gds-paragraph>\n`\n",locationsMap:{colors:{startLoc:{col:22,line:15},endLoc:{col:1,line:27},startBody:{col:22,line:15},endBody:{col:1,line:27}}}}},title:"Atomic Elements",component:"gds-paragraph"};var style="\n  padding: 20px;\n  margin: 20px;\n  color: white;\n",Colors=function Colors(){return Object(lit_html__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject(),style,style,style)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(360),__webpack_require__(10),__webpack_require__(57);var index_ae5ae664=__webpack_require__(79);!function defineCustomElements(win,options){"undefined"==typeof window?Promise.resolve():Object(index_ae5ae664.b)().then((function(){return Object(index_ae5ae664.c)([["gds-media-card",[[1,"gds-media-card",{href:[1],target:[1],headline:[1],imageUrl:[1,"image-url"],superimposedImageUrl:[1,"superimposed-image-url"],superimposedImageFit:[1,"superimposed-image-fit"],description:[1]}]]],["gds-tag",[[4,"gds-tag",{href:[1],target:[1]}]]],["gds-logo-grid-item",[[1,"gds-logo-grid-item",{href:[1],target:[1],imageUrl:[1,"image-url"]}]]],["gds-menu-item",[[1,"gds-menu-item",{active:[516]}]]],["gds-navigation",[[4,"gds-navigation",{menuIcon:[32],open:[32]}]]],["gds-logo-grid",[[1,"gds-logo-grid"]]],["gds-menu",[[1,"gds-menu",{direction:[1]}]]],["gds-button_2",[[1,"gds-button",{disabled:[516],text:[4],size:[1],leftIcon:[1,"left-icon"],rightIcon:[1,"right-icon"],rightIconRotate:[2,"right-icon-rotate"],leftIconRotate:[2,"left-icon-rotate"]}],[1,"gds-paragraph",{size:[1],class:[1]}]]],["gds-card_2",[[1,"gds-card"],[4,"gds-heading",{size:[1],as:[1]}]]],["gds-label",[[1,"gds-label",{size:[1],color:[1]}]]],["gds-link",[[4,"gds-link",{href:[513],target:[1],block:[4]}]]]],options)}))}()}],[[152,3,4]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdG9yeWJvb2tfZG9jc19kbGxcIiIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZ2xvYmFsL3dpbmRvdy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcG9saXNoZWQvZGlzdC9wb2xpc2hlZC5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJvbGQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vQHN0b3J5Ym9vay9jc2YvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90cy1kZWRlbnQvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9tZW1vaXplcmlmaWMvbWVtb2l6ZXJpZmljLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9tYXBWYWx1ZXMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uL3NyYy9zdG9yaWVzL3V0aWxzLmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi9kaXN0L2VzbS9pbmRleC1hZTVhZTY2NC5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb21lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL21vZHVsZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcXMvbGliL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL2NvcmUvZGlzdC9jb3JlLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL21hcmtkb3duLXRvLWpzeC9kaXN0L2VzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtZmxvYXQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9haXJibmItanMtc2hpbXMvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL3N0b3J5Ym9vay1pbml0LWZyYW1ld29yay1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvbWVyZ2VXaXRoLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi90ZWxlanNvbi9kaXN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LWRvbS9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9AZW1vdGlvbi9zdHlsZWQvZGlzdC9zdHlsZWQuYnJvd3Nlci5lc20uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vZW1vdGlvbi10aGVtaW5nL2Rpc3QvZW1vdGlvbi10aGVtaW5nLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2RlZXAtb2JqZWN0LWRpZmYvZGlzdC9pbmRleC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2pzeC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9janMvbGFuZ3VhZ2VzL3ByaXNtL2Jhc2guanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9jc3MuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS9qc29uLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vbWFya3VwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vbWFya2Rvd24uanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2xhbmd1YWdlcy9wcmlzbS95YW1sLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vdHN4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2Nqcy9sYW5ndWFnZXMvcHJpc20vdHlwZXNjcmlwdC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvY2pzL2NyZWF0ZS1lbGVtZW50LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL292ZXJsYXlzY3JvbGxiYXJzL2pzL092ZXJsYXlTY3JvbGxiYXJzLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvZGlzdC9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS5icm93c2VyLmVzbS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1wb3BwZXItdG9vbHRpcC9kaXN0L2VzbS9yZWFjdC1wb3BwZXItdG9vbHRpcC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9yZWFjdC1jb2xvci9saWIvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9vYmplY3QtYXNzaWduL2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL3Byb2Nlc3MvYnJvd3Nlci5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2FycmF5TWFwLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBzdG9yeWJvb2tfZG9jc19kbGwiLCJ3ZWJwYWNrOi8vL2RlbGVnYXRlZCAuL2xvZGFzaC9fYmFzZVBpY2tCeS5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy8uLy5zdG9yeWJvb2svcHJldmlldy5qcy1nZW5lcmF0ZWQtY29uZmlnLWVudHJ5LmpzIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyBmcm9tIGRsbC1yZWZlcmVuY2Ugc3Rvcnlib29rX2RvY3NfZGxsIiwid2VicGFjazovLy9kZWxlZ2F0ZWQgLi9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMgZnJvbSBkbGwtcmVmZXJlbmNlIHN0b3J5Ym9va19kb2NzX2RsbCIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2luZGV4LmNzcz85NWM1Iiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguY3NzIiwid2VicGFjazovLy8uL2Rpc3QvZXNtIGxhenkgXlxcLlxcLy4qXFwuZW50cnlcXC5qcyQgaW5jbHVkZTogXFwuZW50cnlcXC5qcyQgZXhjbHVkZTogXFwuc3lzdGVtXFwuZW50cnlcXC5qcyQgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi8uc3Rvcnlib29rL2dlbmVyYXRlZC1zdG9yaWVzLWVudHJ5LmpzIiwid2VicGFjazovLy9cXC4pLioiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2RzLWJ1dHRvbi9nZHMtYnV0dG9uLnN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2RzLWNhcmQvZ2RzLWNhcmQuc3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nZHMtaGVhZGluZy9nZHMtaGVhZGluZy5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dkcy1sYWJlbC9nZHMtbGFiZWwuc3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nZHMtbGluay9nZHMtbGluay5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dkcy1sb2dvLWdyaWQvZ2RzLWxvZ28tZ3JpZC5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dkcy1tZWRpYS1jYXJkL2dkcy1tZWRpYS1jYXJkLnN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZ2RzLW1lbnUvZ2RzLW1lbnUuc3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9nZHMtbmF2aWdhdGlvbi9nZHMtbmF2aWdhdGlvbi5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dkcy1wYXJhZ3JhcGgvZ2RzLXBhcmFncmFwaC5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2dkcy10YWcvZ2RzLXRhZy5zdG9yaWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMvc3R5bGUuc3Rvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2VzbS9sb2FkZXIubWpzIiwid2VicGFjazovLy8uLy5zdG9yeWJvb2svcHJldmlldy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3Rvcnlib29rX2RvY3NfZGxsIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImdldE1vY2tJbWFnZVVybCIsInRlcm0iLCJ3aWR0aCIsImhlaWdodCIsInJhbmQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJNYXRoIiwic2NvcGVJZCIsImNvbnRlbnRSZWYiLCJob3N0VGFnTmFtZSIsInVzZU5hdGl2ZVNoYWRvd0RvbSIsImNoZWNrU2xvdEZhbGxiYWNrVmlzaWJpbGl0eSIsImNoZWNrU2xvdFJlbG9jYXRlIiwicXVldWVQZW5kaW5nIiwid2luIiwid2luZG93IiwiQ1NTIiwiZG9jIiwiZG9jdW1lbnQiLCJoZWFkIiwicGx0IiwiJGZsYWdzJCIsIiRyZXNvdXJjZXNVcmwkIiwiam1wIiwiaCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFlbCIsImVsIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJvcHRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdXBwb3J0c1NoYWRvdyIsImF0dGFjaFNoYWRvdyIsImluZGV4T2YiLCJwcm9taXNlUmVzb2x2ZSIsInYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInN1cHBvcnRzQ29uc3RydWN0aWJsZVN0eWxlc2hlZXRzIiwiQ1NTU3R5bGVTaGVldCIsImUiLCJIWURSQVRFRF9DU1MiLCJyb290QXBwbGllZFN0eWxlcyIsIldlYWtNYXAiLCJyZWdpc3RlclN0eWxlIiwiY3NzVGV4dCIsImFsbG93Q1MiLCJzdHlsZSIsInN0eWxlcyIsImdldCIsInJlcGxhY2UiLCJzZXQiLCJhdHRhY2hTdHlsZXMiLCJob3N0UmVmIiwiY21wTWV0YSIsIiRjbXBNZXRhJCIsImVsbSIsIiRob3N0RWxlbWVudCQiLCJmbGFncyIsImVuZEF0dGFjaFN0eWxlcyIsIiR0YWdOYW1lJCIsImFkZFN0eWxlIiwic3R5bGVDb250YWluZXJOb2RlIiwibW9kZSIsImhvc3RFbG0iLCJnZXRTY29wZUlkIiwibm9kZVR5cGUiLCJzdHlsZUVsbSIsImFwcGxpZWRTdHlsZXMiLCJTZXQiLCJoYXMiLCIkY3NzU2hpbSQiLCJuZXdTY29wZUlkIiwiY3JlYXRlSG9zdFN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImluc2VydEJlZm9yZSIsInF1ZXJ5U2VsZWN0b3IiLCJhZGQiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJpbmNsdWRlcyIsInNoYWRvd1Jvb3QiLCJnZXRSb290Tm9kZSIsIiRtb2RlTmFtZSQiLCJjbGFzc0xpc3QiLCJ0YWdOYW1lIiwiRU1QVFlfT0JKIiwiaXNDb21wbGV4VHlwZSIsIm8iLCJub2RlTmFtZSIsInZub2RlRGF0YSIsImNoaWxkIiwic2xvdE5hbWUiLCJzaW1wbGUiLCJsYXN0U2ltcGxlIiwidk5vZGVDaGlsZHJlbiIsIndhbGsiLCJjIiwiaSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsIlN0cmluZyIsIiR0ZXh0JCIsInB1c2giLCJuZXdWTm9kZSIsImNoaWxkcmVuIiwibmFtZSIsImNsYXNzRGF0YSIsImNsYXNzTmFtZSIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrIiwiam9pbiIsInZub2RlIiwiJGF0dHJzJCIsIiRjaGlsZHJlbiQiLCIkbmFtZSQiLCJ0YWciLCJ0ZXh0IiwiJHRhZyQiLCIkZWxtJCIsIkhvc3QiLCJzZXRBY2Nlc3NvciIsIm1lbWJlck5hbWUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiaXNTdmciLCJpc1Byb3AiLCJpc01lbWJlckluRWxlbWVudCIsImxuIiwidG9Mb3dlckNhc2UiLCJvbGRDbGFzc2VzIiwicGFyc2VDbGFzc0xpc3QiLCJuZXdDbGFzc2VzIiwicmVtb3ZlIiwicHJvcCIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJpc0NvbXBsZXgiLCJuIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2xpY2UiLCJwYXJzZUNsYXNzTGlzdFJlZ2V4IiwidmFsdWUiLCJzcGxpdCIsInVwZGF0ZUVsZW1lbnQiLCJvbGRWbm9kZSIsIm5ld1Zub2RlIiwiaXNTdmdNb2RlIiwiaG9zdCIsIm9sZFZub2RlQXR0cnMiLCJuZXdWbm9kZUF0dHJzIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxtIiwib2xkUGFyZW50Vk5vZGUiLCJuZXdQYXJlbnRWTm9kZSIsImNoaWxkSW5kZXgiLCJwYXJlbnRFbG0iLCJjaGlsZE5vZGUiLCJvbGRWTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiaXNEZWYiLCJhcHBlbmRDaGlsZCIsInB1dEJhY2tJbk9yaWdpbmFsTG9jYXRpb24iLCJyZWN1cnNpdmUiLCJvbGRTbG90Q2hpbGROb2RlcyIsImNoaWxkTm9kZXMiLCJwYXJlbnRSZWZlcmVuY2VOb2RlIiwicmVmZXJlbmNlTm9kZSIsImFkZFZub2RlcyIsImJlZm9yZSIsInBhcmVudFZOb2RlIiwidm5vZGVzIiwic3RhcnRJZHgiLCJlbmRJZHgiLCJjb250YWluZXJFbG0iLCJwYXJlbnROb2RlIiwicmVtb3ZlVm5vZGVzIiwiY2FsbE5vZGVSZWZzIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwibm9kZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJpc1NhbWVWbm9kZSIsInBhdGNoIiwibmV4dFNpYmxpbmciLCJ2bm9kZTEiLCJ2bm9kZTIiLCJkZWZhdWx0SG9sZGVyIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsInRleHRDb250ZW50IiwiZGF0YSIsInJlbG9jYXRlTm9kZXMiLCJpc05vZGVMb2NhdGVkSW5TbG90Iiwibm9kZVRvUmVsb2NhdGUiLCJzbG90TmFtZUF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJ2Tm9kZSIsInJlZiIsIm1hcCIsInJlbmRlclZkb20iLCJyZW5kZXJGblJlc3VsdHMiLCIkdm5vZGUkIiwicm9vdFZub2RlIiwiaXNIb3N0IiwiJGF0dHJzVG9SZWZsZWN0JCIsInByb3BOYW1lIiwiYXR0cmlidXRlIiwicmVsb2NhdGVEYXRhIiwib3JnTG9jYXRpb25Ob2RlIiwicGFyZW50Tm9kZVJlZiIsImluc2VydEJlZm9yZU5vZGUiLCJyZWZOb2RlIiwicmVsb2NhdGVTbG90Q29udGVudCIsImhvc3RDb250ZW50Tm9kZXMiLCJyZWxvY2F0ZU5vZGVEYXRhIiwiaiIsImlsZW4iLCJmaW5kIiwiciIsIiRub2RlVG9SZWxvY2F0ZSQiLCIkc2xvdFJlZk5vZGUkIiwicmVsb2NhdGVOb2RlIiwic29tZSIsInByZXZpb3VzU2libGluZyIsImhpZGRlbiIsInVwZGF0ZUZhbGxiYWNrU2xvdFZpc2liaWxpdHkiLCJ0cmltIiwiYXR0YWNoVG9BbmNlc3RvciIsImFuY2VzdG9yQ29tcG9uZW50IiwiJG9uUmVuZGVyUmVzb2x2ZSQiLCJzY2hlZHVsZVVwZGF0ZSIsImlzSW5pdGlhbExvYWQiLCIkYW5jZXN0b3JDb21wb25lbnQkIiwid3JpdGVUYXNrIiwiZGlzcGF0Y2giLCJkaXNwYXRjaEhvb2tzIiwiZW5kU2NoZWR1bGUiLCJpbnN0YW5jZSIsIiRsYXp5SW5zdGFuY2UkIiwidGhlbiIsInByb21pc2UiLCJ1cGRhdGVDb21wb25lbnQiLCJlbmRVcGRhdGUiLCJyYyIsImVuZFJlbmRlciIsImNhbGxSZW5kZXIiLCJ1cGRhdGVIb3N0IiwiY2IiLCJjaGlsZHJlblByb21pc2VzIiwicG9zdFVwZGF0ZSIsInBvc3RVcGRhdGVDb21wb25lbnQiLCJhbGwiLCJyZW5kZXIiLCJjb25zb2xlRXJyb3IiLCJlbmRQb3N0VXBkYXRlIiwiYWRkSHlkcmF0ZWRGbGFnIiwiJG9uUmVhZHlSZXNvbHZlJCIsImFwcERpZExvYWQiLCJuZXh0VGljayIsImZvcmNlVXBkYXRlIiwiZ2V0SG9zdFJlZiIsImlzQ29ubmVjdGVkIiwid2hvIiwiZG9jdW1lbnRFbGVtZW50IiwiZW1pdEV2ZW50IiwiZXYiLCJDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJkZXRhaWwiLCJuYW1lc3BhY2UiLCJ0aGVuRm4iLCJzZXRWYWx1ZSIsIm5ld1ZhbCIsIm9sZFZhbCIsIiRpbnN0YW5jZVZhbHVlcyQiLCJwYXJzZVByb3BlcnR5VmFsdWUiLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsInBhcnNlRmxvYXQiLCIkbWVtYmVycyQiLCJwcm94eUNvbXBvbmVudCIsIkNzdHIiLCJtZW1iZXJzIiwiZW50cmllcyIsInByb3RvdHlwZSIsIm1lbWJlckZsYWdzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRWYWx1ZSIsInRoaXMiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiYXR0ck5hbWVUb1Byb3BOYW1lIiwiTWFwIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiYXR0ck5hbWUiLCJfb2xkVmFsdWUiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJtIiwiaW5pdGlhbGl6ZUNvbXBvbmVudCIsImhtclZlcnNpb25JZCIsImxvYWRNb2R1bGUiLCJlbmRMb2FkIiwiaXNQcm94aWVkIiwiZW5kTmV3SW5zdGFuY2UiLCJlbmRSZWdpc3RlclN0eWxlcyIsInNjb3BlQ3NzIiwic2NoZWR1bGUiLCJjb25uZWN0ZWRDYWxsYmFjayIsImVuZENvbm5lY3RlZCIsInNldENvbnRlbnRSZWZlcmVuY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnRlbnRSZWZFbG0iLCJjcmVhdGVDb21tZW50IiwiZmlyc3RDaGlsZCIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwicmVtb3ZlSG9zdCIsImJvb3RzdHJhcExhenkiLCJsYXp5QnVuZGxlcyIsImFwcExvYWRGYWxsYmFjayIsIm9wdGlvbnMiLCJlbmRCb290c3RyYXAiLCJjbXBUYWdzIiwiZXhjbHVkZSIsImN1c3RvbUVsZW1lbnRzIiwibWV0YUNoYXJzZXQiLCJ2aXNpYmlsaXR5U3R5bGUiLCJkZWZlcnJlZENvbm5lY3RlZENhbGxiYWNrcyIsImlzQm9vdHN0cmFwcGluZyIsImFzc2lnbiIsIlVSTCIsInJlc291cmNlc1VybCIsImJhc2VVUkkiLCJocmVmIiwibGF6eUJ1bmRsZSIsImNvbXBhY3RNZXRhIiwiJGxpc3RlbmVycyQiLCJIb3N0RWxlbWVudCIsInNlbGYiLCJyZWdpc3Rlckhvc3QiLCJjbGVhclRpbWVvdXQiLCIkb25SZWFkeVByb21pc2UkIiwiSFRNTEVsZW1lbnQiLCIkbGF6eUJ1bmRsZUlkcyQiLCJkZWZpbmUiLCJzZXRUaW1lb3V0IiwiaG9zdFJlZnMiLCJyZWdpc3Rlckluc3RhbmNlIiwibGF6eUluc3RhbmNlIiwiY29uc29sZSIsImVycm9yIiwiY21wTW9kdWxlcyIsImV4cG9ydE5hbWUiLCJidW5kbGVJZCIsImltcG9ydGVkTW9kdWxlIiwicXVldWVEb21SZWFkcyIsInF1ZXVlRG9tV3JpdGVzIiwicXVldWVUYXNrIiwicXVldWUiLCJ3cml0ZSIsImZsdXNoIiwiY29uc3VtZSIsInBlcmZvcm1hbmNlIiwibm93IiwicGF0Y2hFc20iLCJzdXBwb3J0cyIsIl9fY3Nzc2hpbSIsIl9jbGllbnRBcGkiLCJyZXF1aXJlIiwiX2NsaWVudExvZ2dlciIsIl9jb25maWdGaWxlbmFtZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJvYmoiLCJ3cml0YWJsZSIsImFyZ3MiLCJhcmdUeXBlcyIsImxvZ2dlciIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwiZGVjb3JhdG9ycyIsImRlY29yYXRvciIsImFkZERlY29yYXRvciIsInBhcmFtZXRlcnMiLCJnbG9iYWxBcmdzIiwiZ2xvYmFsQXJnVHlwZXMiLCJhZGRQYXJhbWV0ZXJzIiwiYXJnVHlwZXNFbmhhbmNlcnMiLCJlbmhhbmNlciIsImFkZEFyZ1R5cGVzRW5oYW5jZXIiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ3ZWJwYWNrQXN5bmNDb250ZXh0IiwicmVxIiwiRXJyb3IiLCJjb2RlIiwiaWRzIiwiaWQiLCJ3ZWJwYWNrQXN5bmNDb250ZXh0S2V5cyIsIl9mcmFtZXdvcmsiLCJfU3Rvcnlib29rUHJlc2VydmVEZWNvcmF0b3JzIiwiY29uZmlndXJlIiwid2VicGFja0NvbnRleHQiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJ3ZWJwYWNrQ29udGV4dEtleXMiLCJ0aXRsZSIsIkJ1dHRvbiIsImh0bWwiLCJjb21wb25lbnQiLCJDYXJkIiwiSGVhZGluZyIsIkxhYmVsIiwiTGluayIsIml0ZW0iLCJMb2dvR3JpZCIsIk1lZGlhQ2FyZCIsImdldE1lbnUiLCJkaXJlY3Rpb24iLCJNZW51IiwiTmF2aWdhdGlvbiIsIlBhcmFncmFwaCIsIlRhZyIsIkNvbG9ycyIsImRlZmluZUN1c3RvbUVsZW1lbnRzIl0sIm1hcHBpbmdzIjoia0ZBQUFBLE9BQU9DLFFBQVVDLG9CLDZDQ0FqQkYsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FB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RSxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLCtDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywrQ0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLG9EQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsbURDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw0RENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUywyUkNBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw0RUNBMUMsb0Usa0RDQUFILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyx3RENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsZ0RDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2RENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyxrRENBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDZDQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsNkNDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw4Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLGdEQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsK0NDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLHFFQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsOENDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLG1EQ0ExQ0gsT0FBT0MsUUFBV0Usb0JBQW9CLEVBQXJCLENBQXlCLFMsbUVDQTFDSCxPQUFPQyxRQUFXRSxvQkFBb0IsRUFBckIsQ0FBeUIsUyw2Q0NBMUNILE9BQU9DLFFBQVdFLG9CQUFvQixFQUFyQixDQUF5QixTLDhDQ0Ex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c0IsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEtBQU8sQ0FBQyxHQUFHLE1BQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFjLENBQUMsS0FBTyxDQUFDLEdBQUcsR0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxLQUFPLENBQUMsR0FBRyxNQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLEtBQU8sQ0FBQyxLQUFLLE9BQVMsQ0FBQyxHQUFHLE1BQVEsQ0FBQyxRQUFTRyxZQ0Vua0MySCxLIiwiZmlsZSI6Im1haW4uZmE2NDM2NjQxZGI5OWJkMzNhYWIuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBzdG9yeWJvb2tfZG9jc19kbGw7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJFUmtQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiMXQ3UFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIklBZERcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJobzB6XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiK0tYT1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk0rL0ZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ2clJmXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwialEveVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjd4L0NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJwbEJ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiMkc5U1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjg3aWZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJsVEVMXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwia1l4UFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIno4NElcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJhTGdvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiRForY1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImNBUk9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJLcVh3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiaENPYVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkVnUlBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ5SC9mXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiVXZtQlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk55TVlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJhb2tBXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibE41QlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkxXMGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJZc2doXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiand1ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIitveFpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI3eFJVXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiMUl1Y1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk12VUxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJaVmtCXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiS090WlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImpRM2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ4NHQwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiV05NQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlljdDVcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIxSXNaXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiQTNVUVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImhCcEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ2YkR3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwieTJBaFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkp0UGZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ0VnFuXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiNW80M1wiKTsiLCIvKipcbiAqIEdldCByZW1vdGUgdXJsIGZvciBhIHJhbmRvbSBtb2NrIGltYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja0ltYWdlVXJsKHRlcm0sIHdpZHRoLCBoZWlnaHQsIHJhbmQpIHtcbiAgcmV0dXJuIGBodHRwczovL3NvdXJjZS51bnNwbGFzaC5jb20vJHt3aWR0aCB8fCA1MDB9eCR7aGVpZ2h0IHx8IDUwMH0vPyR7XG4gICAgKHRlcm0gPyBlbmNvZGVVUklDb21wb25lbnQodGVybSkgOiAnJykgKyAocmFuZCA/IE1hdGgucmFuZG9tKCkgOiAnJylcbiAgfWBcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTFV3ZFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlAyYUdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJDbTRvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiajRTZlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk9aYUpcIik7IiwiY29uc3QgTkFNRVNQQUNFID0gJ2dkcyc7XG5cbmxldCBzY29wZUlkO1xubGV0IGNvbnRlbnRSZWY7XG5sZXQgaG9zdFRhZ05hbWU7XG5sZXQgdXNlTmF0aXZlU2hhZG93RG9tID0gZmFsc2U7XG5sZXQgY2hlY2tTbG90RmFsbGJhY2tWaXNpYmlsaXR5ID0gZmFsc2U7XG5sZXQgY2hlY2tTbG90UmVsb2NhdGUgPSBmYWxzZTtcbmxldCBpc1N2Z01vZGUgPSBmYWxzZTtcbmxldCBxdWV1ZVBlbmRpbmcgPSBmYWxzZTtcbmNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG5jb25zdCBDU1MgPSAgd2luLkNTUyA7XG5jb25zdCBkb2MgPSB3aW4uZG9jdW1lbnQgfHwgeyBoZWFkOiB7fSB9O1xuY29uc3QgcGx0ID0ge1xuICAgICRmbGFncyQ6IDAsXG4gICAgJHJlc291cmNlc1VybCQ6ICcnLFxuICAgIGptcDogaCA9PiBoKCksXG4gICAgcmFmOiBoID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShoKSxcbiAgICBhZWw6IChlbCwgZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0cykgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBvcHRzKSxcbiAgICByZWw6IChlbCwgZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0cykgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBvcHRzKSxcbn07XG5jb25zdCBzdXBwb3J0c1NoYWRvdyA9ICAvKkBfX1BVUkVfXyovICgoKSA9PiAoZG9jLmhlYWQuYXR0YWNoU2hhZG93ICsgJycpLmluZGV4T2YoJ1tuYXRpdmUnKSA+IC0xKSgpIDtcbmNvbnN0IHByb21pc2VSZXNvbHZlID0gKHYpID0+IFByb21pc2UucmVzb2x2ZSh2KTtcbmNvbnN0IHN1cHBvcnRzQ29uc3RydWN0aWJsZVN0eWxlc2hlZXRzID0gIC8qQF9fUFVSRV9fKi8gKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBDU1NTdHlsZVNoZWV0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KSgpXG4gICAgO1xuY29uc3QgSFlEUkFURURfQ1NTID0gJ3t2aXNpYmlsaXR5OmhpZGRlbn0uaHlkcmF0ZWR7dmlzaWJpbGl0eTppbmhlcml0fSc7XG5jb25zdCBjcmVhdGVUaW1lID0gKGZuTmFtZSwgdGFnTmFtZSA9ICcnKSA9PiB7XG4gICAge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCB1bmlxdWVUaW1lID0gKGtleSwgbWVhc3VyZVRleHQpID0+IHtcbiAgICB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxufTtcbmNvbnN0IHJvb3RBcHBsaWVkU3R5bGVzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJlZ2lzdGVyU3R5bGUgPSAoc2NvcGVJZCwgY3NzVGV4dCwgYWxsb3dDUykgPT4ge1xuICAgIGxldCBzdHlsZSA9IHN0eWxlcy5nZXQoc2NvcGVJZCk7XG4gICAgaWYgKHN1cHBvcnRzQ29uc3RydWN0aWJsZVN0eWxlc2hlZXRzICYmIGFsbG93Q1MpIHtcbiAgICAgICAgc3R5bGUgPSAoc3R5bGUgfHwgbmV3IENTU1N0eWxlU2hlZXQoKSk7XG4gICAgICAgIHN0eWxlLnJlcGxhY2UoY3NzVGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHlsZSA9IGNzc1RleHQ7XG4gICAgfVxuICAgIHN0eWxlcy5zZXQoc2NvcGVJZCwgc3R5bGUpO1xufTtcbmNvbnN0IGFkZFN0eWxlID0gKHN0eWxlQ29udGFpbmVyTm9kZSwgY21wTWV0YSwgbW9kZSwgaG9zdEVsbSkgPT4ge1xuICAgIGxldCBzY29wZUlkID0gIGdldFNjb3BlSWQoY21wTWV0YS4kdGFnTmFtZSQpO1xuICAgIGxldCBzdHlsZSA9IHN0eWxlcy5nZXQoc2NvcGVJZCk7XG4gICAgLy8gaWYgYW4gZWxlbWVudCBpcyBOT1QgY29ubmVjdGVkIHRoZW4gZ2V0Um9vdE5vZGUoKSB3aWxsIHJldHVybiB0aGUgd3Jvbmcgcm9vdCBub2RlXG4gICAgLy8gc28gdGhlIGZhbGxiYWNrIGlzIHRvIGFsd2F5cyB1c2UgdGhlIGRvY3VtZW50IGZvciB0aGUgcm9vdCBub2RlIGluIHRob3NlIGNhc2VzXG4gICAgc3R5bGVDb250YWluZXJOb2RlID0gc3R5bGVDb250YWluZXJOb2RlLm5vZGVUeXBlID09PSAxMSAvKiBEb2N1bWVudEZyYWdtZW50ICovID8gc3R5bGVDb250YWluZXJOb2RlIDogZG9jO1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3R5bGVDb250YWluZXJOb2RlID0gc3R5bGVDb250YWluZXJOb2RlLmhlYWQgfHwgc3R5bGVDb250YWluZXJOb2RlO1xuICAgICAgICAgICAgbGV0IGFwcGxpZWRTdHlsZXMgPSByb290QXBwbGllZFN0eWxlcy5nZXQoc3R5bGVDb250YWluZXJOb2RlKTtcbiAgICAgICAgICAgIGxldCBzdHlsZUVsbTtcbiAgICAgICAgICAgIGlmICghYXBwbGllZFN0eWxlcykge1xuICAgICAgICAgICAgICAgIHJvb3RBcHBsaWVkU3R5bGVzLnNldChzdHlsZUNvbnRhaW5lck5vZGUsIChhcHBsaWVkU3R5bGVzID0gbmV3IFNldCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFwcGxpZWRTdHlsZXMuaGFzKHNjb3BlSWQpKSB7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHBsdC4kY3NzU2hpbSQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlRWxtID0gcGx0LiRjc3NTaGltJC5jcmVhdGVIb3N0U3R5bGUoaG9zdEVsbSwgc2NvcGVJZCwgc3R5bGUsICEhKGNtcE1ldGEuJGZsYWdzJCAmIDEwIC8qIG5lZWRzU2NvcGVkRW5jYXBzdWxhdGlvbiAqLykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2NvcGVJZCA9IHN0eWxlRWxtWydzLXNjJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3U2NvcGVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlSWQgPSBuZXdTY29wZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYWRkIHRoaXMgc3R5bGVJRCB0byB0aGUgYXBwbGllZFN0eWxlcyBTZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY3NzVmFyU2hpbSBtaWdodCBuZWVkIHRvIGFwcGx5IHNldmVyYWwgZGlmZmVyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzaGVldHMgZm9yIHRoZSBzYW1lIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVFbG0gPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlRWxtLmlubmVySFRNTCA9IHN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlQ29udGFpbmVyTm9kZS5pbnNlcnRCZWZvcmUoc3R5bGVFbG0sIHN0eWxlQ29udGFpbmVyTm9kZS5xdWVyeVNlbGVjdG9yKCdsaW5rJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXBwbGllZFN0eWxlcykge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWVkU3R5bGVzLmFkZChzY29wZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoICFzdHlsZUNvbnRhaW5lck5vZGUuYWRvcHRlZFN0eWxlU2hlZXRzLmluY2x1ZGVzKHN0eWxlKSkge1xuICAgICAgICAgICAgc3R5bGVDb250YWluZXJOb2RlLmFkb3B0ZWRTdHlsZVNoZWV0cyA9IFsuLi5zdHlsZUNvbnRhaW5lck5vZGUuYWRvcHRlZFN0eWxlU2hlZXRzLCBzdHlsZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNjb3BlSWQ7XG59O1xuY29uc3QgYXR0YWNoU3R5bGVzID0gKGhvc3RSZWYpID0+IHtcbiAgICBjb25zdCBjbXBNZXRhID0gaG9zdFJlZi4kY21wTWV0YSQ7XG4gICAgY29uc3QgZWxtID0gaG9zdFJlZi4kaG9zdEVsZW1lbnQkO1xuICAgIGNvbnN0IGZsYWdzID0gY21wTWV0YS4kZmxhZ3MkO1xuICAgIGNvbnN0IGVuZEF0dGFjaFN0eWxlcyA9IGNyZWF0ZVRpbWUoJ2F0dGFjaFN0eWxlcycsIGNtcE1ldGEuJHRhZ05hbWUkKTtcbiAgICBjb25zdCBzY29wZUlkID0gYWRkU3R5bGUoIHN1cHBvcnRzU2hhZG93ICYmIGVsbS5zaGFkb3dSb290ID8gZWxtLnNoYWRvd1Jvb3QgOiBlbG0uZ2V0Um9vdE5vZGUoKSwgY21wTWV0YSwgaG9zdFJlZi4kbW9kZU5hbWUkLCBlbG0pO1xuICAgIGlmICggZmxhZ3MgJiAxMCAvKiBuZWVkc1Njb3BlZEVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgLy8gb25seSByZXF1aXJlZCB3aGVuIHdlJ3JlIE5PVCB1c2luZyBuYXRpdmUgc2hhZG93IGRvbSAoc2xvdClcbiAgICAgICAgLy8gb3IgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBuYXRpdmUgc2hhZG93IGRvbVxuICAgICAgICAvLyBhbmQgdGhpcyBob3N0IGVsZW1lbnQgd2FzIE5PVCBjcmVhdGVkIHdpdGggU1NSXG4gICAgICAgIC8vIGxldCdzIHBpY2sgb3V0IHRoZSBpbm5lciBjb250ZW50IGZvciBzbG90IHByb2plY3Rpb25cbiAgICAgICAgLy8gY3JlYXRlIGEgbm9kZSB0byByZXByZXNlbnQgd2hlcmUgdGhlIG9yaWdpbmFsXG4gICAgICAgIC8vIGNvbnRlbnQgd2FzIGZpcnN0IHBsYWNlZCwgd2hpY2ggaXMgdXNlZnVsIGxhdGVyIG9uXG4gICAgICAgIC8vIERPTSBXUklURSEhXG4gICAgICAgIGVsbVsncy1zYyddID0gc2NvcGVJZDtcbiAgICAgICAgZWxtLmNsYXNzTGlzdC5hZGQoc2NvcGVJZCArICctaCcpO1xuICAgIH1cbiAgICBlbmRBdHRhY2hTdHlsZXMoKTtcbn07XG5jb25zdCBnZXRTY29wZUlkID0gKHRhZ05hbWUsIG1vZGUpID0+ICdzYy0nICsgKCB0YWdOYW1lKTtcbi8qKlxuICogRGVmYXVsdCBzdHlsZSBtb2RlIGlkXG4gKi9cbi8qKlxuICogUmV1c2FibGUgZW1wdHkgb2JqL2FycmF5XG4gKiBEb24ndCBhZGQgdmFsdWVzIHRvIHRoZXNlISFcbiAqL1xuY29uc3QgRU1QVFlfT0JKID0ge307XG5jb25zdCBpc0RlZiA9ICh2KSA9PiB2ICE9IG51bGw7XG5jb25zdCBpc0NvbXBsZXhUeXBlID0gKG8pID0+IHtcbiAgICAvLyBodHRwczovL2pzcGVyZi5jb20vdHlwZW9mLWZuLW9iamVjdC81XG4gICAgbyA9IHR5cGVvZiBvO1xuICAgIHJldHVybiBvID09PSAnb2JqZWN0JyB8fCBvID09PSAnZnVuY3Rpb24nO1xufTtcbmNvbnN0IGdldER5bmFtaWNJbXBvcnRGdW5jdGlvbiA9IChuYW1lc3BhY2UpID0+IGBfX3NjX2ltcG9ydF8ke25hbWVzcGFjZS5yZXBsYWNlKC9cXHN8LS9nLCAnXycpfWA7XG4vKipcbiAqIFByb2R1Y3Rpb24gaCgpIGZ1bmN0aW9uIGJhc2VkIG9uIFByZWFjdCBieVxuICogSmFzb24gTWlsbGVyIChAZGV2ZWxvcGl0KVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogTW9kaWZpZWQgZm9yIFN0ZW5jaWwncyBjb21waWxlciBhbmQgdmRvbVxuICovXG4vLyBjb25zdCBzdGFjazogYW55W10gPSBbXTtcbi8vIGV4cG9ydCBmdW5jdGlvbiBoKG5vZGVOYW1lOiBzdHJpbmcgfCBkLkZ1bmN0aW9uYWxDb21wb25lbnQsIHZub2RlRGF0YTogZC5Qcm9wc1R5cGUsIGNoaWxkPzogZC5DaGlsZFR5cGUpOiBkLlZOb2RlO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGgobm9kZU5hbWU6IHN0cmluZyB8IGQuRnVuY3Rpb25hbENvbXBvbmVudCwgdm5vZGVEYXRhOiBkLlByb3BzVHlwZSwgLi4uY2hpbGRyZW46IGQuQ2hpbGRUeXBlW10pOiBkLlZOb2RlO1xuY29uc3QgaCA9IChub2RlTmFtZSwgdm5vZGVEYXRhLCAuLi5jaGlsZHJlbikgPT4ge1xuICAgIGxldCBjaGlsZCA9IG51bGw7XG4gICAgbGV0IHNsb3ROYW1lID0gbnVsbDtcbiAgICBsZXQgc2ltcGxlID0gZmFsc2U7XG4gICAgbGV0IGxhc3RTaW1wbGUgPSBmYWxzZTtcbiAgICBsZXQgdk5vZGVDaGlsZHJlbiA9IFtdO1xuICAgIGNvbnN0IHdhbGsgPSAoYykgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkID0gY1tpXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xuICAgICAgICAgICAgICAgIHdhbGsoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQgIT0gbnVsbCAmJiB0eXBlb2YgY2hpbGQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIGlmICgoc2ltcGxlID0gdHlwZW9mIG5vZGVOYW1lICE9PSAnZnVuY3Rpb24nICYmICFpc0NvbXBsZXhUeXBlKGNoaWxkKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBTdHJpbmcoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2ltcGxlICYmIGxhc3RTaW1wbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHByZXZpb3VzIGNoaWxkIHdhcyBzaW1wbGUgKHN0cmluZyksIHdlIG1lcmdlIGJvdGhcbiAgICAgICAgICAgICAgICAgICAgdk5vZGVDaGlsZHJlblt2Tm9kZUNoaWxkcmVuLmxlbmd0aCAtIDFdLiR0ZXh0JCArPSBjaGlsZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBhIG5ldyB2Tm9kZSwgaWYgaXQncyB0ZXh0LCB3ZSBjcmVhdGUgYSB0ZXh0IHZOb2RlXG4gICAgICAgICAgICAgICAgICAgIHZOb2RlQ2hpbGRyZW4ucHVzaChzaW1wbGUgPyBuZXdWTm9kZShudWxsLCBjaGlsZCkgOiBjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RTaW1wbGUgPSBzaW1wbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHdhbGsoY2hpbGRyZW4pO1xuICAgIGlmICh2bm9kZURhdGEpIHtcbiAgICAgICAgaWYgKCB2bm9kZURhdGEubmFtZSkge1xuICAgICAgICAgICAgc2xvdE5hbWUgPSB2bm9kZURhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBjbGFzc0RhdGEgPSB2bm9kZURhdGEuY2xhc3NOYW1lIHx8IHZub2RlRGF0YS5jbGFzcztcbiAgICAgICAgICAgIGlmIChjbGFzc0RhdGEpIHtcbiAgICAgICAgICAgICAgICB2bm9kZURhdGEuY2xhc3MgPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY2xhc3NEYXRhICE9PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBjbGFzc0RhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIDogT2JqZWN0LmtleXMoY2xhc3NEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoayA9PiBjbGFzc0RhdGFba10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2bm9kZSA9IG5ld1ZOb2RlKG5vZGVOYW1lLCBudWxsKTtcbiAgICB2bm9kZS4kYXR0cnMkID0gdm5vZGVEYXRhO1xuICAgIGlmICh2Tm9kZUNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdm5vZGUuJGNoaWxkcmVuJCA9IHZOb2RlQ2hpbGRyZW47XG4gICAgfVxuICAgIHtcbiAgICAgICAgdm5vZGUuJG5hbWUkID0gc2xvdE5hbWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn07XG5jb25zdCBuZXdWTm9kZSA9ICh0YWcsIHRleHQpID0+IHtcbiAgICBjb25zdCB2bm9kZSA9IHtcbiAgICAgICAgJGZsYWdzJDogMCxcbiAgICAgICAgJHRhZyQ6IHRhZyxcbiAgICAgICAgJHRleHQkOiB0ZXh0LFxuICAgICAgICAkZWxtJDogbnVsbCxcbiAgICAgICAgJGNoaWxkcmVuJDogbnVsbCxcbiAgICB9O1xuICAgIHtcbiAgICAgICAgdm5vZGUuJGF0dHJzJCA9IG51bGw7XG4gICAgfVxuICAgIHtcbiAgICAgICAgdm5vZGUuJG5hbWUkID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xufTtcbmNvbnN0IEhvc3QgPSB7fTtcbmNvbnN0IGlzSG9zdCA9IChub2RlKSA9PiBub2RlICYmIG5vZGUuJHRhZyQgPT09IEhvc3Q7XG4vKipcbiAqIFByb2R1Y3Rpb24gc2V0QWNjZXNzb3IoKSBmdW5jdGlvbiBiYXNlZCBvbiBQcmVhY3QgYnlcbiAqIEphc29uIE1pbGxlciAoQGRldmVsb3BpdClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2RldmVsb3BpdC9wcmVhY3QvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIE1vZGlmaWVkIGZvciBTdGVuY2lsJ3MgY29tcGlsZXIgYW5kIHZkb21cbiAqL1xuY29uc3Qgc2V0QWNjZXNzb3IgPSAoZWxtLCBtZW1iZXJOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIGlzU3ZnLCBmbGFncykgPT4ge1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgbGV0IGlzUHJvcCA9IGlzTWVtYmVySW5FbGVtZW50KGVsbSwgbWVtYmVyTmFtZSk7XG4gICAgICAgIGxldCBsbiA9IG1lbWJlck5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCBtZW1iZXJOYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICBjb25zdCBjbGFzc0xpc3QgPSBlbG0uY2xhc3NMaXN0O1xuICAgICAgICAgICAgY29uc3Qgb2xkQ2xhc3NlcyA9IHBhcnNlQ2xhc3NMaXN0KG9sZFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NsYXNzZXMgPSBwYXJzZUNsYXNzTGlzdChuZXdWYWx1ZSk7XG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKC4uLm9sZENsYXNzZXMuZmlsdGVyKGMgPT4gYyAmJiAhbmV3Q2xhc3Nlcy5pbmNsdWRlcyhjKSkpO1xuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCguLi5uZXdDbGFzc2VzLmZpbHRlcihjID0+IGMgJiYgIW9sZENsYXNzZXMuaW5jbHVkZXMoYykpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggbWVtYmVyTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHN0eWxlIGF0dHJpYnV0ZSwgY3NzIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1ZhbHVlIHx8IG5ld1ZhbHVlW3Byb3BdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJvcC5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlW3Byb3BdID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9sZFZhbHVlIHx8IG5ld1ZhbHVlW3Byb3BdICE9PSBvbGRWYWx1ZVtwcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHByb3AuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxtLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIG5ld1ZhbHVlW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbS5zdHlsZVtwcm9wXSA9IG5ld1ZhbHVlW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBtZW1iZXJOYW1lID09PSAncmVmJykge1xuICAgICAgICAgICAgLy8gbWluaWZpZXIgd2lsbCBjbGVhbiB0aGlzIHVwXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZShlbG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCAoICFpc1Byb3AgKSAmJiBtZW1iZXJOYW1lWzBdID09PSAnbycgJiYgbWVtYmVyTmFtZVsxXSA9PT0gJ24nKSB7XG4gICAgICAgICAgICAvLyBFdmVudCBIYW5kbGVyc1xuICAgICAgICAgICAgLy8gc28gaWYgdGhlIG1lbWJlciBuYW1lIHN0YXJ0cyB3aXRoIFwib25cIiBhbmQgdGhlIDNyZCBjaGFyYWN0ZXJzIGlzXG4gICAgICAgICAgICAvLyBhIGNhcGl0YWwgbGV0dGVyLCBhbmQgaXQncyBub3QgYWxyZWFkeSBhIG1lbWJlciBvbiB0aGUgZWxlbWVudCxcbiAgICAgICAgICAgIC8vIHRoZW4gd2UncmUgYXNzdW1pbmcgaXQncyBhbiBldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgaWYgKG1lbWJlck5hbWVbMl0gPT09ICctJykge1xuICAgICAgICAgICAgICAgIC8vIG9uLSBwcmVmaXhlZCBldmVudHNcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgdG8gYmUgZXhwbGljaXQgYWJvdXQgdGhlIGRvbSBldmVudCB0byBsaXN0ZW4gd2l0aG91dCBhbnkgbWFnaWNcbiAgICAgICAgICAgICAgICAvLyB1bmRlciB0aGUgaG9vZDpcbiAgICAgICAgICAgICAgICAvLyA8bXktY21wIG9uLWNsaWNrPiAvLyBsaXN0ZW5zIGZvciBcImNsaWNrXCJcbiAgICAgICAgICAgICAgICAvLyA8bXktY21wIG9uLUNsaWNrPiAvLyBsaXN0ZW5zIGZvciBcIkNsaWNrXCJcbiAgICAgICAgICAgICAgICAvLyA8bXktY21wIG9uLWlvbkNoYW5nZT4gLy8gbGlzdGVucyBmb3IgXCJpb25DaGFuZ2VcIlxuICAgICAgICAgICAgICAgIC8vIDxteS1jbXAgb24tRVZFTlRTPiAvLyBsaXN0ZW5zIGZvciBcIkVWRU5UU1wiXG4gICAgICAgICAgICAgICAgbWVtYmVyTmFtZSA9IG1lbWJlck5hbWUuc2xpY2UoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc01lbWJlckluRWxlbWVudCh3aW4sIGxuKSkge1xuICAgICAgICAgICAgICAgIC8vIHN0YW5kYXJkIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gdGhlIEpTWCBhdHRyaWJ1dGUgY291bGQgaGF2ZSBiZWVuIFwib25Nb3VzZU92ZXJcIiBhbmQgdGhlXG4gICAgICAgICAgICAgICAgLy8gbWVtYmVyIG5hbWUgXCJvbm1vdXNlb3ZlclwiIGlzIG9uIHRoZSB3aW5kb3cncyBwcm90b3R5cGVcbiAgICAgICAgICAgICAgICAvLyBzbyBsZXQncyBhZGQgdGhlIGxpc3RlbmVyIFwibW91c2VvdmVyXCIsIHdoaWNoIGlzIGFsbCBsb3dlcmNhc2VkXG4gICAgICAgICAgICAgICAgbWVtYmVyTmFtZSA9IGxuLnNsaWNlKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY3VzdG9tIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gdGhlIEpTWCBhdHRyaWJ1dGUgY291bGQgaGF2ZSBiZWVuIFwib25NeUN1c3RvbUV2ZW50XCJcbiAgICAgICAgICAgICAgICAvLyBzbyBsZXQncyB0cmltIG9mZiB0aGUgXCJvblwiIHByZWZpeCBhbmQgbG93ZXJjYXNlIHRoZSBmaXJzdCBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsaXN0ZW5lciBcIm15Q3VzdG9tRXZlbnRcIlxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdCBmb3IgdGhlIGZpcnN0IGNoYXJhY3Rlciwgd2Uga2VlcCB0aGUgZXZlbnQgbmFtZSBjYXNlXG4gICAgICAgICAgICAgICAgbWVtYmVyTmFtZSA9IGxuWzJdICsgbWVtYmVyTmFtZS5zbGljZSgzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHBsdC5yZWwoZWxtLCBtZW1iZXJOYW1lLCBvbGRWYWx1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGx0LmFlbChlbG0sIG1lbWJlck5hbWUsIG5ld1ZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTZXQgcHJvcGVydHkgaWYgaXQgZXhpc3RzIGFuZCBpdCdzIG5vdCBhIFNWR1xuICAgICAgICAgICAgY29uc3QgaXNDb21wbGV4ID0gaXNDb21wbGV4VHlwZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoKGlzUHJvcCB8fCAoaXNDb21wbGV4ICYmIG5ld1ZhbHVlICE9PSBudWxsKSkgJiYgIWlzU3ZnKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbG0udGFnTmFtZS5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IG5ld1ZhbHVlID09IG51bGwgPyAnJyA6IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgU2FmYXJpLCBtb3ZpbmcgdGhlIDxpbnB1dD4gY2FyZXQgd2hlbiByZS1hc3NpZ25pbmcgdGhlIHNhbWUgdmFsdWVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyTmFtZSA9PT0gJ2xpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNQcm9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB0cmlwbGUtZXF1YWxzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvbGRWYWx1ZSA9PSBudWxsIHx8IGVsbVttZW1iZXJOYW1lXSAhPSBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtW21lbWJlck5hbWVdID0gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbVttZW1iZXJOYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShtZW1iZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoIWlzUHJvcCB8fCBmbGFncyAmIDQgLyogaXNIb3N0ICovIHx8IGlzU3ZnKSAmJiAhaXNDb21wbGV4KSB7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSA9PT0gdHJ1ZSA/ICcnIDogbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKG1lbWJlck5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgcGFyc2VDbGFzc0xpc3RSZWdleCA9IC9cXHMvO1xuY29uc3QgcGFyc2VDbGFzc0xpc3QgPSAodmFsdWUpID0+ICghdmFsdWUgPyBbXSA6IHZhbHVlLnNwbGl0KHBhcnNlQ2xhc3NMaXN0UmVnZXgpKTtcbmNvbnN0IHVwZGF0ZUVsZW1lbnQgPSAob2xkVm5vZGUsIG5ld1Zub2RlLCBpc1N2Z01vZGUsIG1lbWJlck5hbWUpID0+IHtcbiAgICAvLyBpZiB0aGUgZWxlbWVudCBwYXNzZWQgaW4gaXMgYSBzaGFkb3cgcm9vdCwgd2hpY2ggaXMgYSBkb2N1bWVudCBmcmFnbWVudFxuICAgIC8vIHRoZW4gd2Ugd2FudCB0byBiZSBhZGRpbmcgYXR0cnMvcHJvcHMgdG8gdGhlIHNoYWRvdyByb290J3MgXCJob3N0XCIgZWxlbWVudFxuICAgIC8vIGlmIGl0J3Mgbm90IGEgc2hhZG93IHJvb3QsIHRoZW4gd2UgYWRkIGF0dHJzL3Byb3BzIHRvIHRoZSBzYW1lIGVsZW1lbnRcbiAgICBjb25zdCBlbG0gPSBuZXdWbm9kZS4kZWxtJC5ub2RlVHlwZSA9PT0gMTEgLyogRG9jdW1lbnRGcmFnbWVudCAqLyAmJiBuZXdWbm9kZS4kZWxtJC5ob3N0ID8gbmV3Vm5vZGUuJGVsbSQuaG9zdCA6IG5ld1Zub2RlLiRlbG0kO1xuICAgIGNvbnN0IG9sZFZub2RlQXR0cnMgPSAob2xkVm5vZGUgJiYgb2xkVm5vZGUuJGF0dHJzJCkgfHwgRU1QVFlfT0JKO1xuICAgIGNvbnN0IG5ld1Zub2RlQXR0cnMgPSBuZXdWbm9kZS4kYXR0cnMkIHx8IEVNUFRZX09CSjtcbiAgICB7XG4gICAgICAgIC8vIHJlbW92ZSBhdHRyaWJ1dGVzIG5vIGxvbmdlciBwcmVzZW50IG9uIHRoZSB2bm9kZSBieSBzZXR0aW5nIHRoZW0gdG8gdW5kZWZpbmVkXG4gICAgICAgIGZvciAobWVtYmVyTmFtZSBpbiBvbGRWbm9kZUF0dHJzKSB7XG4gICAgICAgICAgICBpZiAoIShtZW1iZXJOYW1lIGluIG5ld1Zub2RlQXR0cnMpKSB7XG4gICAgICAgICAgICAgICAgc2V0QWNjZXNzb3IoZWxtLCBtZW1iZXJOYW1lLCBvbGRWbm9kZUF0dHJzW21lbWJlck5hbWVdLCB1bmRlZmluZWQsIGlzU3ZnTW9kZSwgbmV3Vm5vZGUuJGZsYWdzJCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIG5ldyAmIHVwZGF0ZSBjaGFuZ2VkIGF0dHJpYnV0ZXNcbiAgICBmb3IgKG1lbWJlck5hbWUgaW4gbmV3Vm5vZGVBdHRycykge1xuICAgICAgICBzZXRBY2Nlc3NvcihlbG0sIG1lbWJlck5hbWUsIG9sZFZub2RlQXR0cnNbbWVtYmVyTmFtZV0sIG5ld1Zub2RlQXR0cnNbbWVtYmVyTmFtZV0sIGlzU3ZnTW9kZSwgbmV3Vm5vZGUuJGZsYWdzJCk7XG4gICAgfVxufTtcbmNvbnN0IGNyZWF0ZUVsbSA9IChvbGRQYXJlbnRWTm9kZSwgbmV3UGFyZW50Vk5vZGUsIGNoaWxkSW5kZXgsIHBhcmVudEVsbSkgPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWNvbnN0XG4gICAgbGV0IG5ld1ZOb2RlID0gbmV3UGFyZW50Vk5vZGUuJGNoaWxkcmVuJFtjaGlsZEluZGV4XTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGVsbTtcbiAgICBsZXQgY2hpbGROb2RlO1xuICAgIGxldCBvbGRWTm9kZTtcbiAgICBpZiAoICF1c2VOYXRpdmVTaGFkb3dEb20pIHtcbiAgICAgICAgLy8gcmVtZW1iZXIgZm9yIGxhdGVyIHdlIG5lZWQgdG8gY2hlY2sgdG8gcmVsb2NhdGUgbm9kZXNcbiAgICAgICAgY2hlY2tTbG90UmVsb2NhdGUgPSB0cnVlO1xuICAgICAgICBpZiAobmV3Vk5vZGUuJHRhZyQgPT09ICdzbG90Jykge1xuICAgICAgICAgICAgaWYgKHNjb3BlSWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzY29wZWQgY3NzIG5lZWRzIHRvIGFkZCBpdHMgc2NvcGVkIGlkIHRvIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgICAgIHBhcmVudEVsbS5jbGFzc0xpc3QuYWRkKHNjb3BlSWQgKyAnLXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1ZOb2RlLiRmbGFncyQgfD0gbmV3Vk5vZGUuJGNoaWxkcmVuJFxuICAgICAgICAgICAgICAgID8gLy8gc2xvdCBlbGVtZW50IGhhcyBmYWxsYmFjayBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIDIgLyogaXNTbG90RmFsbGJhY2sgKi9cbiAgICAgICAgICAgICAgICA6IC8vIHNsb3QgZWxlbWVudCBkb2VzIG5vdCBoYXZlIGZhbGxiYWNrIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgMSAvKiBpc1Nsb3RSZWZlcmVuY2UgKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCBuZXdWTm9kZS4kdGV4dCQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gY3JlYXRlIHRleHQgbm9kZVxuICAgICAgICBlbG0gPSBuZXdWTm9kZS4kZWxtJCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShuZXdWTm9kZS4kdGV4dCQpO1xuICAgIH1cbiAgICBlbHNlIGlmICggbmV3Vk5vZGUuJGZsYWdzJCAmIDEgLyogaXNTbG90UmVmZXJlbmNlICovKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIHNsb3QgcmVmZXJlbmNlIG5vZGVcbiAgICAgICAgZWxtID0gbmV3Vk5vZGUuJGVsbSQgPSAgZG9jLmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGNyZWF0ZSBlbGVtZW50XG4gICAgICAgIGVsbSA9IG5ld1ZOb2RlLiRlbG0kID0gKCBkb2MuY3JlYXRlRWxlbWVudCggbmV3Vk5vZGUuJGZsYWdzJCAmIDIgLyogaXNTbG90RmFsbGJhY2sgKi8gPyAnc2xvdC1mYicgOiBuZXdWTm9kZS4kdGFnJCkpO1xuICAgICAgICAvLyBhZGQgY3NzIGNsYXNzZXMsIGF0dHJzLCBwcm9wcywgbGlzdGVuZXJzLCBldGMuXG4gICAgICAgIHtcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnQobnVsbCwgbmV3Vk5vZGUsIGlzU3ZnTW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBpc0RlZihzY29wZUlkKSAmJiBlbG1bJ3Mtc2knXSAhPT0gc2NvcGVJZCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBzY29wZUlkIGFuZCB0aGlzIGlzIHRoZSBpbml0aWFsIHJlbmRlclxuICAgICAgICAgICAgLy8gdGhlbiBsZXQncyBhZGQgdGhlIHNjb3BlSWQgYXMgYSBjc3MgY2xhc3NcbiAgICAgICAgICAgIGVsbS5jbGFzc0xpc3QuYWRkKChlbG1bJ3Mtc2knXSA9IHNjb3BlSWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3Vk5vZGUuJGNoaWxkcmVuJCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5ld1ZOb2RlLiRjaGlsZHJlbiQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIG5vZGVcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjcmVhdGVFbG0ob2xkUGFyZW50Vk5vZGUsIG5ld1ZOb2RlLCBpLCBlbG0pO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBub2RlIGNvdWxkIGhhdmUgYmVlbiBudWxsXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgb3VyIG5ldyBub2RlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB7XG4gICAgICAgIGVsbVsncy1obiddID0gaG9zdFRhZ05hbWU7XG4gICAgICAgIGlmIChuZXdWTm9kZS4kZmxhZ3MkICYgKDIgLyogaXNTbG90RmFsbGJhY2sgKi8gfCAxIC8qIGlzU2xvdFJlZmVyZW5jZSAqLykpIHtcbiAgICAgICAgICAgIC8vIHJlbWVtYmVyIHRoZSBjb250ZW50IHJlZmVyZW5jZSBjb21tZW50XG4gICAgICAgICAgICBlbG1bJ3Mtc3InXSA9IHRydWU7XG4gICAgICAgICAgICAvLyByZW1lbWJlciB0aGUgY29udGVudCByZWZlcmVuY2UgY29tbWVudFxuICAgICAgICAgICAgZWxtWydzLWNyJ10gPSBjb250ZW50UmVmO1xuICAgICAgICAgICAgLy8gcmVtZW1iZXIgdGhlIHNsb3QgbmFtZSwgb3IgZW1wdHkgc3RyaW5nIGZvciBkZWZhdWx0IHNsb3RcbiAgICAgICAgICAgIGVsbVsncy1zbiddID0gbmV3Vk5vZGUuJG5hbWUkIHx8ICcnO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UndmUgZ290IGFuIG9sZCB2bm9kZSBmb3IgdGhpcyBzbG90XG4gICAgICAgICAgICBvbGRWTm9kZSA9IG9sZFBhcmVudFZOb2RlICYmIG9sZFBhcmVudFZOb2RlLiRjaGlsZHJlbiQgJiYgb2xkUGFyZW50Vk5vZGUuJGNoaWxkcmVuJFtjaGlsZEluZGV4XTtcbiAgICAgICAgICAgIGlmIChvbGRWTm9kZSAmJiBvbGRWTm9kZS4kdGFnJCA9PT0gbmV3Vk5vZGUuJHRhZyQgJiYgb2xkUGFyZW50Vk5vZGUuJGVsbSQpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBnb3QgYW4gb2xkIHNsb3Qgdm5vZGUgYW5kIHRoZSB3cmFwcGVyIGlzIGJlaW5nIHJlcGxhY2VkXG4gICAgICAgICAgICAgICAgLy8gc28gbGV0J3MgbW92ZSB0aGUgb2xkIHNsb3QgY29udGVudCBiYWNrIHRvIGl0J3Mgb3JpZ2luYWwgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uKG9sZFBhcmVudFZOb2RlLiRlbG0kLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsbTtcbn07XG5jb25zdCBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uID0gKHBhcmVudEVsbSwgcmVjdXJzaXZlKSA9PiB7XG4gICAgcGx0LiRmbGFncyQgfD0gMSAvKiBpc1RtcERpc2Nvbm5lY3RlZCAqLztcbiAgICBjb25zdCBvbGRTbG90Q2hpbGROb2RlcyA9IHBhcmVudEVsbS5jaGlsZE5vZGVzO1xuICAgIGZvciAobGV0IGkgPSBvbGRTbG90Q2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBvbGRTbG90Q2hpbGROb2Rlc1tpXTtcbiAgICAgICAgaWYgKGNoaWxkTm9kZVsncy1obiddICE9PSBob3N0VGFnTmFtZSAmJiBjaGlsZE5vZGVbJ3Mtb2wnXSkge1xuICAgICAgICAgICAgLy8gLy8gdGhpcyBjaGlsZCBub2RlIGluIHRoZSBvbGQgZWxlbWVudCBpcyBmcm9tIGFub3RoZXIgY29tcG9uZW50XG4gICAgICAgICAgICAvLyAvLyByZW1vdmUgdGhpcyBub2RlIGZyb20gdGhlIG9sZCBzbG90J3MgcGFyZW50XG4gICAgICAgICAgICAvLyBjaGlsZE5vZGUucmVtb3ZlKCk7XG4gICAgICAgICAgICAvLyBhbmQgcmVsb2NhdGUgaXQgYmFjayB0byBpdCdzIG9yaWdpbmFsIGxvY2F0aW9uXG4gICAgICAgICAgICBwYXJlbnRSZWZlcmVuY2VOb2RlKGNoaWxkTm9kZSkuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZShjaGlsZE5vZGUpKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb2xkIG9yaWdpbmFsIGxvY2F0aW9uIGNvbW1lbnQgZW50aXJlbHlcbiAgICAgICAgICAgIC8vIGxhdGVyIG9uIHRoZSBwYXRjaCBmdW5jdGlvbiB3aWxsIGtub3cgd2hhdCB0byBkb1xuICAgICAgICAgICAgLy8gYW5kIG1vdmUgdGhpcyB0byB0aGUgY29ycmVjdCBzcG90IGluIG5lZWQgYmVcbiAgICAgICAgICAgIGNoaWxkTm9kZVsncy1vbCddLnJlbW92ZSgpO1xuICAgICAgICAgICAgY2hpbGROb2RlWydzLW9sJ10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjaGVja1Nsb3RSZWxvY2F0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgcHV0QmFja0luT3JpZ2luYWxMb2NhdGlvbihjaGlsZE5vZGUsIHJlY3Vyc2l2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGx0LiRmbGFncyQgJj0gfjEgLyogaXNUbXBEaXNjb25uZWN0ZWQgKi87XG59O1xuY29uc3QgYWRkVm5vZGVzID0gKHBhcmVudEVsbSwgYmVmb3JlLCBwYXJlbnRWTm9kZSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSA9PiB7XG4gICAgbGV0IGNvbnRhaW5lckVsbSA9ICgoIHBhcmVudEVsbVsncy1jciddICYmIHBhcmVudEVsbVsncy1jciddLnBhcmVudE5vZGUpIHx8IHBhcmVudEVsbSk7XG4gICAgbGV0IGNoaWxkTm9kZTtcbiAgICBpZiAoIGNvbnRhaW5lckVsbS5zaGFkb3dSb290ICYmIGNvbnRhaW5lckVsbS50YWdOYW1lID09PSBob3N0VGFnTmFtZSkge1xuICAgICAgICBjb250YWluZXJFbG0gPSBjb250YWluZXJFbG0uc2hhZG93Um9vdDtcbiAgICB9XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICBpZiAodm5vZGVzW3N0YXJ0SWR4XSkge1xuICAgICAgICAgICAgY2hpbGROb2RlID0gY3JlYXRlRWxtKG51bGwsIHBhcmVudFZOb2RlLCBzdGFydElkeCwgcGFyZW50RWxtKTtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgICB2bm9kZXNbc3RhcnRJZHhdLiRlbG0kID0gY2hpbGROb2RlO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsbS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCAgcmVmZXJlbmNlTm9kZShiZWZvcmUpICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgcmVtb3ZlVm5vZGVzID0gKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgdm5vZGUsIGVsbSkgPT4ge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgICAgaWYgKCh2bm9kZSA9IHZub2Rlc1tzdGFydElkeF0pKSB7XG4gICAgICAgICAgICBlbG0gPSB2bm9kZS4kZWxtJDtcbiAgICAgICAgICAgIGNhbGxOb2RlUmVmcyh2bm9kZSk7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gd2UncmUgcmVtb3ZpbmcgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gc28gaXQncyBwb3NzaWJsZSB3ZSBuZWVkIHRvIHNob3cgc2xvdCBmYWxsYmFjayBjb250ZW50IG5vd1xuICAgICAgICAgICAgICAgIGNoZWNrU2xvdEZhbGxiYWNrVmlzaWJpbGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGVsbVsncy1vbCddKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb3JpZ2luYWwgbG9jYXRpb24gY29tbWVudFxuICAgICAgICAgICAgICAgICAgICBlbG1bJ3Mtb2wnXS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCBjaGlsZCBub2RlcyBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0J3MgYmVpbmcgcmVtb3ZlZCBhcmUgc2xvdCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uKGVsbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSB2bm9kZSdzIGVsZW1lbnQgZnJvbSB0aGUgZG9tXG4gICAgICAgICAgICBlbG0ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgdXBkYXRlQ2hpbGRyZW4gPSAocGFyZW50RWxtLCBvbGRDaCwgbmV3Vk5vZGUsIG5ld0NoKSA9PiB7XG4gICAgbGV0IG9sZFN0YXJ0SWR4ID0gMDtcbiAgICBsZXQgbmV3U3RhcnRJZHggPSAwO1xuICAgIGxldCBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIGxldCBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgbGV0IG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICBsZXQgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICBsZXQgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIGxldCBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgbGV0IG5vZGU7XG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgICAgaWYgKG9sZFN0YXJ0Vm5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVm5vZGUgbWlnaHQgaGF2ZSBiZWVuIG1vdmVkIGxlZnRcbiAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuZXdTdGFydFZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuZXdFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1NhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2gob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSk7XG4gICAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2gob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKTtcbiAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgICAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICAgICAgaWYgKCAob2xkU3RhcnRWbm9kZS4kdGFnJCA9PT0gJ3Nsb3QnIHx8IG5ld0VuZFZub2RlLiR0YWckID09PSAnc2xvdCcpKSB7XG4gICAgICAgICAgICAgICAgcHV0QmFja0luT3JpZ2luYWxMb2NhdGlvbihvbGRTdGFydFZub2RlLiRlbG0kLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGNoKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKTtcbiAgICAgICAgICAgIHBhcmVudEVsbS5pbnNlcnRCZWZvcmUob2xkU3RhcnRWbm9kZS4kZWxtJCwgb2xkRW5kVm5vZGUuJGVsbSQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgICAgICBpZiAoIChvbGRTdGFydFZub2RlLiR0YWckID09PSAnc2xvdCcgfHwgbmV3RW5kVm5vZGUuJHRhZyQgPT09ICdzbG90JykpIHtcbiAgICAgICAgICAgICAgICBwdXRCYWNrSW5PcmlnaW5hbExvY2F0aW9uKG9sZEVuZFZub2RlLiRlbG0kLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGNoKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKTtcbiAgICAgICAgICAgIHBhcmVudEVsbS5pbnNlcnRCZWZvcmUob2xkRW5kVm5vZGUuJGVsbSQsIG9sZFN0YXJ0Vm5vZGUuJGVsbSQpO1xuICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gbmV3IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBub2RlID0gY3JlYXRlRWxtKG9sZENoICYmIG9sZENoW25ld1N0YXJ0SWR4XSwgbmV3Vk5vZGUsIG5ld1N0YXJ0SWR4LCBwYXJlbnRFbG0pO1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRSZWZlcmVuY2VOb2RlKG9sZFN0YXJ0Vm5vZGUuJGVsbSQpLmluc2VydEJlZm9yZShub2RlLCByZWZlcmVuY2VOb2RlKG9sZFN0YXJ0Vm5vZGUuJGVsbSQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIG5ld0NoW25ld0VuZElkeCArIDFdID09IG51bGwgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uJGVsbSQsIG5ld1ZOb2RlLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCBuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbn07XG5jb25zdCBpc1NhbWVWbm9kZSA9ICh2bm9kZTEsIHZub2RlMikgPT4ge1xuICAgIC8vIGNvbXBhcmUgaWYgdHdvIHZub2RlIHRvIHNlZSBpZiB0aGV5J3JlIFwidGVjaG5pY2FsbHlcIiB0aGUgc2FtZVxuICAgIC8vIG5lZWQgdG8gaGF2ZSB0aGUgc2FtZSBlbGVtZW50IHRhZywgYW5kIHNhbWUga2V5IHRvIGJlIHRoZSBzYW1lXG4gICAgaWYgKHZub2RlMS4kdGFnJCA9PT0gdm5vZGUyLiR0YWckKSB7XG4gICAgICAgIGlmICggdm5vZGUxLiR0YWckID09PSAnc2xvdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB2bm9kZTEuJG5hbWUkID09PSB2bm9kZTIuJG5hbWUkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgcmVmZXJlbmNlTm9kZSA9IChub2RlKSA9PiB7XG4gICAgLy8gdGhpcyBub2RlIHdhcyByZWxvY2F0ZWQgdG8gYSBuZXcgbG9jYXRpb24gaW4gdGhlIGRvbVxuICAgIC8vIGJlY2F1c2Ugb2Ygc29tZSBvdGhlciBjb21wb25lbnQncyBzbG90XG4gICAgLy8gYnV0IHdlIHN0aWxsIGhhdmUgYW4gaHRtbCBjb21tZW50IGluIHBsYWNlIG9mIHdoZXJlXG4gICAgLy8gaXQncyBvcmlnaW5hbCBsb2NhdGlvbiB3YXMgYWNjb3JkaW5nIHRvIGl0J3Mgb3JpZ2luYWwgdmRvbVxuICAgIHJldHVybiAobm9kZSAmJiBub2RlWydzLW9sJ10pIHx8IG5vZGU7XG59O1xuY29uc3QgcGFyZW50UmVmZXJlbmNlTm9kZSA9IChub2RlKSA9PiAobm9kZVsncy1vbCddID8gbm9kZVsncy1vbCddIDogbm9kZSkucGFyZW50Tm9kZTtcbmNvbnN0IHBhdGNoID0gKG9sZFZOb2RlLCBuZXdWTm9kZSkgPT4ge1xuICAgIGNvbnN0IGVsbSA9IChuZXdWTm9kZS4kZWxtJCA9IG9sZFZOb2RlLiRlbG0kKTtcbiAgICBjb25zdCBvbGRDaGlsZHJlbiA9IG9sZFZOb2RlLiRjaGlsZHJlbiQ7XG4gICAgY29uc3QgbmV3Q2hpbGRyZW4gPSBuZXdWTm9kZS4kY2hpbGRyZW4kO1xuICAgIGNvbnN0IHRhZyA9IG5ld1ZOb2RlLiR0YWckO1xuICAgIGNvbnN0IHRleHQgPSBuZXdWTm9kZS4kdGV4dCQ7XG4gICAgbGV0IGRlZmF1bHRIb2xkZXI7XG4gICAgaWYgKCB0ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIC8vIGVsZW1lbnQgbm9kZVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIHRhZyA9PT0gJ3Nsb3QnKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCByZW5kZXIgb2YgYW4gZWxlbWVudCBPUiBpdCdzIGFuIHVwZGF0ZVxuICAgICAgICAgICAgICAgIC8vIEFORCB3ZSBhbHJlYWR5IGtub3cgaXQncyBwb3NzaWJsZSBpdCBjb3VsZCBoYXZlIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHVwZGF0ZXMgdGhlIGVsZW1lbnQncyBjc3MgY2xhc3NlcywgYXR0cnMsIHByb3BzLCBsaXN0ZW5lcnMsIGV0Yy5cbiAgICAgICAgICAgICAgICB1cGRhdGVFbGVtZW50KG9sZFZOb2RlLCBuZXdWTm9kZSwgaXNTdmdNb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIG9sZENoaWxkcmVuICE9PSBudWxsICYmIG5ld0NoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb29rcyBsaWtlIHRoZXJlJ3MgY2hpbGQgdm5vZGVzIGZvciBib3RoIHRoZSBvbGQgYW5kIG5ldyB2bm9kZXNcbiAgICAgICAgICAgIHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2hpbGRyZW4sIG5ld1ZOb2RlLCBuZXdDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmV3Q2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vIG9sZCBjaGlsZCB2bm9kZXMsIGJ1dCB0aGVyZSBhcmUgbmV3IGNoaWxkIHZub2RlcyB0byBhZGRcbiAgICAgICAgICAgIGlmICggb2xkVk5vZGUuJHRleHQkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZCB2bm9kZSB3YXMgdGV4dCwgc28gYmUgc3VyZSB0byBjbGVhciBpdCBvdXRcbiAgICAgICAgICAgICAgICBlbG0udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFkZCB0aGUgbmV3IHZub2RlIGNoaWxkcmVuXG4gICAgICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBuZXdWTm9kZSwgbmV3Q2hpbGRyZW4sIDAsIG5ld0NoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCBvbGRDaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm8gbmV3IGNoaWxkIHZub2RlcywgYnV0IHRoZXJlIGFyZSBvbGQgY2hpbGQgdm5vZGVzIHRvIHJlbW92ZVxuICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoaWxkcmVuLCAwLCBvbGRDaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICggKGRlZmF1bHRIb2xkZXIgPSBlbG1bJ3MtY3InXSkpIHtcbiAgICAgICAgLy8gdGhpcyBlbGVtZW50IGhhcyBzbG90dGVkIGNvbnRlbnRcbiAgICAgICAgZGVmYXVsdEhvbGRlci5wYXJlbnROb2RlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9XG4gICAgZWxzZSBpZiAoIG9sZFZOb2RlLiR0ZXh0JCAhPT0gdGV4dCkge1xuICAgICAgICAvLyB1cGRhdGUgdGhlIHRleHQgY29udGVudCBmb3IgdGhlIHRleHQgb25seSB2bm9kZVxuICAgICAgICAvLyBhbmQgYWxzbyBvbmx5IGlmIHRoZSB0ZXh0IGlzIGRpZmZlcmVudCB0aGFuIGJlZm9yZVxuICAgICAgICBlbG0uZGF0YSA9IHRleHQ7XG4gICAgfVxufTtcbmNvbnN0IHVwZGF0ZUZhbGxiYWNrU2xvdFZpc2liaWxpdHkgPSAoZWxtKSA9PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBwcmVmZXItY29uc3RcbiAgICBsZXQgY2hpbGROb2RlcyA9IGVsbS5jaGlsZE5vZGVzO1xuICAgIGxldCBjaGlsZE5vZGU7XG4gICAgbGV0IGk7XG4gICAgbGV0IGlsZW47XG4gICAgbGV0IGo7XG4gICAgbGV0IHNsb3ROYW1lQXR0cjtcbiAgICBsZXQgbm9kZVR5cGU7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZXNbaV07XG4gICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEgLyogRWxlbWVudE5vZGUgKi8pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGVbJ3Mtc3InXSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBzbG90IGZhbGxiYWNrIG5vZGVcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHNsb3QgbmFtZSBmb3IgdGhpcyBzbG90IHJlZmVyZW5jZSBub2RlXG4gICAgICAgICAgICAgICAgc2xvdE5hbWVBdHRyID0gY2hpbGROb2RlWydzLXNuJ107XG4gICAgICAgICAgICAgICAgLy8gYnkgZGVmYXVsdCBhbHdheXMgc2hvdyBhIGZhbGxiYWNrIHNsb3Qgbm9kZVxuICAgICAgICAgICAgICAgIC8vIHRoZW4gaGlkZSBpdCBpZiB0aGVyZSBhcmUgb3RoZXIgc2xvdHMgaW4gdGhlIGxpZ2h0IGRvbVxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgaWxlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2pdWydzLWhuJ10gIT09IGNoaWxkTm9kZVsncy1obiddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHNpYmxpbmcgbm9kZSBpcyBmcm9tIGEgZGlmZmVyZW50IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVR5cGUgPSBjaGlsZE5vZGVzW2pdLm5vZGVUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3ROYW1lQXR0ciAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgbmFtZWQgZmFsbGJhY2sgc2xvdCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVUeXBlID09PSAxIC8qIEVsZW1lbnROb2RlICovICYmIHNsb3ROYW1lQXR0ciA9PT0gY2hpbGROb2Rlc1tqXS5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGRlZmF1bHQgZmFsbGJhY2sgc2xvdCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGVsZW1lbnQgb3IgdGV4dCBub2RlICh3aXRoIGNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIGhpZGUgdGhlIGRlZmF1bHQgZmFsbGJhY2sgc2xvdCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVUeXBlID09PSAxIC8qIEVsZW1lbnROb2RlICovIHx8IChub2RlVHlwZSA9PT0gMyAvKiBUZXh0Tm9kZSAqLyAmJiBjaGlsZE5vZGVzW2pdLnRleHRDb250ZW50LnRyaW0oKSAhPT0gJycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBrZWVwIGRyaWxsaW5nIGRvd25cbiAgICAgICAgICAgIHVwZGF0ZUZhbGxiYWNrU2xvdFZpc2liaWxpdHkoY2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCByZWxvY2F0ZU5vZGVzID0gW107XG5jb25zdCByZWxvY2F0ZVNsb3RDb250ZW50ID0gKGVsbSkgPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogcHJlZmVyLWNvbnN0XG4gICAgbGV0IGNoaWxkTm9kZTtcbiAgICBsZXQgbm9kZTtcbiAgICBsZXQgaG9zdENvbnRlbnROb2RlcztcbiAgICBsZXQgc2xvdE5hbWVBdHRyO1xuICAgIGxldCByZWxvY2F0ZU5vZGVEYXRhO1xuICAgIGxldCBqO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgY2hpbGROb2RlcyA9IGVsbS5jaGlsZE5vZGVzO1xuICAgIGxldCBpbGVuID0gY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgZm9yICg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgaWYgKGNoaWxkTm9kZVsncy1zciddICYmIChub2RlID0gY2hpbGROb2RlWydzLWNyJ10pKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBnb3QgdGhlIGNvbnRlbnQgcmVmZXJlbmNlIGNvbW1lbnQgbm9kZVxuICAgICAgICAgICAgLy8gdGhlbiB3ZSBnb3QgaXQncyBwYXJlbnQsIHdoaWNoIGlzIHdoZXJlIGFsbCB0aGUgaG9zdCBjb250ZW50IGlzIGluIG5vd1xuICAgICAgICAgICAgaG9zdENvbnRlbnROb2RlcyA9IG5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgc2xvdE5hbWVBdHRyID0gY2hpbGROb2RlWydzLXNuJ107XG4gICAgICAgICAgICBmb3IgKGogPSBob3N0Q29udGVudE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGhvc3RDb250ZW50Tm9kZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlWydzLWNuJ10gJiYgIW5vZGVbJ3MtbnInXSAmJiBub2RlWydzLWhuJ10gIT09IGNoaWxkTm9kZVsncy1obiddKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCdzIGRvIHNvbWUgcmVsb2NhdGluZyB0byBpdHMgbmV3IGhvbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IG5ldmVyIHJlbG9jYXRlIGEgY29udGVudCByZWZlcmVuY2Ugbm9kZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGlzIHN1cHBvc2UgdG8gYWx3YXlzIHJlcHJlc2VudCB0aGUgb3JpZ2luYWwgY29udGVudCBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb2RlTG9jYXRlZEluU2xvdChub2RlLCBzbG90TmFtZUF0dHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHdlJ3ZlIGFscmVhZHkgZGVjaWRlZCB0byByZWxvY2F0ZSB0aGlzIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZURhdGEgPSByZWxvY2F0ZU5vZGVzLmZpbmQociA9PiByLiRub2RlVG9SZWxvY2F0ZSQgPT09IG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFkZSBzb21lIGNoYW5nZXMgdG8gc2xvdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCdzIG1ha2Ugc3VyZSB3ZSBhbHNvIGRvdWJsZSBjaGVja1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsbGJhY2tzIGFyZSBjb3JyZWN0bHkgaGlkZGVuIG9yIHNob3duXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsncy1zbiddID0gbm9kZVsncy1zbiddIHx8IHNsb3ROYW1lQXR0cjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWxvY2F0ZU5vZGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNseSB3ZSBuZXZlciBmb3VuZCBhIHNsb3QgaG9tZSBmb3IgdGhpcyBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHR1cm5zIG91dCB3ZSBkaWQsIHNvIGxldCdzIHJlbWVtYmVyIGl0IG5vd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZURhdGEuJHNsb3RSZWZOb2RlJCA9IGNoaWxkTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0byBvdXIgbGlzdCBvZiBub2RlcyB0byByZWxvY2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzbG90UmVmTm9kZSQ6IGNoaWxkTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5vZGVUb1JlbG9jYXRlJDogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlWydzLXNyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxvY2F0ZU5vZGVzLm1hcChyZWxvY2F0ZU5vZGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb2RlTG9jYXRlZEluU2xvdChyZWxvY2F0ZU5vZGUuJG5vZGVUb1JlbG9jYXRlJCwgbm9kZVsncy1zbiddKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsb2NhdGVOb2RlRGF0YSA9IHJlbG9jYXRlTm9kZXMuZmluZChyID0+IHIuJG5vZGVUb1JlbG9jYXRlJCA9PT0gbm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsb2NhdGVOb2RlRGF0YSAmJiAhcmVsb2NhdGVOb2RlLiRzbG90UmVmTm9kZSQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxvY2F0ZU5vZGUuJHNsb3RSZWZOb2RlJCA9IHJlbG9jYXRlTm9kZURhdGEuJHNsb3RSZWZOb2RlJDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFyZWxvY2F0ZU5vZGVzLnNvbWUociA9PiByLiRub2RlVG9SZWxvY2F0ZSQgPT09IG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyBmYXIgdGhpcyBlbGVtZW50IGRvZXMgbm90IGhhdmUgYSBzbG90IGhvbWUsIG5vdCBzZXR0aW5nIHNsb3RSZWZOb2RlIG9uIHB1cnBvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIG5ldmVyIGZpbmQgYSBob21lIGZvciB0aGlzIGVsZW1lbnQgdGhlbiB3ZSdsbCBuZWVkIHRvIGhpZGUgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbG9jYXRlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5vZGVUb1JlbG9jYXRlJDogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEgLyogRWxlbWVudE5vZGUgKi8pIHtcbiAgICAgICAgICAgIHJlbG9jYXRlU2xvdENvbnRlbnQoY2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBpc05vZGVMb2NhdGVkSW5TbG90ID0gKG5vZGVUb1JlbG9jYXRlLCBzbG90TmFtZUF0dHIpID0+IHtcbiAgICBpZiAobm9kZVRvUmVsb2NhdGUubm9kZVR5cGUgPT09IDEgLyogRWxlbWVudE5vZGUgKi8pIHtcbiAgICAgICAgaWYgKG5vZGVUb1JlbG9jYXRlLmdldEF0dHJpYnV0ZSgnc2xvdCcpID09PSBudWxsICYmIHNsb3ROYW1lQXR0ciA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlVG9SZWxvY2F0ZS5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSA9PT0gc2xvdE5hbWVBdHRyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlVG9SZWxvY2F0ZVsncy1zbiddID09PSBzbG90TmFtZUF0dHIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzbG90TmFtZUF0dHIgPT09ICcnO1xufTtcbmNvbnN0IGNhbGxOb2RlUmVmcyA9ICh2Tm9kZSkgPT4ge1xuICAgIHtcbiAgICAgICAgdk5vZGUuJGF0dHJzJCAmJiB2Tm9kZS4kYXR0cnMkLnJlZiAmJiB2Tm9kZS4kYXR0cnMkLnJlZihudWxsKTtcbiAgICAgICAgdk5vZGUuJGNoaWxkcmVuJCAmJiB2Tm9kZS4kY2hpbGRyZW4kLm1hcChjYWxsTm9kZVJlZnMpO1xuICAgIH1cbn07XG5jb25zdCByZW5kZXJWZG9tID0gKGhvc3RSZWYsIHJlbmRlckZuUmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IGhvc3RFbG0gPSBob3N0UmVmLiRob3N0RWxlbWVudCQ7XG4gICAgY29uc3QgY21wTWV0YSA9IGhvc3RSZWYuJGNtcE1ldGEkO1xuICAgIGNvbnN0IG9sZFZOb2RlID0gaG9zdFJlZi4kdm5vZGUkIHx8IG5ld1ZOb2RlKG51bGwsIG51bGwpO1xuICAgIGNvbnN0IHJvb3RWbm9kZSA9IGlzSG9zdChyZW5kZXJGblJlc3VsdHMpID8gcmVuZGVyRm5SZXN1bHRzIDogaChudWxsLCBudWxsLCByZW5kZXJGblJlc3VsdHMpO1xuICAgIGhvc3RUYWdOYW1lID0gaG9zdEVsbS50YWdOYW1lO1xuICAgIGlmICggY21wTWV0YS4kYXR0cnNUb1JlZmxlY3QkKSB7XG4gICAgICAgIHJvb3RWbm9kZS4kYXR0cnMkID0gcm9vdFZub2RlLiRhdHRycyQgfHwge307XG4gICAgICAgIGNtcE1ldGEuJGF0dHJzVG9SZWZsZWN0JC5tYXAoKFtwcm9wTmFtZSwgYXR0cmlidXRlXSkgPT4gKHJvb3RWbm9kZS4kYXR0cnMkW2F0dHJpYnV0ZV0gPSBob3N0RWxtW3Byb3BOYW1lXSkpO1xuICAgIH1cbiAgICByb290Vm5vZGUuJHRhZyQgPSBudWxsO1xuICAgIHJvb3RWbm9kZS4kZmxhZ3MkIHw9IDQgLyogaXNIb3N0ICovO1xuICAgIGhvc3RSZWYuJHZub2RlJCA9IHJvb3RWbm9kZTtcbiAgICByb290Vm5vZGUuJGVsbSQgPSBvbGRWTm9kZS4kZWxtJCA9ICggaG9zdEVsbS5zaGFkb3dSb290IHx8IGhvc3RFbG0gKTtcbiAgICB7XG4gICAgICAgIHNjb3BlSWQgPSBob3N0RWxtWydzLXNjJ107XG4gICAgfVxuICAgIHtcbiAgICAgICAgY29udGVudFJlZiA9IGhvc3RFbG1bJ3MtY3InXTtcbiAgICAgICAgdXNlTmF0aXZlU2hhZG93RG9tID0gc3VwcG9ydHNTaGFkb3cgJiYgKGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogc2hhZG93RG9tRW5jYXBzdWxhdGlvbiAqLykgIT09IDA7XG4gICAgICAgIC8vIGFsd2F5cyByZXNldFxuICAgICAgICBjaGVja1Nsb3RGYWxsYmFja1Zpc2liaWxpdHkgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gc3luY2hyb25vdXMgcGF0Y2hcbiAgICBwYXRjaChvbGRWTm9kZSwgcm9vdFZub2RlKTtcbiAgICB7XG4gICAgICAgIC8vIHdoaWxlIHdlJ3JlIG1vdmluZyBub2RlcyBhcm91bmQgZXhpc3Rpbmcgbm9kZXMsIHRlbXBvcmFyaWx5IGRpc2FibGVcbiAgICAgICAgLy8gdGhlIGRpc2Nvbm5lY3RDYWxsYmFjayBmcm9tIHdvcmtpbmdcbiAgICAgICAgcGx0LiRmbGFncyQgfD0gMSAvKiBpc1RtcERpc2Nvbm5lY3RlZCAqLztcbiAgICAgICAgaWYgKGNoZWNrU2xvdFJlbG9jYXRlKSB7XG4gICAgICAgICAgICByZWxvY2F0ZVNsb3RDb250ZW50KHJvb3RWbm9kZS4kZWxtJCk7XG4gICAgICAgICAgICBsZXQgcmVsb2NhdGVEYXRhO1xuICAgICAgICAgICAgbGV0IG5vZGVUb1JlbG9jYXRlO1xuICAgICAgICAgICAgbGV0IG9yZ0xvY2F0aW9uTm9kZTtcbiAgICAgICAgICAgIGxldCBwYXJlbnROb2RlUmVmO1xuICAgICAgICAgICAgbGV0IGluc2VydEJlZm9yZU5vZGU7XG4gICAgICAgICAgICBsZXQgcmVmTm9kZTtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgcmVsb2NhdGVOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlbG9jYXRlRGF0YSA9IHJlbG9jYXRlTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGUgPSByZWxvY2F0ZURhdGEuJG5vZGVUb1JlbG9jYXRlJDtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGVUb1JlbG9jYXRlWydzLW9sJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGEgcmVmZXJlbmNlIG5vZGUgbWFya2luZyB0aGlzIG5vZGUncyBvcmlnaW5hbCBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZSBmb3IgbGF0ZXIgbG9va3Vwc1xuICAgICAgICAgICAgICAgICAgICBvcmdMb2NhdGlvbk5vZGUgPSAgZG9jLmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlWydzLW5yJ10gPSBub2RlVG9SZWxvY2F0ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoKG5vZGVUb1JlbG9jYXRlWydzLW9sJ10gPSBvcmdMb2NhdGlvbk5vZGUpLCBub2RlVG9SZWxvY2F0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlbG9jYXRlTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZWxvY2F0ZURhdGEgPSByZWxvY2F0ZU5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIG5vZGVUb1JlbG9jYXRlID0gcmVsb2NhdGVEYXRhLiRub2RlVG9SZWxvY2F0ZSQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlbG9jYXRlRGF0YS4kc2xvdFJlZk5vZGUkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgd2UncmUganVzdCBnb2luZyB0byBpbnNlcnQgaXQgZGlyZWN0bHlcbiAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHNsb3QgcmVmZXJlbmNlIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZVJlZiA9IHJlbG9jYXRlRGF0YS4kc2xvdFJlZk5vZGUkLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZU5vZGUgPSByZWxvY2F0ZURhdGEuJHNsb3RSZWZOb2RlJC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgb3JnTG9jYXRpb25Ob2RlID0gbm9kZVRvUmVsb2NhdGVbJ3Mtb2wnXTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChvcmdMb2NhdGlvbk5vZGUgPSBvcmdMb2NhdGlvbk5vZGUucHJldmlvdXNTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmTm9kZSA9IG9yZ0xvY2F0aW9uTm9kZVsncy1uciddO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZk5vZGUgJiYgcmVmTm9kZVsncy1zbiddID09PSBub2RlVG9SZWxvY2F0ZVsncy1zbiddICYmIHBhcmVudE5vZGVSZWYgPT09IHJlZk5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZk5vZGUgPSByZWZOb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVmTm9kZSB8fCAhcmVmTm9kZVsncy1uciddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZU5vZGUgPSByZWZOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCghaW5zZXJ0QmVmb3JlTm9kZSAmJiBwYXJlbnROb2RlUmVmICE9PSBub2RlVG9SZWxvY2F0ZS5wYXJlbnROb2RlKSB8fCBub2RlVG9SZWxvY2F0ZS5uZXh0U2libGluZyAhPT0gaW5zZXJ0QmVmb3JlTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UndmUgY2hlY2tlZCB0aGF0IGl0J3Mgd29ydGggd2hpbGUgdG8gcmVsb2NhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoYXQgdGhlIG5vZGUgdG8gcmVsb2NhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhcyBhIGRpZmZlcmVudCBuZXh0IHNpYmxpbmcgb3IgcGFyZW50IHJlbG9jYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVUb1JlbG9jYXRlICE9PSBpbnNlcnRCZWZvcmVOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlVG9SZWxvY2F0ZVsncy1obiddICYmIG5vZGVUb1JlbG9jYXRlWydzLW9sJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvYmFibHkgYSBjb21wb25lbnQgaW4gdGhlIGluZGV4Lmh0bWwgdGhhdCBkb2Vzbid0IGhhdmUgaXQncyBob3N0bmFtZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGVbJ3MtaG4nXSA9IG5vZGVUb1JlbG9jYXRlWydzLW9sJ10ucGFyZW50Tm9kZS5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGl0IGJhY2sgdG8gdGhlIGRvbSBidXQgaW4gaXRzIG5ldyBob21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZVJlZi5pbnNlcnRCZWZvcmUobm9kZVRvUmVsb2NhdGUsIGluc2VydEJlZm9yZU5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG5vZGUgZG9lc24ndCBoYXZlIGEgc2xvdCBob21lIHRvIGdvIHRvLCBzbyBsZXQncyBoaWRlIGl0XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlVG9SZWxvY2F0ZS5ub2RlVHlwZSA9PT0gMSAvKiBFbGVtZW50Tm9kZSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVRvUmVsb2NhdGUuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tTbG90RmFsbGJhY2tWaXNpYmlsaXR5KSB7XG4gICAgICAgICAgICB1cGRhdGVGYWxsYmFja1Nsb3RWaXNpYmlsaXR5KHJvb3RWbm9kZS4kZWxtJCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZG9uZSBtb3Zpbmcgbm9kZXMgYXJvdW5kXG4gICAgICAgIC8vIGFsbG93IHRoZSBkaXNjb25uZWN0IGNhbGxiYWNrIHRvIHdvcmsgYWdhaW5cbiAgICAgICAgcGx0LiRmbGFncyQgJj0gfjEgLyogaXNUbXBEaXNjb25uZWN0ZWQgKi87XG4gICAgICAgIC8vIGFsd2F5cyByZXNldFxuICAgICAgICByZWxvY2F0ZU5vZGVzLmxlbmd0aCA9IDA7XG4gICAgfVxufTtcbmNvbnN0IGVtaXRFdmVudCA9IChlbG0sIG5hbWUsIG9wdHMpID0+IHtcbiAgICBjb25zdCBldiA9IG5ldyAoIEN1c3RvbUV2ZW50KShuYW1lLCBvcHRzKTtcbiAgICBlbG0uZGlzcGF0Y2hFdmVudChldik7XG4gICAgcmV0dXJuIGV2O1xufTtcbmNvbnN0IGF0dGFjaFRvQW5jZXN0b3IgPSAoaG9zdFJlZiwgYW5jZXN0b3JDb21wb25lbnQpID0+IHtcbiAgICBpZiAoIGFuY2VzdG9yQ29tcG9uZW50ICYmICFob3N0UmVmLiRvblJlbmRlclJlc29sdmUkICYmIGFuY2VzdG9yQ29tcG9uZW50WydzLXAnXSkge1xuICAgICAgICBhbmNlc3RvckNvbXBvbmVudFsncy1wJ10ucHVzaChuZXcgUHJvbWlzZShyID0+IChob3N0UmVmLiRvblJlbmRlclJlc29sdmUkID0gcikpKTtcbiAgICB9XG59O1xuY29uc3Qgc2NoZWR1bGVVcGRhdGUgPSAoaG9zdFJlZiwgaXNJbml0aWFsTG9hZCkgPT4ge1xuICAgIHtcbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDE2IC8qIGlzUXVldWVkRm9yVXBkYXRlICovO1xuICAgIH1cbiAgICBpZiAoIGhvc3RSZWYuJGZsYWdzJCAmIDQgLyogaXNXYWl0aW5nRm9yQ2hpbGRyZW4gKi8pIHtcbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDUxMiAvKiBuZWVkc1JlcmVuZGVyICovO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGF0dGFjaFRvQW5jZXN0b3IoaG9zdFJlZiwgaG9zdFJlZi4kYW5jZXN0b3JDb21wb25lbnQkKTtcbiAgICAvLyB0aGVyZSBpcyBubyBhbmNlc3RvcmMgb21wb25lbnQgb3IgdGhlIGFuY2VzdG9yIGNvbXBvbmVudFxuICAgIC8vIGhhcyBhbHJlYWR5IGZpcmVkIG9mZiBpdHMgbGlmZWN5Y2xlIHVwZGF0ZSB0aGVuXG4gICAgLy8gZmlyZSBvZmYgdGhlIGluaXRpYWwgdXBkYXRlXG4gICAgY29uc3QgZGlzcGF0Y2ggPSAoKSA9PiBkaXNwYXRjaEhvb2tzKGhvc3RSZWYsIGlzSW5pdGlhbExvYWQpO1xuICAgIHJldHVybiAgd3JpdGVUYXNrKGRpc3BhdGNoKSA7XG59O1xuY29uc3QgZGlzcGF0Y2hIb29rcyA9IChob3N0UmVmLCBpc0luaXRpYWxMb2FkKSA9PiB7XG4gICAgY29uc3QgZW5kU2NoZWR1bGUgPSBjcmVhdGVUaW1lKCdzY2hlZHVsZVVwZGF0ZScsIGhvc3RSZWYuJGNtcE1ldGEkLiR0YWdOYW1lJCk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSAgaG9zdFJlZi4kbGF6eUluc3RhbmNlJCA7XG4gICAgbGV0IHByb21pc2U7XG4gICAgZW5kU2NoZWR1bGUoKTtcbiAgICByZXR1cm4gdGhlbihwcm9taXNlLCAoKSA9PiAodXBkYXRlQ29tcG9uZW50KGhvc3RSZWYsIGluc3RhbmNlLCBpc0luaXRpYWxMb2FkKSkpO1xufTtcbmNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChob3N0UmVmLCBpbnN0YW5jZSwgaXNJbml0aWFsTG9hZCkgPT4ge1xuICAgIC8vIHVwZGF0ZUNvbXBvbmVudFxuICAgIGNvbnN0IGVsbSA9IGhvc3RSZWYuJGhvc3RFbGVtZW50JDtcbiAgICBjb25zdCBlbmRVcGRhdGUgPSBjcmVhdGVUaW1lKCd1cGRhdGUnLCBob3N0UmVmLiRjbXBNZXRhJC4kdGFnTmFtZSQpO1xuICAgIGNvbnN0IHJjID0gZWxtWydzLXJjJ107XG4gICAgaWYgKCBpc0luaXRpYWxMb2FkKSB7XG4gICAgICAgIC8vIERPTSBXUklURSFcbiAgICAgICAgYXR0YWNoU3R5bGVzKGhvc3RSZWYpO1xuICAgIH1cbiAgICBjb25zdCBlbmRSZW5kZXIgPSBjcmVhdGVUaW1lKCdyZW5kZXInLCBob3N0UmVmLiRjbXBNZXRhJC4kdGFnTmFtZSQpO1xuICAgIHtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbG9va3MgbGlrZSB3ZSd2ZSBnb3QgY2hpbGQgbm9kZXMgdG8gcmVuZGVyIGludG8gdGhpcyBob3N0IGVsZW1lbnRcbiAgICAgICAgICAgIC8vIG9yIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBjc3MgY2xhc3MvYXR0cnMgb24gdGhlIGhvc3QgZWxlbWVudFxuICAgICAgICAgICAgLy8gRE9NIFdSSVRFIVxuICAgICAgICAgICAgcmVuZGVyVmRvbShob3N0UmVmLCBjYWxsUmVuZGVyKGluc3RhbmNlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCBwbHQuJGNzc1NoaW0kKSB7XG4gICAgICAgIHBsdC4kY3NzU2hpbSQudXBkYXRlSG9zdChlbG0pO1xuICAgIH1cbiAgICB7XG4gICAgICAgIGhvc3RSZWYuJGZsYWdzJCAmPSB+MTYgLyogaXNRdWV1ZWRGb3JVcGRhdGUgKi87XG4gICAgfVxuICAgIHtcbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkIHw9IDIgLyogaGFzUmVuZGVyZWQgKi87XG4gICAgfVxuICAgIGlmICggcmMpIHtcbiAgICAgICAgLy8gb2ssIHNvIHR1cm5zIG91dCB0aGVyZSBhcmUgc29tZSBjaGlsZCBob3N0IGVsZW1lbnRzXG4gICAgICAgIC8vIHdhaXRpbmcgb24gdGhpcyBwYXJlbnQgZWxlbWVudCB0byBsb2FkXG4gICAgICAgIC8vIGxldCdzIGZpcmUgb2ZmIGFsbCB1cGRhdGUgY2FsbGJhY2tzIHdhaXRpbmdcbiAgICAgICAgcmMubWFwKGNiID0+IGNiKCkpO1xuICAgICAgICBlbG1bJ3MtcmMnXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZW5kUmVuZGVyKCk7XG4gICAgZW5kVXBkYXRlKCk7XG4gICAge1xuICAgICAgICBjb25zdCBjaGlsZHJlblByb21pc2VzID0gZWxtWydzLXAnXTtcbiAgICAgICAgY29uc3QgcG9zdFVwZGF0ZSA9ICgpID0+IHBvc3RVcGRhdGVDb21wb25lbnQoaG9zdFJlZik7XG4gICAgICAgIGlmIChjaGlsZHJlblByb21pc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcG9zdFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwoY2hpbGRyZW5Qcm9taXNlcykudGhlbihwb3N0VXBkYXRlKTtcbiAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSA0IC8qIGlzV2FpdGluZ0ZvckNoaWxkcmVuICovO1xuICAgICAgICAgICAgY2hpbGRyZW5Qcm9taXNlcy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGNhbGxSZW5kZXIgPSAoaW5zdGFuY2UpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpbnN0YW5jZSA9ICBpbnN0YW5jZS5yZW5kZXIoKSA7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufTtcbmNvbnN0IHBvc3RVcGRhdGVDb21wb25lbnQgPSAoaG9zdFJlZikgPT4ge1xuICAgIGNvbnN0IHRhZ05hbWUgPSBob3N0UmVmLiRjbXBNZXRhJC4kdGFnTmFtZSQ7XG4gICAgY29uc3QgZWxtID0gaG9zdFJlZi4kaG9zdEVsZW1lbnQkO1xuICAgIGNvbnN0IGVuZFBvc3RVcGRhdGUgPSBjcmVhdGVUaW1lKCdwb3N0VXBkYXRlJywgdGFnTmFtZSk7XG4gICAgY29uc3QgYW5jZXN0b3JDb21wb25lbnQgPSBob3N0UmVmLiRhbmNlc3RvckNvbXBvbmVudCQ7XG4gICAgaWYgKCEoaG9zdFJlZi4kZmxhZ3MkICYgNjQgLyogaGFzTG9hZGVkQ29tcG9uZW50ICovKSkge1xuICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gNjQgLyogaGFzTG9hZGVkQ29tcG9uZW50ICovO1xuICAgICAgICB7XG4gICAgICAgICAgICAvLyBET00gV1JJVEUhXG4gICAgICAgICAgICBhZGRIeWRyYXRlZEZsYWcoZWxtKTtcbiAgICAgICAgfVxuICAgICAgICBlbmRQb3N0VXBkYXRlKCk7XG4gICAgICAgIHtcbiAgICAgICAgICAgIGhvc3RSZWYuJG9uUmVhZHlSZXNvbHZlJChlbG0pO1xuICAgICAgICAgICAgaWYgKCFhbmNlc3RvckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGFwcERpZExvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW5kUG9zdFVwZGF0ZSgpO1xuICAgIH1cbiAgICAvLyBsb2FkIGV2ZW50cyBmaXJlIGZyb20gYm90dG9tIHRvIHRvcFxuICAgIC8vIHRoZSBkZWVwZXN0IGVsZW1lbnRzIGxvYWQgZmlyc3QgdGhlbiBidWJibGVzIHVwXG4gICAge1xuICAgICAgICBpZiAoaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCkge1xuICAgICAgICAgICAgaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCgpO1xuICAgICAgICAgICAgaG9zdFJlZi4kb25SZW5kZXJSZXNvbHZlJCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaG9zdFJlZi4kZmxhZ3MkICYgNTEyIC8qIG5lZWRzUmVyZW5kZXIgKi8pIHtcbiAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHNjaGVkdWxlVXBkYXRlKGhvc3RSZWYsIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdFJlZi4kZmxhZ3MkICY9IH4oNCAvKiBpc1dhaXRpbmdGb3JDaGlsZHJlbiAqLyB8IDUxMiAvKiBuZWVkc1JlcmVuZGVyICovKTtcbiAgICB9XG4gICAgLy8gKCDigKJf4oCiKVxuICAgIC8vICgg4oCiX+KAoik+4oyQ4pagLeKWoFxuICAgIC8vICjijJDilqBf4pagKVxufTtcbmNvbnN0IGZvcmNlVXBkYXRlID0gKHJlZikgPT4ge1xuICAgIHtcbiAgICAgICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYocmVmKTtcbiAgICAgICAgY29uc3QgaXNDb25uZWN0ZWQgPSBob3N0UmVmLiRob3N0RWxlbWVudCQuaXNDb25uZWN0ZWQ7XG4gICAgICAgIGlmIChpc0Nvbm5lY3RlZCAmJiAoaG9zdFJlZi4kZmxhZ3MkICYgKDIgLyogaGFzUmVuZGVyZWQgKi8gfCAxNiAvKiBpc1F1ZXVlZEZvclVwZGF0ZSAqLykpID09PSAyIC8qIGhhc1JlbmRlcmVkICovKSB7XG4gICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZShob3N0UmVmLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJucyBcInRydWVcIiB3aGVuIHRoZSBmb3JjZWQgdXBkYXRlIHdhcyBzdWNjZXNzZnVsbHkgc2NoZWR1bGVkXG4gICAgICAgIHJldHVybiBpc0Nvbm5lY3RlZDtcbiAgICB9XG59O1xuY29uc3QgYXBwRGlkTG9hZCA9ICh3aG8pID0+IHtcbiAgICAvLyBvbiBhcHBsb2FkXG4gICAgLy8gd2UgaGF2ZSBmaW5pc2ggdGhlIGZpcnN0IGJpZyBpbml0aWFsIHJlbmRlclxuICAgIHtcbiAgICAgICAgYWRkSHlkcmF0ZWRGbGFnKGRvYy5kb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgICBuZXh0VGljaygoKSA9PiBlbWl0RXZlbnQod2luLCAnYXBwbG9hZCcsIHsgZGV0YWlsOiB7IG5hbWVzcGFjZTogTkFNRVNQQUNFIH0gfSkpO1xufTtcbmNvbnN0IHRoZW4gPSAocHJvbWlzZSwgdGhlbkZuKSA9PiB7XG4gICAgcmV0dXJuIHByb21pc2UgJiYgcHJvbWlzZS50aGVuID8gcHJvbWlzZS50aGVuKHRoZW5GbikgOiB0aGVuRm4oKTtcbn07XG5jb25zdCBhZGRIeWRyYXRlZEZsYWcgPSAoZWxtKSA9PiAoIGVsbS5jbGFzc0xpc3QuYWRkKCdoeWRyYXRlZCcpICk7XG5jb25zdCBwYXJzZVByb3BlcnR5VmFsdWUgPSAocHJvcFZhbHVlLCBwcm9wVHlwZSkgPT4ge1xuICAgIC8vIGVuc3VyZSB0aGlzIHZhbHVlIGlzIG9mIHRoZSBjb3JyZWN0IHByb3AgdHlwZVxuICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiAhaXNDb21wbGV4VHlwZShwcm9wVmFsdWUpKSB7XG4gICAgICAgIGlmICggcHJvcFR5cGUgJiA0IC8qIEJvb2xlYW4gKi8pIHtcbiAgICAgICAgICAgIC8vIHBlciB0aGUgSFRNTCBzcGVjLCBhbnkgc3RyaW5nIHZhbHVlIG1lYW5zIGl0IGlzIGEgYm9vbGVhbiB0cnVlIHZhbHVlXG4gICAgICAgICAgICAvLyBidXQgd2UnbGwgY2hlYXQgaGVyZSBhbmQgc2F5IHRoYXQgdGhlIHN0cmluZyBcImZhbHNlXCIgaXMgdGhlIGJvb2xlYW4gZmFsc2VcbiAgICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUgPT09ICdmYWxzZScgPyBmYWxzZSA6IHByb3BWYWx1ZSA9PT0gJycgfHwgISFwcm9wVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBwcm9wVHlwZSAmIDIgLyogTnVtYmVyICovKSB7XG4gICAgICAgICAgICAvLyBmb3JjZSBpdCB0byBiZSBhIG51bWJlclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHByb3BUeXBlICYgMSAvKiBTdHJpbmcgKi8pIHtcbiAgICAgICAgICAgIC8vIGNvdWxkIGhhdmUgYmVlbiBwYXNzZWQgYXMgYSBudW1iZXIgb3IgYm9vbGVhblxuICAgICAgICAgICAgLy8gYnV0IHdlIHN0aWxsIHdhbnQgaXQgYXMgYSBzdHJpbmdcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWR1bmRhbnQgcmV0dXJuIGhlcmUgZm9yIGJldHRlciBtaW5pZmljYXRpb25cbiAgICAgICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgLy8gbm90IHN1cmUgZXhhY3RseSB3aGF0IHR5cGUgd2Ugd2FudFxuICAgIC8vIHNvIG5vIG5lZWQgdG8gY2hhbmdlIHRvIGEgZGlmZmVyZW50IHR5cGVcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xufTtcbmNvbnN0IGdldFZhbHVlID0gKHJlZiwgcHJvcE5hbWUpID0+IGdldEhvc3RSZWYocmVmKS4kaW5zdGFuY2VWYWx1ZXMkLmdldChwcm9wTmFtZSk7XG5jb25zdCBzZXRWYWx1ZSA9IChyZWYsIHByb3BOYW1lLCBuZXdWYWwsIGNtcE1ldGEpID0+IHtcbiAgICAvLyBjaGVjayBvdXIgbmV3IHByb3BlcnR5IHZhbHVlIGFnYWluc3Qgb3VyIGludGVybmFsIHZhbHVlXG4gICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYocmVmKTtcbiAgICBjb25zdCBvbGRWYWwgPSBob3N0UmVmLiRpbnN0YW5jZVZhbHVlcyQuZ2V0KHByb3BOYW1lKTtcbiAgICBjb25zdCBmbGFncyA9IGhvc3RSZWYuJGZsYWdzJDtcbiAgICBjb25zdCBpbnN0YW5jZSA9ICBob3N0UmVmLiRsYXp5SW5zdGFuY2UkIDtcbiAgICBuZXdWYWwgPSBwYXJzZVByb3BlcnR5VmFsdWUobmV3VmFsLCBjbXBNZXRhLiRtZW1iZXJzJFtwcm9wTmFtZV1bMF0pO1xuICAgIGlmICgoICEoZmxhZ3MgJiA4IC8qIGlzQ29uc3RydWN0aW5nSW5zdGFuY2UgKi8pIHx8IG9sZFZhbCA9PT0gdW5kZWZpbmVkKSAmJiBuZXdWYWwgIT09IG9sZFZhbCkge1xuICAgICAgICAvLyBnYWR6b29rcyEgdGhlIHByb3BlcnR5J3MgdmFsdWUgaGFzIGNoYW5nZWQhIVxuICAgICAgICAvLyBzZXQgb3VyIG5ldyB2YWx1ZSFcbiAgICAgICAgaG9zdFJlZi4kaW5zdGFuY2VWYWx1ZXMkLnNldChwcm9wTmFtZSwgbmV3VmFsKTtcbiAgICAgICAgaWYgKCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKCAoZmxhZ3MgJiAoMiAvKiBoYXNSZW5kZXJlZCAqLyB8IDE2IC8qIGlzUXVldWVkRm9yVXBkYXRlICovKSkgPT09IDIgLyogaGFzUmVuZGVyZWQgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBsb29rcyBsaWtlIHRoaXMgdmFsdWUgYWN0dWFsbHkgY2hhbmdlZCwgc28gd2UndmUgZ290IHdvcmsgdG8gZG8hXG4gICAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgd2UndmUgYWxyZWFkeSByZW5kZXJlZCwgb3RoZXJ3aXNlIGp1c3QgY2hpbGwgb3V0XG4gICAgICAgICAgICAgICAgLy8gcXVldWUgdGhhdCB3ZSBuZWVkIHRvIGRvIGFuIHVwZGF0ZSwgYnV0IGRvbid0IHdvcnJ5IGFib3V0IHF1ZXVpbmdcbiAgICAgICAgICAgICAgICAvLyB1cCBtaWxsaW9ucyBjdXogdGhpcyBmdW5jdGlvbiBlbnN1cmVzIGl0IG9ubHkgcnVucyBvbmNlXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVVcGRhdGUoaG9zdFJlZiwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IHByb3h5Q29tcG9uZW50ID0gKENzdHIsIGNtcE1ldGEsIGZsYWdzKSA9PiB7XG4gICAgaWYgKCBjbXBNZXRhLiRtZW1iZXJzJCkge1xuICAgICAgICAvLyBJdCdzIGJldHRlciB0byBoYXZlIGEgY29uc3QgdGhhbiB0d28gT2JqZWN0LmVudHJpZXMoKVxuICAgICAgICBjb25zdCBtZW1iZXJzID0gT2JqZWN0LmVudHJpZXMoY21wTWV0YS4kbWVtYmVycyQpO1xuICAgICAgICBjb25zdCBwcm90b3R5cGUgPSBDc3RyLnByb3RvdHlwZTtcbiAgICAgICAgbWVtYmVycy5tYXAoKFttZW1iZXJOYW1lLCBbbWVtYmVyRmxhZ3NdXSkgPT4ge1xuICAgICAgICAgICAgaWYgKCAobWVtYmVyRmxhZ3MgJiAzMSAvKiBQcm9wICovIHx8ICgoIGZsYWdzICYgMiAvKiBwcm94eVN0YXRlICovKSAmJiBtZW1iZXJGbGFncyAmIDMyIC8qIFN0YXRlICovKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBwcm94eUNvbXBvbmVudCAtIHByb3BcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBtZW1iZXJOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3h5Q29tcG9uZW50LCBnZXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRWYWx1ZSh0aGlzLCBtZW1iZXJOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0KG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm94eUNvbXBvbmVudCwgc2V0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZSh0aGlzLCBtZW1iZXJOYW1lLCBuZXdWYWx1ZSwgY21wTWV0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICggKCBmbGFncyAmIDEgLyogaXNFbGVtZW50Q29uc3RydWN0b3IgKi8pKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyTmFtZVRvUHJvcE5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBwcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrID0gZnVuY3Rpb24gKGF0dHJOYW1lLCBfb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGx0LmptcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gYXR0ck5hbWVUb1Byb3BOYW1lLmdldChhdHRyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gbmV3VmFsdWUgPT09IG51bGwgJiYgdHlwZW9mIHRoaXNbcHJvcE5hbWVdID09PSAnYm9vbGVhbicgPyBmYWxzZSA6IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBvZiBhdHRyaWJ1dGVzIHRvIG9ic2VydmVcbiAgICAgICAgICAgIC8vIGFuZCBhbHNvIGNyZWF0ZSBhIG1hcCBvZiBodG1sIGF0dHJpYnV0ZSBuYW1lIHRvIGpzIHByb3BlcnR5IG5hbWVcbiAgICAgICAgICAgIENzdHIub2JzZXJ2ZWRBdHRyaWJ1dGVzID0gbWVtYmVyc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtfLCBtXSkgPT4gbVswXSAmIDE1IC8qIEhhc0F0dHJpYnV0ZSAqLykgLy8gZmlsdGVyIHRvIG9ubHkga2VlcCBwcm9wcyB0aGF0IHNob3VsZCBtYXRjaCBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgLm1hcCgoW3Byb3BOYW1lLCBtXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gbVsxXSB8fCBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBhdHRyTmFtZVRvUHJvcE5hbWUuc2V0KGF0dHJOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCBtWzBdICYgNTEyIC8qIFJlZmxlY3RBdHRyICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtcE1ldGEuJGF0dHJzVG9SZWZsZWN0JC5wdXNoKFtwcm9wTmFtZSwgYXR0ck5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJOYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIENzdHI7XG59O1xuY29uc3QgaW5pdGlhbGl6ZUNvbXBvbmVudCA9IGFzeW5jIChlbG0sIGhvc3RSZWYsIGNtcE1ldGEsIGhtclZlcnNpb25JZCwgQ3N0cikgPT4ge1xuICAgIC8vIGluaXRpYWxpemVDb21wb25lbnRcbiAgICBpZiAoIChob3N0UmVmLiRmbGFncyQgJiAzMiAvKiBoYXNJbml0aWFsaXplZENvbXBvbmVudCAqLykgPT09IDApIHtcbiAgICAgICAgLy8gd2UgaGF2ZW4ndCBpbml0aWFsaXplZCB0aGlzIGVsZW1lbnQgeWV0XG4gICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSAzMiAvKiBoYXNJbml0aWFsaXplZENvbXBvbmVudCAqLztcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gbGF6eSBsb2FkZWQgY29tcG9uZW50c1xuICAgICAgICAgICAgLy8gcmVxdWVzdCB0aGUgY29tcG9uZW50J3MgaW1wbGVtZW50YXRpb24gdG8gYmVcbiAgICAgICAgICAgIC8vIHdpcmVkIHVwIHdpdGggdGhlIGhvc3QgZWxlbWVudFxuICAgICAgICAgICAgQ3N0ciA9IGxvYWRNb2R1bGUoY21wTWV0YSk7XG4gICAgICAgICAgICBpZiAoQ3N0ci50aGVuKSB7XG4gICAgICAgICAgICAgICAgLy8gQXdhaXQgY3JlYXRlcyBhIG1pY3JvLXRhc2sgYXZvaWQgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRMb2FkID0gdW5pcXVlVGltZSgpO1xuICAgICAgICAgICAgICAgIENzdHIgPSBhd2FpdCBDc3RyO1xuICAgICAgICAgICAgICAgIGVuZExvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggIUNzdHIuaXNQcm94aWVkKSB7XG4gICAgICAgICAgICAgICAgcHJveHlDb21wb25lbnQoQ3N0ciwgY21wTWV0YSwgMiAvKiBwcm94eVN0YXRlICovKTtcbiAgICAgICAgICAgICAgICBDc3RyLmlzUHJveGllZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmROZXdJbnN0YW5jZSA9IGNyZWF0ZVRpbWUoJ2NyZWF0ZUluc3RhbmNlJywgY21wTWV0YS4kdGFnTmFtZSQpO1xuICAgICAgICAgICAgLy8gb2ssIHRpbWUgdG8gY29uc3RydWN0IHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gYnV0IGxldCdzIGtlZXAgdHJhY2sgb2Ygd2hlbiB3ZSBzdGFydCBhbmQgc3RvcFxuICAgICAgICAgICAgLy8gc28gdGhhdCB0aGUgZ2V0dGVycy9zZXR0ZXJzIGRvbid0IGluY29ycmVjdGx5IHN0ZXAgb24gZGF0YVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhvc3RSZWYuJGZsYWdzJCB8PSA4IC8qIGlzQ29uc3RydWN0aW5nSW5zdGFuY2UgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zdHJ1Y3QgdGhlIGxhenktbG9hZGVkIGNvbXBvbmVudCBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgLy8gcGFzc2luZyB0aGUgaG9zdFJlZiBpcyB2ZXJ5IGltcG9ydGFudCBkdXJpbmdcbiAgICAgICAgICAgIC8vIGNvbnN0cnVjdGlvbiBpbiBvcmRlciB0byBkaXJlY3RseSB3aXJlIHRvZ2V0aGVyIHRoZVxuICAgICAgICAgICAgLy8gaG9zdCBlbGVtZW50IGFuZCB0aGUgbGF6eS1sb2FkZWQgaW5zdGFuY2VcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmV3IENzdHIoaG9zdFJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgJj0gfjggLyogaXNDb25zdHJ1Y3RpbmdJbnN0YW5jZSAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuZE5ld0luc3RhbmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGVJZCA9ICBnZXRTY29wZUlkKGNtcE1ldGEuJHRhZ05hbWUkKTtcbiAgICAgICAgaWYgKCAhc3R5bGVzLmhhcyhzY29wZUlkKSAmJiBDc3RyLnN0eWxlKSB7XG4gICAgICAgICAgICBjb25zdCBlbmRSZWdpc3RlclN0eWxlcyA9IGNyZWF0ZVRpbWUoJ3JlZ2lzdGVyU3R5bGVzJywgY21wTWV0YS4kdGFnTmFtZSQpO1xuICAgICAgICAgICAgLy8gdGhpcyBjb21wb25lbnQgaGFzIHN0eWxlcyBidXQgd2UgaGF2ZW4ndCByZWdpc3RlcmVkIHRoZW0geWV0XG4gICAgICAgICAgICBsZXQgc3R5bGUgPSBDc3RyLnN0eWxlO1xuICAgICAgICAgICAgaWYgKCBjbXBNZXRhLiRmbGFncyQgJiA4IC8qIG5lZWRzU2hhZG93RG9tU2hpbSAqLykge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gYXdhaXQgaW1wb3J0KCcuL3NoYWRvdy1jc3MtYjg1ZWVlNmUuanMnKS50aGVuKG0gPT4gbS5zY29wZUNzcyhzdHlsZSwgc2NvcGVJZCwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2lzdGVyU3R5bGUoc2NvcGVJZCwgc3R5bGUsICEhKGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogc2hhZG93RG9tRW5jYXBzdWxhdGlvbiAqLykpO1xuICAgICAgICAgICAgZW5kUmVnaXN0ZXJTdHlsZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB3ZSd2ZSBzdWNjZXNzZnVsbHkgY3JlYXRlZCBhIGxhenkgaW5zdGFuY2VcbiAgICBjb25zdCBhbmNlc3RvckNvbXBvbmVudCA9IGhvc3RSZWYuJGFuY2VzdG9yQ29tcG9uZW50JDtcbiAgICBjb25zdCBzY2hlZHVsZSA9ICgpID0+IHNjaGVkdWxlVXBkYXRlKGhvc3RSZWYsIHRydWUpO1xuICAgIGlmICggYW5jZXN0b3JDb21wb25lbnQgJiYgYW5jZXN0b3JDb21wb25lbnRbJ3MtcmMnXSkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBpbnRpYWwgbG9hZCBhbmQgdGhpcyBjb21wb25lbnQgaXQgaGFzIGFuIGFuY2VzdG9yIGNvbXBvbmVudFxuICAgICAgICAvLyBidXQgdGhlIGFuY2VzdG9yIGNvbXBvbmVudCBoYXMgTk9UIGZpcmVkIGl0cyB3aWxsIHVwZGF0ZSBsaWZlY3ljbGUgeWV0XG4gICAgICAgIC8vIHNvIGxldCdzIGp1c3QgY29vbCBvdXIgamV0cyBhbmQgd2FpdCBmb3IgdGhlIGFuY2VzdG9yIHRvIGNvbnRpbnVlIGZpcnN0XG4gICAgICAgIC8vIHRoaXMgd2lsbCBnZXQgZmlyZWQgb2ZmIHdoZW4gdGhlIGFuY2VzdG9yIGNvbXBvbmVudFxuICAgICAgICAvLyBmaW5hbGx5IGdldHMgYXJvdW5kIHRvIHJlbmRlcmluZyBpdHMgbGF6eSBzZWxmXG4gICAgICAgIC8vIGZpcmUgb2ZmIHRoZSBpbml0aWFsIHVwZGF0ZVxuICAgICAgICBhbmNlc3RvckNvbXBvbmVudFsncy1yYyddLnB1c2goc2NoZWR1bGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2NoZWR1bGUoKTtcbiAgICB9XG59O1xuY29uc3QgY29ubmVjdGVkQ2FsbGJhY2sgPSAoZWxtKSA9PiB7XG4gICAgaWYgKChwbHQuJGZsYWdzJCAmIDEgLyogaXNUbXBEaXNjb25uZWN0ZWQgKi8pID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGhvc3RSZWYgPSBnZXRIb3N0UmVmKGVsbSk7XG4gICAgICAgIGNvbnN0IGNtcE1ldGEgPSBob3N0UmVmLiRjbXBNZXRhJDtcbiAgICAgICAgY29uc3QgZW5kQ29ubmVjdGVkID0gY3JlYXRlVGltZSgnY29ubmVjdGVkQ2FsbGJhY2snLCBjbXBNZXRhLiR0YWdOYW1lJCk7XG4gICAgICAgIGlmICghKGhvc3RSZWYuJGZsYWdzJCAmIDEgLyogaGFzQ29ubmVjdGVkICovKSkge1xuICAgICAgICAgICAgLy8gZmlyc3QgdGltZSB0aGlzIGNvbXBvbmVudCBoYXMgY29ubmVjdGVkXG4gICAgICAgICAgICBob3N0UmVmLiRmbGFncyQgfD0gMSAvKiBoYXNDb25uZWN0ZWQgKi87XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gaW5pdFVwZGF0ZVxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzbG90IHBvbHlmaWxsIGlzIHJlcXVpcmVkIHdlJ2xsIG5lZWQgdG8gcHV0IHNvbWUgbm9kZXNcbiAgICAgICAgICAgICAgICAvLyBpbiBoZXJlIHRvIGFjdCBhcyBvcmlnaW5hbCBjb250ZW50IGFuY2hvcnMgYXMgd2UgbW92ZSBub2RlcyBhcm91bmRcbiAgICAgICAgICAgICAgICAvLyBob3N0IGVsZW1lbnQgaGFzIGJlZW4gY29ubmVjdGVkIHRvIHRoZSBET01cbiAgICAgICAgICAgICAgICBpZiAoICggY21wTWV0YS4kZmxhZ3MkICYgKDQgLyogaGFzU2xvdFJlbG9jYXRpb24gKi8gfCA4IC8qIG5lZWRzU2hhZG93RG9tU2hpbSAqLykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldENvbnRlbnRSZWZlcmVuY2UoZWxtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgZmlyc3QgYW5jZXN0b3IgY29tcG9uZW50IChpZiB0aGVyZSBpcyBvbmUpIGFuZCByZWdpc3RlclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY29tcG9uZW50IGFzIG9uZSBvZiB0aGUgYWN0aXZlbHkgbG9hZGluZyBjaGlsZCBjb21wb25lbnRzIGZvciBpdHMgYW5jZXN0b3JcbiAgICAgICAgICAgICAgICBsZXQgYW5jZXN0b3JDb21wb25lbnQgPSBlbG07XG4gICAgICAgICAgICAgICAgd2hpbGUgKChhbmNlc3RvckNvbXBvbmVudCA9IGFuY2VzdG9yQ29tcG9uZW50LnBhcmVudE5vZGUgfHwgYW5jZXN0b3JDb21wb25lbnQuaG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xpbWIgdXAgdGhlIGFuY2VzdG9ycyBsb29raW5nIGZvciB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IHRoYXQgaGFzbid0IGZpbmlzaGVkIGl0cyBsaWZlY3ljbGUgdXBkYXRlIHlldFxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvckNvbXBvbmVudFsncy1wJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGZvdW5kIHRoaXMgY29tcG9uZW50cyBmaXJzdCBhbmNlc3RvciBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhpcyBjb21wb25lbnQncyBhbmNlc3RvciBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaFRvQW5jZXN0b3IoaG9zdFJlZiwgKGhvc3RSZWYuJGFuY2VzdG9yQ29tcG9uZW50JCA9IGFuY2VzdG9yQ29tcG9uZW50KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIExhenkgcHJvcGVydGllc1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy93ZWItY29tcG9uZW50cy9iZXN0LXByYWN0aWNlcyNsYXp5LXByb3BlcnRpZXNcbiAgICAgICAgICAgIGlmICggY21wTWV0YS4kbWVtYmVycyQpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhjbXBNZXRhLiRtZW1iZXJzJCkubWFwKChbbWVtYmVyTmFtZSwgW21lbWJlckZsYWdzXV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlckZsYWdzICYgMzEgLyogUHJvcCAqLyAmJiBlbG0uaGFzT3duUHJvcGVydHkobWVtYmVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZWxtW21lbWJlck5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsbVttZW1iZXJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbVttZW1iZXJOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGVkQ2FsbGJhY2ssIHRhc2tRdWV1ZSwgaW5pdGlhbExvYWRcbiAgICAgICAgICAgICAgICAvLyBhbmd1bGFyIHNldHMgYXR0cmlidXRlIEFGVEVSIGNvbm5lY3RDYWxsYmFja1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE4OTA5XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTk5NDBcbiAgICAgICAgICAgICAgICBuZXh0VGljaygoKSA9PiBpbml0aWFsaXplQ29tcG9uZW50KGVsbSwgaG9zdFJlZiwgY21wTWV0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVuZENvbm5lY3RlZCgpO1xuICAgIH1cbn07XG5jb25zdCBzZXRDb250ZW50UmVmZXJlbmNlID0gKGVsbSkgPT4ge1xuICAgIC8vIG9ubHkgcmVxdWlyZWQgd2hlbiB3ZSdyZSBOT1QgdXNpbmcgbmF0aXZlIHNoYWRvdyBkb20gKHNsb3QpXG4gICAgLy8gb3IgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBuYXRpdmUgc2hhZG93IGRvbVxuICAgIC8vIGFuZCB0aGlzIGhvc3QgZWxlbWVudCB3YXMgTk9UIGNyZWF0ZWQgd2l0aCBTU1JcbiAgICAvLyBsZXQncyBwaWNrIG91dCB0aGUgaW5uZXIgY29udGVudCBmb3Igc2xvdCBwcm9qZWN0aW9uXG4gICAgLy8gY3JlYXRlIGEgbm9kZSB0byByZXByZXNlbnQgd2hlcmUgdGhlIG9yaWdpbmFsXG4gICAgLy8gY29udGVudCB3YXMgZmlyc3QgcGxhY2VkLCB3aGljaCBpcyB1c2VmdWwgbGF0ZXIgb25cbiAgICBjb25zdCBjb250ZW50UmVmRWxtID0gKGVsbVsncy1jciddID0gZG9jLmNyZWF0ZUNvbW1lbnQoICcnKSk7XG4gICAgY29udGVudFJlZkVsbVsncy1jbiddID0gdHJ1ZTtcbiAgICBlbG0uaW5zZXJ0QmVmb3JlKGNvbnRlbnRSZWZFbG0sIGVsbS5maXJzdENoaWxkKTtcbn07XG5jb25zdCBkaXNjb25uZWN0ZWRDYWxsYmFjayA9IChlbG0pID0+IHtcbiAgICBpZiAoKHBsdC4kZmxhZ3MkICYgMSAvKiBpc1RtcERpc2Nvbm5lY3RlZCAqLykgPT09IDApIHtcbiAgICAgICAgY29uc3QgaG9zdFJlZiA9IGdldEhvc3RSZWYoZWxtKTtcbiAgICAgICAgLy8gY2xlYXIgQ1NTIHZhci1zaGltIHRyYWNraW5nXG4gICAgICAgIGlmICggcGx0LiRjc3NTaGltJCkge1xuICAgICAgICAgICAgcGx0LiRjc3NTaGltJC5yZW1vdmVIb3N0KGVsbSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgYm9vdHN0cmFwTGF6eSA9IChsYXp5QnVuZGxlcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgZW5kQm9vdHN0cmFwID0gY3JlYXRlVGltZSgpO1xuICAgIGNvbnN0IGNtcFRhZ3MgPSBbXTtcbiAgICBjb25zdCBleGNsdWRlID0gb3B0aW9ucy5leGNsdWRlIHx8IFtdO1xuICAgIGNvbnN0IGN1c3RvbUVsZW1lbnRzID0gd2luLmN1c3RvbUVsZW1lbnRzO1xuICAgIGNvbnN0IGhlYWQgPSBkb2MuaGVhZDtcbiAgICBjb25zdCBtZXRhQ2hhcnNldCA9IC8qQF9fUFVSRV9fKi8gaGVhZC5xdWVyeVNlbGVjdG9yKCdtZXRhW2NoYXJzZXRdJyk7XG4gICAgY29uc3QgdmlzaWJpbGl0eVN0eWxlID0gLypAX19QVVJFX18qLyBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBjb25zdCBkZWZlcnJlZENvbm5lY3RlZENhbGxiYWNrcyA9IFtdO1xuICAgIGxldCBhcHBMb2FkRmFsbGJhY2s7XG4gICAgbGV0IGlzQm9vdHN0cmFwcGluZyA9IHRydWU7XG4gICAgT2JqZWN0LmFzc2lnbihwbHQsIG9wdGlvbnMpO1xuICAgIHBsdC4kcmVzb3VyY2VzVXJsJCA9IG5ldyBVUkwob3B0aW9ucy5yZXNvdXJjZXNVcmwgfHwgJy4vJywgZG9jLmJhc2VVUkkpLmhyZWY7XG4gICAgbGF6eUJ1bmRsZXMubWFwKGxhenlCdW5kbGUgPT4gbGF6eUJ1bmRsZVsxXS5tYXAoY29tcGFjdE1ldGEgPT4ge1xuICAgICAgICBjb25zdCBjbXBNZXRhID0ge1xuICAgICAgICAgICAgJGZsYWdzJDogY29tcGFjdE1ldGFbMF0sXG4gICAgICAgICAgICAkdGFnTmFtZSQ6IGNvbXBhY3RNZXRhWzFdLFxuICAgICAgICAgICAgJG1lbWJlcnMkOiBjb21wYWN0TWV0YVsyXSxcbiAgICAgICAgICAgICRsaXN0ZW5lcnMkOiBjb21wYWN0TWV0YVszXSxcbiAgICAgICAgfTtcbiAgICAgICAge1xuICAgICAgICAgICAgY21wTWV0YS4kbWVtYmVycyQgPSBjb21wYWN0TWV0YVsyXTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgICBjbXBNZXRhLiRhdHRyc1RvUmVmbGVjdCQgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICFzdXBwb3J0c1NoYWRvdyAmJiBjbXBNZXRhLiRmbGFncyQgJiAxIC8qIHNoYWRvd0RvbUVuY2Fwc3VsYXRpb24gKi8pIHtcbiAgICAgICAgICAgIGNtcE1ldGEuJGZsYWdzJCB8PSA4IC8qIG5lZWRzU2hhZG93RG9tU2hpbSAqLztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWdOYW1lID0gIGNtcE1ldGEuJHRhZ05hbWUkO1xuICAgICAgICBjb25zdCBIb3N0RWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICAgICAgLy8gU3RlbmNpbExhenlIb3N0XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihzZWxmKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHN1cGVyKHNlbGYpO1xuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVySG9zdChzZWxmLCBjbXBNZXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoIGNtcE1ldGEuJGZsYWdzJCAmIDEgLyogc2hhZG93RG9tRW5jYXBzdWxhdGlvbiAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNvbXBvbmVudCBpcyB1c2luZyBzaGFkb3cgZG9tXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgc2hhZG93IGRvbVxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdGhlIHJlYWQtb25seSBwcm9wZXJ0eSBcInNoYWRvd1Jvb3RcIiB0byB0aGUgaG9zdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZGluZyB0aGUgc2hhZG93IHJvb3QgYnVpbGQgY29uZGl0aW9uYWxzIHRvIG1pbmltaXplIHJ1bnRpbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1cHBvcnRzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoICEoJ3NoYWRvd1Jvb3QnIGluIHNlbGYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNoYWRvd1Jvb3QgPSBzZWxmO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcExvYWRGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYXBwTG9hZEZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwTG9hZEZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzQm9vdHN0cmFwcGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25uZWN0ZWRDYWxsYmFjayB3aWxsIGJlIHByb2Nlc3NlZCBvbmNlIGFsbCBjb21wb25lbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkQ29ubmVjdGVkQ2FsbGJhY2tzLnB1c2godGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwbHQuam1wKCgpID0+IGNvbm5lY3RlZENhbGxiYWNrKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICBwbHQuam1wKCgpID0+IGRpc2Nvbm5lY3RlZENhbGxiYWNrKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50T25SZWFkeSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SG9zdFJlZih0aGlzKS4kb25SZWFkeVByb21pc2UkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjbXBNZXRhLiRsYXp5QnVuZGxlSWRzJCA9IGxhenlCdW5kbGVbMF07XG4gICAgICAgIGlmICghZXhjbHVkZS5pbmNsdWRlcyh0YWdOYW1lKSAmJiAhY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpKSB7XG4gICAgICAgICAgICBjbXBUYWdzLnB1c2godGFnTmFtZSk7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgcHJveHlDb21wb25lbnQoSG9zdEVsZW1lbnQsIGNtcE1ldGEsIDEgLyogaXNFbGVtZW50Q29uc3RydWN0b3IgKi8pKTtcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICB7XG4gICAgICAgIHZpc2liaWxpdHlTdHlsZS5pbm5lckhUTUwgPSBjbXBUYWdzICsgSFlEUkFURURfQ1NTO1xuICAgICAgICB2aXNpYmlsaXR5U3R5bGUuc2V0QXR0cmlidXRlKCdkYXRhLXN0eWxlcycsICcnKTtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUodmlzaWJpbGl0eVN0eWxlLCBtZXRhQ2hhcnNldCA/IG1ldGFDaGFyc2V0Lm5leHRTaWJsaW5nIDogaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBkZWZlcnJlZCBjb25uZWN0ZWRDYWxsYmFja3Mgbm93IGFsbCBjb21wb25lbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgaXNCb290c3RyYXBwaW5nID0gZmFsc2U7XG4gICAgaWYgKGRlZmVycmVkQ29ubmVjdGVkQ2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBkZWZlcnJlZENvbm5lY3RlZENhbGxiYWNrcy5tYXAoaG9zdCA9PiBob3N0LmNvbm5lY3RlZENhbGxiYWNrKCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAge1xuICAgICAgICAgICAgcGx0LmptcCgoKSA9PiAoYXBwTG9hZEZhbGxiYWNrID0gc2V0VGltZW91dChhcHBEaWRMb2FkLCAzMCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBGYWxsYmFjayBhcHBMb2FkIGV2ZW50XG4gICAgZW5kQm9vdHN0cmFwKCk7XG59O1xuY29uc3QgaG9zdFJlZnMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgZ2V0SG9zdFJlZiA9IChyZWYpID0+IGhvc3RSZWZzLmdldChyZWYpO1xuY29uc3QgcmVnaXN0ZXJJbnN0YW5jZSA9IChsYXp5SW5zdGFuY2UsIGhvc3RSZWYpID0+IGhvc3RSZWZzLnNldCgoaG9zdFJlZi4kbGF6eUluc3RhbmNlJCA9IGxhenlJbnN0YW5jZSksIGhvc3RSZWYpO1xuY29uc3QgcmVnaXN0ZXJIb3N0ID0gKGVsbSwgY21wTWV0YSkgPT4ge1xuICAgIGNvbnN0IGhvc3RSZWYgPSB7XG4gICAgICAgICRmbGFncyQ6IDAsXG4gICAgICAgICRob3N0RWxlbWVudCQ6IGVsbSxcbiAgICAgICAgJGNtcE1ldGEkOiBjbXBNZXRhLFxuICAgICAgICAkaW5zdGFuY2VWYWx1ZXMkOiBuZXcgTWFwKCksXG4gICAgfTtcbiAgICB7XG4gICAgICAgIGhvc3RSZWYuJG9uUmVhZHlQcm9taXNlJCA9IG5ldyBQcm9taXNlKHIgPT4gKGhvc3RSZWYuJG9uUmVhZHlSZXNvbHZlJCA9IHIpKTtcbiAgICAgICAgZWxtWydzLXAnXSA9IFtdO1xuICAgICAgICBlbG1bJ3MtcmMnXSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gaG9zdFJlZnMuc2V0KGVsbSwgaG9zdFJlZik7XG59O1xuY29uc3QgaXNNZW1iZXJJbkVsZW1lbnQgPSAoZWxtLCBtZW1iZXJOYW1lKSA9PiBtZW1iZXJOYW1lIGluIGVsbTtcbmNvbnN0IGNvbnNvbGVFcnJvciA9IChlKSA9PiBjb25zb2xlLmVycm9yKGUpO1xuY29uc3QgY21wTW9kdWxlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hcCgpO1xuY29uc3QgbG9hZE1vZHVsZSA9IChjbXBNZXRhLCBob3N0UmVmLCBobXJWZXJzaW9uSWQpID0+IHtcbiAgICAvLyBsb2FkTW9kdWxlSW1wb3J0XG4gICAgY29uc3QgZXhwb3J0TmFtZSA9IGNtcE1ldGEuJHRhZ05hbWUkLnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgICBjb25zdCBidW5kbGVJZCA9ICggY21wTWV0YS4kbGF6eUJ1bmRsZUlkcyQpO1xuICAgIGNvbnN0IG1vZHVsZSA9ICBjbXBNb2R1bGVzLmdldChidW5kbGVJZCkgO1xuICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgcmV0dXJuIG1vZHVsZVtleHBvcnROYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGltcG9ydChcbiAgICAvKiB3ZWJwYWNrSW5jbHVkZTogL1xcLmVudHJ5XFwuanMkLyAqL1xuICAgIC8qIHdlYnBhY2tFeGNsdWRlOiAvXFwuc3lzdGVtXFwuZW50cnlcXC5qcyQvICovXG4gICAgLyogd2VicGFja01vZGU6IFwibGF6eVwiICovXG4gICAgYC4vJHtidW5kbGVJZH0uZW50cnkuanMkeyAnJ31gKS50aGVuKGltcG9ydGVkTW9kdWxlID0+IHtcbiAgICAgICAge1xuICAgICAgICAgICAgY21wTW9kdWxlcy5zZXQoYnVuZGxlSWQsIGltcG9ydGVkTW9kdWxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW1wb3J0ZWRNb2R1bGVbZXhwb3J0TmFtZV07XG4gICAgfSwgY29uc29sZUVycm9yKTtcbn07XG5jb25zdCBzdHlsZXMgPSBuZXcgTWFwKCk7XG5jb25zdCBxdWV1ZURvbVJlYWRzID0gW107XG5jb25zdCBxdWV1ZURvbVdyaXRlcyA9IFtdO1xuY29uc3QgcXVldWVUYXNrID0gKHF1ZXVlLCB3cml0ZSkgPT4gKGNiKSA9PiB7XG4gICAgcXVldWUucHVzaChjYik7XG4gICAgaWYgKCFxdWV1ZVBlbmRpbmcpIHtcbiAgICAgICAgcXVldWVQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHdyaXRlICYmIHBsdC4kZmxhZ3MkICYgNCAvKiBxdWV1ZVN5bmMgKi8pIHtcbiAgICAgICAgICAgIG5leHRUaWNrKGZsdXNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsdC5yYWYoZmx1c2gpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IGNvbnN1bWUgPSAocXVldWUpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBxdWV1ZVtpXShwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xufTtcbmNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIC8vIGFsd2F5cyBmb3JjZSBhIGJ1bmNoIG9mIG1lZGl1bSBjYWxsYmFja3MgdG8gcnVuLCBidXQgc3RpbGwgaGF2ZVxuICAgIC8vIGEgdGhyb3R0bGUgb24gaG93IG1hbnkgY2FuIHJ1biBpbiBhIGNlcnRhaW4gdGltZVxuICAgIC8vIERPTSBSRUFEUyEhIVxuICAgIGNvbnN1bWUocXVldWVEb21SZWFkcyk7XG4gICAgLy8gRE9NIFdSSVRFUyEhIVxuICAgIHtcbiAgICAgICAgY29uc3VtZShxdWV1ZURvbVdyaXRlcyk7XG4gICAgICAgIGlmICgocXVldWVQZW5kaW5nID0gcXVldWVEb21SZWFkcy5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgLy8gc3RpbGwgbW9yZSB0byBkbyB5ZXQsIGJ1dCB3ZSd2ZSBydW4gb3V0IG9mIHRpbWVcbiAgICAgICAgICAgIC8vIGxldCdzIGxldCB0aGlzIHRoaW5nIGNvb2wgb2ZmIGFuZCB0cnkgYWdhaW4gaW4gdGhlIG5leHQgdGlja1xuICAgICAgICAgICAgcGx0LnJhZihmbHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgbmV4dFRpY2sgPSAvKkBfX1BVUkVfXyovIChjYikgPT4gcHJvbWlzZVJlc29sdmUoKS50aGVuKGNiKTtcbmNvbnN0IHdyaXRlVGFzayA9IC8qQF9fUFVSRV9fKi8gcXVldWVUYXNrKHF1ZXVlRG9tV3JpdGVzLCB0cnVlKTtcbmNvbnN0IHBhdGNoRXNtID0gKCkgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoICEoQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoJ2NvbG9yJywgJ3ZhcigtLWMpJykpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcInBvbHlmaWxscy1jc3Mtc2hpbVwiICovICcuL2Nzcy1zaGltLTMzMzNlZDFmLmpzJykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoKHBsdC4kY3NzU2hpbSQgPSB3aW4uX19jc3NzaGltKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwbHQuJGNzc1NoaW0kLmkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGZvciBiZXR0ZXIgbWluaWZpY2F0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoKTtcbn07XG5jb25zdCBwYXRjaEJyb3dzZXIgPSAoKSA9PiB7XG4gICAge1xuICAgICAgICAvLyBzaGltIGNzcyB2YXJzXG4gICAgICAgIHBsdC4kY3NzU2hpbSQgPSB3aW4uX19jc3NzaGltO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc2NyaXB0RWxtID0gIEFycmF5LmZyb20oZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpKS5maW5kKHMgPT4gbmV3IFJlZ0V4cChgXFwvJHtOQU1FU1BBQ0V9KFxcXFwuZXNtKT9cXFxcLmpzKCR8XFxcXD98IylgKS50ZXN0KHMuc3JjKSB8fCBzLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGVuY2lsLW5hbWVzcGFjZScpID09PSBOQU1FU1BBQ0UpXG4gICAgICAgIDtcbiAgICBjb25zdCBvcHRzID0gIHNjcmlwdEVsbVsnZGF0YS1vcHRzJ10gfHwge30gO1xuICAgIGlmICggJ29uYmVmb3JlbG9hZCcgaW4gc2NyaXB0RWxtICYmICFoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uIC8qIElTX0VTTV9CVUlMRCAqLykge1xuICAgICAgICAvLyBTYWZhcmkgPCB2MTEgc3VwcG9ydDogVGhpcyBJRiBpcyB0cnVlIGlmIGl0J3MgU2FmYXJpIGJlbG93IHYxMS5cbiAgICAgICAgLy8gVGhpcyBmbiBjYW5ub3QgdXNlIGFzeW5jL2F3YWl0IHNpbmNlIFNhZmFyaSBkaWRuJ3Qgc3VwcG9ydCBpdCB1bnRpbCB2MTEsXG4gICAgICAgIC8vIGhvd2V2ZXIsIFNhZmFyaSAxMCBkaWQgc3VwcG9ydCBtb2R1bGVzLiBTYWZhcmkgMTAgYWxzbyBkaWRuJ3Qgc3VwcG9ydCBcIm5vbW9kdWxlXCIsXG4gICAgICAgIC8vIHNvIGJvdGggdGhlIEVTTSBmaWxlIGFuZCBub21vZHVsZSBmaWxlIHdvdWxkIGdldCBkb3dubG9hZGVkLiBPbmx5IFNhZmFyaVxuICAgICAgICAvLyBoYXMgJ29uYmVmb3JlbG9hZCcgaW4gdGhlIHNjcmlwdCwgYW5kIFwiaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvblwiIHdhcyBhZGRlZFxuICAgICAgICAvLyB0byBTYWZhcmkgaW4gdjExLiBSZXR1cm4gYSBub29wIHRoZW4oKSBzbyB0aGUgYXN5bmMvYXdhaXQgRVNNIGNvZGUgZG9lc24ndCBjb250aW51ZS5cbiAgICAgICAgLy8gSVNfRVNNX0JVSUxEIGlzIHJlcGxhY2VkIGF0IGJ1aWxkIHRpbWUgc28gdGhpcyBjaGVjayBkb2Vzbid0IGhhcHBlbiBpbiBzeXN0ZW1qcyBidWlsZHMuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aGVuKCkge1xuICAgICAgICAgICAgICAgIC8qIHByb21pc2Ugbm9vcCAqL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAge1xuICAgICAgICBvcHRzLnJlc291cmNlc1VybCA9IG5ldyBVUkwoJy4nLCBuZXcgVVJMKHNjcmlwdEVsbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzb3VyY2VzLXVybCcpIHx8IHNjcmlwdEVsbS5zcmMsIHdpbi5sb2NhdGlvbi5ocmVmKSkuaHJlZjtcbiAgICAgICAge1xuICAgICAgICAgICAgcGF0Y2hEeW5hbWljSW1wb3J0KG9wdHMucmVzb3VyY2VzVXJsLCBzY3JpcHRFbG0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICggIXdpbi5jdXN0b21FbGVtZW50cykge1xuICAgICAgICAgICAgLy8gbW9kdWxlIHN1cHBvcnQsIGJ1dCBubyBjdXN0b20gZWxlbWVudHMgc3VwcG9ydCAoT2xkIEVkZ2UpXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXR1cm4gaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwicG9seWZpbGxzLWRvbVwiICovICcuL2RvbS1mODc4OThmZi5qcycpLnRoZW4oKCkgPT4gb3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKG9wdHMpO1xufTtcbmNvbnN0IHBhdGNoRHluYW1pY0ltcG9ydCA9IChiYXNlLCBvcmdTY3JpcHRFbG0pID0+IHtcbiAgICBjb25zdCBpbXBvcnRGdW5jdGlvbk5hbWUgPSBnZXREeW5hbWljSW1wb3J0RnVuY3Rpb24oTkFNRVNQQUNFKTtcbiAgICB0cnkge1xuICAgICAgICAvLyB0ZXN0IGlmIHRoaXMgYnJvd3NlciBzdXBwb3J0cyBkeW5hbWljIGltcG9ydHNcbiAgICAgICAgLy8gVGhlcmUgaXMgYSBjYWNoaW5nIGlzc3VlIGluIFY4LCB0aGF0IGJyZWFrcyB1c2luZyBpbXBvcnQoKSBpbiBGdW5jdGlvblxuICAgICAgICAvLyBCeSBnZW5lcmF0aW5nIGEgcmFuZG9tIHN0cmluZywgd2UgY2FuIHdvcmthcm91bmQgaXRcbiAgICAgICAgLy8gQ2hlY2sgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTkwODEwIGZvciBtb3JlIGluZm9cbiAgICAgICAgd2luW2ltcG9ydEZ1bmN0aW9uTmFtZV0gPSBuZXcgRnVuY3Rpb24oJ3cnLCBgcmV0dXJuIGltcG9ydCh3KTsvLyR7TWF0aC5yYW5kb20oKX1gKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gdGhpcyBzaGltIGlzIHNwZWNpZmljYWxseSBmb3IgYnJvd3NlcnMgdGhhdCBkbyBzdXBwb3J0IFwiZXNtXCIgaW1wb3J0c1xuICAgICAgICAvLyBob3dldmVyLCB0aGV5IGRvIE5PVCBzdXBwb3J0IFwiZHluYW1pY1wiIGltcG9ydHNcbiAgICAgICAgLy8gYmFzaWNhbGx5IHRoaXMgY29kZSBpcyBmb3Igb2xkIEVkZ2UsIHYxOCBhbmQgYmVsb3dcbiAgICAgICAgY29uc3QgbW9kdWxlTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB3aW5baW1wb3J0RnVuY3Rpb25OYW1lXSA9IChzcmMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoc3JjLCBiYXNlKS5ocmVmO1xuICAgICAgICAgICAgbGV0IG1vZCA9IG1vZHVsZU1hcC5nZXQodXJsKTtcbiAgICAgICAgICAgIGlmICghbW9kKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC50eXBlID0gJ21vZHVsZSc7XG4gICAgICAgICAgICAgICAgc2NyaXB0LmNyb3NzT3JpZ2luID0gb3JnU2NyaXB0RWxtLmNyb3NzT3JpZ2luO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtgaW1wb3J0ICogYXMgbSBmcm9tICcke3VybH0nOyB3aW5kb3cuJHtpbXBvcnRGdW5jdGlvbk5hbWV9Lm0gPSBtO2BdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JyB9KSk7XG4gICAgICAgICAgICAgICAgbW9kID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdpbltpbXBvcnRGdW5jdGlvbk5hbWVdLm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZHVsZU1hcC5zZXQodXJsLCBtb2QpO1xuICAgICAgICAgICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW9kO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IEhvc3QgYXMgSCwgcGF0Y2hFc20gYXMgYSwgYm9vdHN0cmFwTGF6eSBhcyBiLCBoLCBwYXRjaEJyb3dzZXIgYXMgcCwgcmVnaXN0ZXJJbnN0YW5jZSBhcyByIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImF4MGZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI1QlliXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiNTg3OFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkxxTHNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIzeVlNXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiNlU3aVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInNWRmJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJtOUxQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiaUtFK1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlpVZEdcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIzdm9IXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTjR6M1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkdGcHRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIra1k3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiYVlTclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkRmaE1cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJMSk9yXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwicHUzb1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImwxQzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJDVU1RXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibFptM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjFNdS9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ0UWJQXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiRWUyWFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkFSdWFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI5SmhOXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiUGpaWFwiKTsiLCJpbXBvcnQgJ0BzdG9yeWJvb2svd2ViLWNvbXBvbmVudHMnOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiL1Fvc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkpZK0NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJQdUl4XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiZFNhR1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImhRaW5cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCI3bm1UXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiTEo3ZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkkyZktcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJEWTQ3XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiM2twOVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIi9iYzJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCIvSnVSXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiK0J4dlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIm11RnhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJXY2k2XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiV29SVVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIm8zZlNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJKbVRpXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwieGFpUlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIlNsRC9cIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJNb25uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiZm1OUFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcInVGWGpcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJWMElXXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiT0NTbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImtBNHJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJCbG02XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwic3N2VVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcImIyZTNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJmUlYxXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwibWFqOFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIkY2M2lcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJIODdKXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwiUzNwQVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIk8xU2NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJ6RjVuXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2NsaWVudEFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvdGFyb21vcmltb3RvL3Byb2plY3RzL2dlbmVyby9nZW5lcm8tZGVzaWduLXN5c3RlbS9ub2RlX21vZHVsZXMvQHN0b3J5Ym9vay9jbGllbnQtYXBpXCIpO1xuXG52YXIgX2NsaWVudExvZ2dlciA9IHJlcXVpcmUoXCIvVXNlcnMvdGFyb21vcmltb3RvL3Byb2plY3RzL2dlbmVyby9nZW5lcm8tZGVzaWduLXN5c3RlbS9ub2RlX21vZHVsZXMvQHN0b3J5Ym9vay9jbGllbnQtbG9nZ2VyXCIpO1xuXG52YXIgX2NvbmZpZ0ZpbGVuYW1lID0gcmVxdWlyZShcIi9Vc2Vycy90YXJvbW9yaW1vdG8vcHJvamVjdHMvZ2VuZXJvL2dlbmVyby1kZXNpZ24tc3lzdGVtLy5zdG9yeWJvb2svcHJldmlldy5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJncyB8fCBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXMpIHtcbiAgX2NsaWVudExvZ2dlci5sb2dnZXIud2FybignSW52YWxpZCBhcmdzL2FyZ1R5cGVzIGluIGNvbmZpZywgaWdub3JpbmcuJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgIGFyZ3M6IF9jb25maWdGaWxlbmFtZS5hcmdzLFxuICAgIGFyZ1R5cGVzOiBfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNcbiAgfSkpO1xufVxuXG5pZiAoX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmRlY29yYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoZGVjb3JhdG9yKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZERlY29yYXRvcikoZGVjb3JhdG9yKTtcbiAgfSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJncyB8fCBfY29uZmlnRmlsZW5hbWUuZ2xvYmFsQXJnVHlwZXMpIHtcbiAgKDAsIF9jbGllbnRBcGkuYWRkUGFyYW1ldGVycykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnRmlsZW5hbWUucGFyYW1ldGVycyksIHt9LCB7XG4gICAgZ2xvYmFsQXJnczogX2NvbmZpZ0ZpbGVuYW1lLmdsb2JhbEFyZ3MsXG4gICAgZ2xvYmFsQXJnVHlwZXM6IF9jb25maWdGaWxlbmFtZS5nbG9iYWxBcmdUeXBlc1xuICB9KSk7XG59XG5cbmlmIChfY29uZmlnRmlsZW5hbWUuYXJnVHlwZXNFbmhhbmNlcnMpIHtcbiAgX2NvbmZpZ0ZpbGVuYW1lLmFyZ1R5cGVzRW5oYW5jZXJzLmZvckVhY2goZnVuY3Rpb24gKGVuaGFuY2VyKSB7XG4gICAgcmV0dXJuICgwLCBfY2xpZW50QXBpLmFkZEFyZ1R5cGVzRW5oYW5jZXIpKGVuaGFuY2VyKTtcbiAgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygwKSkoXCJjdDgwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMCkpKFwib0Q0dFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKShcIjJzWjdcIik7IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0xMi0xIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9pbmRleC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiBOT1RFOiBVc2UgcGxhaW4gY3NzIGZvciBub3cuIFN3aXRjaCB0byB1c2luZyBTYXNzIG9uY2Ugc29tZW9uZSBnZXQncyBpdCB0byBsb2FkIGluIHN0b3J5Ym9vayBwcmV2aWV3IGlmcmFtZS4gKi9cXG5cXG4vKipcXG4gKiBOYW1pbmcgc2NoZW1lIGZvciB2YXJpYWJsZXMgaXMgYC0tY29tcG9uZW50LW5hbWUtc2l6ZS1wcm9wZXJ0eS1tb2RpZmllcmAuXFxuICovXFxuXFxuOnJvb3Qge1xcbiAgLyogQ29sb3JzICovXFxuICAtLWNvbG9yLXByaW1hcnk6ICMwMGEwNmU7XFxuICAtLWNvbG9yLXNlY29uZGFyeTogIzAwYTNiNztcXG4gIC0tYm9yZGVyLWNvbG9yLWxpZ2h0OiAjZGRkZGRkO1xcbiAgLS1iYWNrZ3JvdW5kLWNvbG9yLXByaW1hcnk6ICNlZWVlZWU7XFxuICAtLWJhY2tncm91bmQtY29sb3Itc2Vjb25kYXJ5OiAjZWVlZWVlO1xcbiAgLS10ZXh0LWNvbG9yLXByaW1hcnk6ICMzMzMwMzE7XFxuICAvKiBUT0RPOiBhbGwgY29sb3JzIGhlcmUgYW5kIHVzZSB0aGVtIGluIHRoZSBjb2xvciBkZWZpbml0aW9ucyBpbiB0aGlzIGZpbGUuICovXFxuXFxuICAvKiBTcGFjaW5nICovXFxuICAtLXNwYWNpbmcteHh4czogNHB4O1xcbiAgLS1zcGFjaW5nLXh4czogOHB4O1xcbiAgLS1zcGFjaW5nLXhzOiAxMnB4O1xcbiAgLS1zcGFjaW5nLXM6IDE2cHg7XFxuICAtLXNwYWNpbmctbTogMjRweDtcXG4gIC0tc3BhY2luZy1sOiAzMnB4O1xcbiAgLS1zcGFjaW5nLXhsOiA0MHB4O1xcbiAgLS1zcGFjaW5nLXh4bDogNDhweDtcXG5cXG4gIC8qIEJvZHkgKi9cXG4gIC0tYm9keS1mb250LWZhbWlseTogR2lscm95LCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgLS1ib2R5LWJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3ItcHJpbWFyeSk7XFxuICAtLWJvZHktdGV4dC1jb2xvcjogdmFyKC0tdGV4dC1jb2xvci1wcmltYXJ5KTtcXG5cXG4gIC8qIEhlYWRpbmdzICovXFxuICAtLWhlYWRpbmctZm9udC1mYW1pbHk6IEdpbHJveSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcXG5cXG4gIC8qIExhYmVscyAqL1xcbiAgLS1sYWJlbC1mb250LWZhbWlseTogR2lscm95LCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgLS1sYWJlbC1zLWZvbnQtd2VpZ2h0OiA2MDA7XFxuICAtLWxhYmVsLW0tZm9udC13ZWlnaHQ6IDUwMDtcXG4gIC0tbGFiZWwtbC1mb250LXdlaWdodDogNDAwO1xcbiAgLS1sYWJlbC1zLWZvbnQtc2l6ZTogMTBweDtcXG4gIC0tbGFiZWwtbS1mb250LXNpemU6IDEycHg7XFxuICAtLWxhYmVsLWwtZm9udC1zaXplOiAxNnB4O1xcbiAgLS1sYWJlbC1zLWxldHRlci1zcGFjaW5nOiAwLjVweDtcXG4gIC0tbGFiZWwtbS1sZXR0ZXItc3BhY2luZzogMXB4O1xcbiAgLS1sYWJlbC1sLWxldHRlci1zcGFjaW5nOiAxLjI4cHg7XFxuXFxuICAvKiBUYWdzICovXFxuICAtLXRhZy1jb2xvcjogd2hpdGU7XFxuICAtLXRhZy1iYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gIC0tdGFnLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuXFxuICAvKiBCdXR0b25zICovXFxuICAtLWJ1dHRvbi1mb250LWZhbWlseTogR2lscm95LCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgLS1idXR0b24tY29sb3I6IHdoaXRlO1xcbiAgLS1idXR0b24tYmFja2dyb3VuZC1jb2xvcjogIzMzMzAzMTtcXG4gIC0tYnV0dG9uLWJhY2tncm91bmQtY29sb3ItaG92ZXI6ICM2NDY0NjQ7XFxuICAtLWJ1dHRvbi1mb250LXdlaWdodDogNTAwO1xcbiAgLS1idXR0b24tdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gIC0tYnV0dG9uLXMtbGV0dGVyLXNwYWNpbmc6IDEuNnB4O1xcbiAgLS1idXR0b24tbS1sZXR0ZXItc3BhY2luZzogMS4yOHB4O1xcbiAgLS1idXR0b24tbC1sZXR0ZXItc3BhY2luZzogMS4yOHB4O1xcbiAgLS1idXR0b24tYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgLS1idXR0b24tYm94LXNoYWRvdzogbm9uZTtcXG4gIC8qIFByZWNpc2UgdmVydGljYWwgcG9zaXRpb24gaXMgZGVwZW5kZW50IG9uIHRoZSBmb250LiBTbyB5b3UgbWlnaHQgbmVlZCB0byBhZGp1c3QgdGhpcy4gKi9cXG4gIC0tYnV0dG9uLXMtcGFkZGluZzogMTJweCAyNHB4IDhweCAyNHB4O1xcbiAgLS1idXR0b24tbS1wYWRkaW5nOiAxOHB4IDMycHggMTRweCAzMnB4O1xcbiAgLS1idXR0b24tbC1wYWRkaW5nOiAxOHB4IDMycHggMTRweCAzMnB4O1xcbiAgLS1idXR0b24tcy1mb250LXNpemU6IDE2cHg7XFxuICAtLWJ1dHRvbi1tLWZvbnQtc2l6ZTogMjBweDtcXG4gIC0tYnV0dG9uLWwtZm9udC1zaXplOiAyNHB4O1xcblxcbiAgLyogTmF2aWdhdGlvbiAqL1xcbiAgLS1uYXZpZ2F0aW9uLWNvbG9yOiBibGFjaztcXG4gIC0tbmF2aWdhdGlvbi1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIC0tbmF2aWdhdGlvbi1kZXNrdG9wLWhlaWdodDogMTAwcHg7XFxuICAtLW5hdmlnYXRpb24tbW9iaWxlLWhlaWdodDogNzBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9nZHMtYnV0dG9uXzIuZW50cnkuanNcIjogW1xuXHRcdDM4Myxcblx0XHQ2XG5cdF0sXG5cdFwiLi9nZHMtY2FyZF8yLmVudHJ5LmpzXCI6IFtcblx0XHQzODQsXG5cdFx0N1xuXHRdLFxuXHRcIi4vZ2RzLWxhYmVsLmVudHJ5LmpzXCI6IFtcblx0XHQzODUsXG5cdFx0OFxuXHRdLFxuXHRcIi4vZ2RzLWxpbmsuZW50cnkuanNcIjogW1xuXHRcdDM4Nixcblx0XHQ5XG5cdF0sXG5cdFwiLi9nZHMtbG9nby1ncmlkLWl0ZW0uZW50cnkuanNcIjogW1xuXHRcdDM4Nyxcblx0XHQxMFxuXHRdLFxuXHRcIi4vZ2RzLWxvZ28tZ3JpZC5lbnRyeS5qc1wiOiBbXG5cdFx0Mzg4LFxuXHRcdDExXG5cdF0sXG5cdFwiLi9nZHMtbWVkaWEtY2FyZC5lbnRyeS5qc1wiOiBbXG5cdFx0Mzg5LFxuXHRcdDEyXG5cdF0sXG5cdFwiLi9nZHMtbWVudS1pdGVtLmVudHJ5LmpzXCI6IFtcblx0XHQzOTAsXG5cdFx0MTNcblx0XSxcblx0XCIuL2dkcy1tZW51LmVudHJ5LmpzXCI6IFtcblx0XHQzOTEsXG5cdFx0MTRcblx0XSxcblx0XCIuL2dkcy1uYXZpZ2F0aW9uLmVudHJ5LmpzXCI6IFtcblx0XHQzOTIsXG5cdFx0MTVcblx0XSxcblx0XCIuL2dkcy10YWcuZW50cnkuanNcIjogW1xuXHRcdDM5Myxcblx0XHQxNlxuXHRdXG59O1xuZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dChyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHRcdHRocm93IGU7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgaWRzID0gbWFwW3JlcV0sIGlkID0gaWRzWzBdO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGlkc1sxXSkudGhlbihmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG5cdH0pO1xufVxud2VicGFja0FzeW5jQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0FzeW5jQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tBc3luY0NvbnRleHQuaWQgPSAzNjQ7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tBc3luY0NvbnRleHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfZnJhbWV3b3JrID0gcmVxdWlyZShcIkBzdG9yeWJvb2svd2ViLWNvbXBvbmVudHNcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxubW9kdWxlLl9TdG9yeWJvb2tQcmVzZXJ2ZURlY29yYXRvcnMgPSB0cnVlO1xuKDAsIF9mcmFtZXdvcmsuY29uZmlndXJlKShbcmVxdWlyZS5jb250ZXh0KCcuLi9zcmMnLCB0cnVlLCAvKD86KD8hXFwuKS4qP1xcLnN0b3JpZXNcXC5qcykkLyldLCBtb2R1bGUpOyIsInZhciBtYXAgPSB7XG5cdFwiLi9jb21wb25lbnRzL2dkcy1idXR0b24vZ2RzLWJ1dHRvbi5zdG9yaWVzLmpzXCI6IDM2Nyxcblx0XCIuL2NvbXBvbmVudHMvZ2RzLWNhcmQvZ2RzLWNhcmQuc3Rvcmllcy5qc1wiOiAzNjgsXG5cdFwiLi9jb21wb25lbnRzL2dkcy1oZWFkaW5nL2dkcy1oZWFkaW5nLnN0b3JpZXMuanNcIjogMzY5LFxuXHRcIi4vY29tcG9uZW50cy9nZHMtbGFiZWwvZ2RzLWxhYmVsLnN0b3JpZXMuanNcIjogMzcwLFxuXHRcIi4vY29tcG9uZW50cy9nZHMtbGluay9nZHMtbGluay5zdG9yaWVzLmpzXCI6IDM3MSxcblx0XCIuL2NvbXBvbmVudHMvZ2RzLWxvZ28tZ3JpZC9nZHMtbG9nby1ncmlkLnN0b3JpZXMuanNcIjogMzcyLFxuXHRcIi4vY29tcG9uZW50cy9nZHMtbWVkaWEtY2FyZC9nZHMtbWVkaWEtY2FyZC5zdG9yaWVzLmpzXCI6IDM3Myxcblx0XCIuL2NvbXBvbmVudHMvZ2RzLW1lbnUvZ2RzLW1lbnUuc3Rvcmllcy5qc1wiOiAzNzQsXG5cdFwiLi9jb21wb25lbnRzL2dkcy1uYXZpZ2F0aW9uL2dkcy1uYXZpZ2F0aW9uLnN0b3JpZXMuanNcIjogMzc1LFxuXHRcIi4vY29tcG9uZW50cy9nZHMtcGFyYWdyYXBoL2dkcy1wYXJhZ3JhcGguc3Rvcmllcy5qc1wiOiAzNzYsXG5cdFwiLi9jb21wb25lbnRzL2dkcy10YWcvZ2RzLXRhZy5zdG9yaWVzLmpzXCI6IDM3Nyxcblx0XCIuL3N0eWxlcy9zdHlsZS5zdG9yaWVzLmpzXCI6IDM3OFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDM2NjsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIC8vIFRoaXMgaXMgdGhlIGZvbGRlciB3aGVyZSB0aGlzIGNvbXBvbmVudCBzaG93cyBpbiBTdG9yeWJvb2suXFxuICB0aXRsZTogJ0F0b21pYyBFbGVtZW50cycsXFxufVxcblxcbmV4cG9ydCBjb25zdCBCdXR0b24gPSAoKSA9PiBodG1sYFxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uIHNpemU9XFxcInNcXFwiPkJhc2ljIEJ1dHRvbiBTPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uPkJhc2ljIERlZmF1bHQgQnV0dG9uIE08L2dkcy1idXR0b24+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1idXR0b24gbGVmdC1pY29uPVxcXCLina5cXFwiPkljb24gYXMgY2hhcmFjdGVyPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uIHJpZ2h0LWljb249XFxcIuKdrlxcXCIgcmlnaHQtaWNvbi1yb3RhdGU9XFxcIjkwXFxcIj5Sb3RhdGVkIGljb248L2dkcy1idXR0b24+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1idXR0b24gbGVmdC1pY29uPVxcXCLina5cXFwiIHJpZ2h0LWljb249XFxcIuKdr1xcXCI+Qm90aCBpY29uczwvZ2RzLWJ1dHRvbj5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbiBzaXplPVxcXCJzXFxcIiB0ZXh0IGxlZnQtaWNvbj1cXFwi4p6eXFxcIj5UZXh0IEJ1dHRvbiBTPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uIHNpemU9XFxcIm1cXFwiIHRleHQ+VGV4dCBCdXR0b24gTTwvZ2RzLWJ1dHRvbj5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbiBkaXNhYmxlZD5EaXNhYmxlZCBCdXR0b248L2dkcy1idXR0b24+XFxuICA8L3A+XFxuICA8Z2RzLXBhcmFncmFwaD5cXG4gICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cubWFydGluc3RvZWNrbGkuY2gvZm9udG1hcC9mb250bWFwLmh0bWxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5MaXN0IG9mIGljb24gbGlrZSBmb250czwvYT5cXG4gIDwvZ2RzLXBhcmFncmFwaD5cXG5gXFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJidXR0b25cIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIyLFwibGluZVwiOjh9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjozNn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMixcImxpbmVcIjo4fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjM2fX19O1xuICAgIFxuaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xuXG5leHBvcnQgZGVmYXVsdCB7cGFyYW1ldGVyczoge1wic3RvcnlTb3VyY2VcIjp7XCJzb3VyY2VcIjpcImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCdcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAvLyBUaGlzIGlzIHRoZSBmb2xkZXIgd2hlcmUgdGhpcyBjb21wb25lbnQgc2hvd3MgaW4gU3Rvcnlib29rLlxcbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxcbn1cXG5cXG5leHBvcnQgY29uc3QgQnV0dG9uID0gKCkgPT4gaHRtbGBcXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbiBzaXplPVxcXCJzXFxcIj5CYXNpYyBCdXR0b24gUzwvZ2RzLWJ1dHRvbj5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbj5CYXNpYyBEZWZhdWx0IEJ1dHRvbiBNPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uIGxlZnQtaWNvbj1cXFwi4p2uXFxcIj5JY29uIGFzIGNoYXJhY3RlcjwvZ2RzLWJ1dHRvbj5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbiByaWdodC1pY29uPVxcXCLina5cXFwiIHJpZ2h0LWljb24tcm90YXRlPVxcXCI5MFxcXCI+Um90YXRlZCBpY29uPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtYnV0dG9uIGxlZnQtaWNvbj1cXFwi4p2uXFxcIiByaWdodC1pY29uPVxcXCLina9cXFwiPkJvdGggaWNvbnM8L2dkcy1idXR0b24+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1idXR0b24gc2l6ZT1cXFwic1xcXCIgdGV4dCBsZWZ0LWljb249XFxcIuKenlxcXCI+VGV4dCBCdXR0b24gUzwvZ2RzLWJ1dHRvbj5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWJ1dHRvbiBzaXplPVxcXCJtXFxcIiB0ZXh0PlRleHQgQnV0dG9uIE08L2dkcy1idXR0b24+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1idXR0b24gZGlzYWJsZWQ+RGlzYWJsZWQgQnV0dG9uPC9nZHMtYnV0dG9uPlxcbiAgPC9wPlxcbiAgPGdkcy1wYXJhZ3JhcGg+XFxuICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lm1hcnRpbnN0b2Vja2xpLmNoL2ZvbnRtYXAvZm9udG1hcC5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TGlzdCBvZiBpY29uIGxpa2UgZm9udHM8L2E+XFxuICA8L2dkcy1wYXJhZ3JhcGg+XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiYnV0dG9uXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMixcImxpbmVcIjo4fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MzZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjIsXCJsaW5lXCI6OH0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjozNn19fX0sfSxcbiAgLy8gVGhpcyBpcyB0aGUgZm9sZGVyIHdoZXJlIHRoaXMgY29tcG9uZW50IHNob3dzIGluIFN0b3J5Ym9vay5cbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxufVxuXG5leHBvcnQgY29uc3QgQnV0dG9uID0gKCkgPT4gaHRtbGBcbiAgPHA+XG4gICAgPGdkcy1idXR0b24gc2l6ZT1cInNcIj5CYXNpYyBCdXR0b24gUzwvZ2RzLWJ1dHRvbj5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLWJ1dHRvbj5CYXNpYyBEZWZhdWx0IEJ1dHRvbiBNPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIGxlZnQtaWNvbj1cIuKdrlwiPkljb24gYXMgY2hhcmFjdGVyPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIHJpZ2h0LWljb249XCLina5cIiByaWdodC1pY29uLXJvdGF0ZT1cIjkwXCI+Um90YXRlZCBpY29uPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIGxlZnQtaWNvbj1cIuKdrlwiIHJpZ2h0LWljb249XCLina9cIj5Cb3RoIGljb25zPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIHNpemU9XCJzXCIgdGV4dCBsZWZ0LWljb249XCLinp5cIj5UZXh0IEJ1dHRvbiBTPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIHNpemU9XCJtXCIgdGV4dD5UZXh0IEJ1dHRvbiBNPC9nZHMtYnV0dG9uPlxuICA8L3A+XG4gIDxwPlxuICAgIDxnZHMtYnV0dG9uIGRpc2FibGVkPkRpc2FibGVkIEJ1dHRvbjwvZ2RzLWJ1dHRvbj5cbiAgPC9wPlxuICA8Z2RzLXBhcmFncmFwaD5cbiAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWFydGluc3RvZWNrbGkuY2gvZm9udG1hcC9mb250bWFwLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaXN0IG9mIGljb24gbGlrZSBmb250czwvYT5cbiAgPC9nZHMtcGFyYWdyYXBoPlxuYDsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udGFpbmVycycsXFxuICBjb21wb25lbnQ6ICdnZHMtY2FyZCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBDYXJkID0gKCkgPT4gaHRtbGBcXG4gIDxwPlxcbiAgICA8Z2RzLWNhcmQ+XFxuICAgICAgQSBjYXJkIHRoYXQgcmVuZGVycyBjb250ZW50IGluIGEgY29udGFpbmVyIHRoYXQgaGFzICogd2hpdGUgYmFja2dyb3VuZCBhbmQgYm9yZGVyIHNoYWRvd3MuIENvbWVzIHdpdGhvdXRcXG4gICAgICBwYWRkaW5nIGJ5IGRlZmF1bHQuXFxuICAgIDwvZ2RzLWNhcmQ+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1jYXJkIHN0eWxlPVxcXCJwYWRkaW5nOiA0MHB4O1xcXCI+XFxuICAgICAgV2l0aCBwYWRkaW5nXFxuICAgIDwvZ2RzLWNhcmQ+XFxuICA8L3A+XFxuYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiY2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIwLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjF9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29udGFpbmVycycsXFxuICBjb21wb25lbnQ6ICdnZHMtY2FyZCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBDYXJkID0gKCkgPT4gaHRtbGBcXG4gIDxwPlxcbiAgICA8Z2RzLWNhcmQ+XFxuICAgICAgQSBjYXJkIHRoYXQgcmVuZGVycyBjb250ZW50IGluIGEgY29udGFpbmVyIHRoYXQgaGFzICogd2hpdGUgYmFja2dyb3VuZCBhbmQgYm9yZGVyIHNoYWRvd3MuIENvbWVzIHdpdGhvdXRcXG4gICAgICBwYWRkaW5nIGJ5IGRlZmF1bHQuXFxuICAgIDwvZ2RzLWNhcmQ+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1jYXJkIHN0eWxlPVxcXCJwYWRkaW5nOiA0MHB4O1xcXCI+XFxuICAgICAgV2l0aCBwYWRkaW5nXFxuICAgIDwvZ2RzLWNhcmQ+XFxuICA8L3A+XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiY2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIxfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIwLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjF9fX19LH0sXG4gIHRpdGxlOiAnQ29udGFpbmVycycsXG4gIGNvbXBvbmVudDogJ2dkcy1jYXJkJyxcbn1cblxuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgQ2FyZCA9ICgpID0+IGh0bWxgXG4gIDxwPlxuICAgIDxnZHMtY2FyZD5cbiAgICAgIEEgY2FyZCB0aGF0IHJlbmRlcnMgY29udGVudCBpbiBhIGNvbnRhaW5lciB0aGF0IGhhcyAqIHdoaXRlIGJhY2tncm91bmQgYW5kIGJvcmRlciBzaGFkb3dzLiBDb21lcyB3aXRob3V0XG4gICAgICBwYWRkaW5nIGJ5IGRlZmF1bHQuXG4gICAgPC9nZHMtY2FyZD5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLWNhcmQgc3R5bGU9XCJwYWRkaW5nOiA0MHB4O1wiPlxuICAgICAgV2l0aCBwYWRkaW5nXG4gICAgPC9nZHMtY2FyZD5cbiAgPC9wPlxuYDsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1oZWFkaW5nJyxcXG59XFxuXFxuLy8gcHJldHRpZXItaWdub3JlXFxuZXhwb3J0IGNvbnN0IEhlYWRpbmcgPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcInh4bFxcXCI+WFhMIEhlYWRpbmc8L2dkcy1oZWFkaW5nPlxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcInhsXFxcIj5YTCBIZWFkaW5nPC9nZHMtaGVhZGluZz5cXG4gIDxnZHMtaGVhZGluZyBzaXplPVxcXCJsXFxcIj5MIEhlYWRpbmc8L2dkcy1oZWFkaW5nPlxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcIm1cXFwiPk0gSGVhZGluZzwvZ2RzLWhlYWRpbmc+XFxuICA8Z2RzLWhlYWRpbmcgc2l6ZT1cXFwic1xcXCI+UyBIZWFkaW5nPC9nZHMtaGVhZGluZz5cXG4gIDxnZHMtaGVhZGluZyBzaXplPVxcXCJsXFxcIiBhcz1cXFwiaDNcXFwiPkwgSGVhZGluZyByZW5kZXJlZCBhcyBoMzwvZ2RzLWhlYWRpbmc+XFxuYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wiaGVhZGluZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjMsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjE2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIzLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTZ9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1oZWFkaW5nJyxcXG59XFxuXFxuLy8gcHJldHRpZXItaWdub3JlXFxuZXhwb3J0IGNvbnN0IEhlYWRpbmcgPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcInh4bFxcXCI+WFhMIEhlYWRpbmc8L2dkcy1oZWFkaW5nPlxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcInhsXFxcIj5YTCBIZWFkaW5nPC9nZHMtaGVhZGluZz5cXG4gIDxnZHMtaGVhZGluZyBzaXplPVxcXCJsXFxcIj5MIEhlYWRpbmc8L2dkcy1oZWFkaW5nPlxcbiAgPGdkcy1oZWFkaW5nIHNpemU9XFxcIm1cXFwiPk0gSGVhZGluZzwvZ2RzLWhlYWRpbmc+XFxuICA8Z2RzLWhlYWRpbmcgc2l6ZT1cXFwic1xcXCI+UyBIZWFkaW5nPC9nZHMtaGVhZGluZz5cXG4gIDxnZHMtaGVhZGluZyBzaXplPVxcXCJsXFxcIiBhcz1cXFwiaDNcXFwiPkwgSGVhZGluZyByZW5kZXJlZCBhcyBoMzwvZ2RzLWhlYWRpbmc+XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wiaGVhZGluZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjMsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjE2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIzLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTZ9fX19LH0sXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcbiAgY29tcG9uZW50OiAnZ2RzLWhlYWRpbmcnLFxufVxuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBIZWFkaW5nID0gKCkgPT4gaHRtbGBcbiAgPGdkcy1oZWFkaW5nIHNpemU9XCJ4eGxcIj5YWEwgSGVhZGluZzwvZ2RzLWhlYWRpbmc+XG4gIDxnZHMtaGVhZGluZyBzaXplPVwieGxcIj5YTCBIZWFkaW5nPC9nZHMtaGVhZGluZz5cbiAgPGdkcy1oZWFkaW5nIHNpemU9XCJsXCI+TCBIZWFkaW5nPC9nZHMtaGVhZGluZz5cbiAgPGdkcy1oZWFkaW5nIHNpemU9XCJtXCI+TSBIZWFkaW5nPC9nZHMtaGVhZGluZz5cbiAgPGdkcy1oZWFkaW5nIHNpemU9XCJzXCI+UyBIZWFkaW5nPC9nZHMtaGVhZGluZz5cbiAgPGdkcy1oZWFkaW5nIHNpemU9XCJsXCIgYXM9XCJoM1wiPkwgSGVhZGluZyByZW5kZXJlZCBhcyBoMzwvZ2RzLWhlYWRpbmc+XG5gOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxcbiAgY29tcG9uZW50OiAnZ2RzLWxhYmVsJyxcXG59XFxuXFxuLy8gcHJldHRpZXItaWdub3JlXFxuZXhwb3J0IGNvbnN0IExhYmVsID0gKCkgPT4gaHRtbGBcXG4gIDxwPlxcbiAgICA8Z2RzLWxhYmVsIHNpemU9XFxcImxcXFwiPkwgTGFiZWw8L2dkcy1sYWJlbD5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWxhYmVsPk0gTGFiZWw8L2dkcy1sYWJlbD5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLWxhYmVsIHNpemU9XFxcInNcXFwiPlMgTGFiZWw8L2dkcy1sYWJlbD5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICBzb21lIHRleHQgPGdkcy1sYWJlbCBjb2xvcj1cXFwiYmx1ZVxcXCI+TGFiZWwgYXJlIGlubGluZSBhbmQgY2FuIHVzZSBjb2xvcjwvZ2RzLWxhYmVsPiBzb21lIHRleHRcXG4gIDwvcD5cXG5gXFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJsYWJlbFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjEsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIyfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIxLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjJ9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1sYWJlbCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBMYWJlbCA9ICgpID0+IGh0bWxgXFxuICA8cD5cXG4gICAgPGdkcy1sYWJlbCBzaXplPVxcXCJsXFxcIj5MIExhYmVsPC9nZHMtbGFiZWw+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1sYWJlbD5NIExhYmVsPC9nZHMtbGFiZWw+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1sYWJlbCBzaXplPVxcXCJzXFxcIj5TIExhYmVsPC9nZHMtbGFiZWw+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgc29tZSB0ZXh0IDxnZHMtbGFiZWwgY29sb3I9XFxcImJsdWVcXFwiPkxhYmVsIGFyZSBpbmxpbmUgYW5kIGNhbiB1c2UgY29sb3I8L2dkcy1sYWJlbD4gc29tZSB0ZXh0XFxuICA8L3A+XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wibGFiZWxcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIxLFwibGluZVwiOjl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoyMn0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMSxcImxpbmVcIjo5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIyfX19fSx9LFxuICB0aXRsZTogJ0F0b21pYyBFbGVtZW50cycsXG4gIGNvbXBvbmVudDogJ2dkcy1sYWJlbCcsXG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IExhYmVsID0gKCkgPT4gaHRtbGBcbiAgPHA+XG4gICAgPGdkcy1sYWJlbCBzaXplPVwibFwiPkwgTGFiZWw8L2dkcy1sYWJlbD5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLWxhYmVsPk0gTGFiZWw8L2dkcy1sYWJlbD5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLWxhYmVsIHNpemU9XCJzXCI+UyBMYWJlbDwvZ2RzLWxhYmVsPlxuICA8L3A+XG4gIDxwPlxuICAgIHNvbWUgdGV4dCA8Z2RzLWxhYmVsIGNvbG9yPVwiYmx1ZVwiPkxhYmVsIGFyZSBpbmxpbmUgYW5kIGNhbiB1c2UgY29sb3I8L2dkcy1sYWJlbD4gc29tZSB0ZXh0XG4gIDwvcD5cbmA7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCdcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICAvLyBUaGlzIGlzIHRoZSBmb2xkZXIgd2hlcmUgdGhpcyBjb21wb25lbnQgc2hvd3MgaW4gU3Rvcnlib29rLlxcbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxcbn1cXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgTGluayA9ICgpID0+IGh0bWxgXFxuICA8cD5cXG4gICAgPGdkcy1saW5rIGhyZWY9XFxcImh0dHBzOi8vd3d3LmdlbmVyby5maVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkJhc2ljIExpbms8L2dkcy1saW5rPlxcbiAgPC9wPlxcbiAgPHA+XFxuICAgIDxnZHMtbGluaz5MaW5rIHdpdGhvdXQgaHJlZjwvZ2RzLWxpbms+XFxuICA8L3A+XFxuYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wibGlua1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjE2fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjIwLFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTZ9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIC8vIFRoaXMgaXMgdGhlIGZvbGRlciB3aGVyZSB0aGlzIGNvbXBvbmVudCBzaG93cyBpbiBTdG9yeWJvb2suXFxuICB0aXRsZTogJ0F0b21pYyBFbGVtZW50cycsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBMaW5rID0gKCkgPT4gaHRtbGBcXG4gIDxwPlxcbiAgICA8Z2RzLWxpbmsgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ2VuZXJvLmZpXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+QmFzaWMgTGluazwvZ2RzLWxpbms+XFxuICA8L3A+XFxuICA8cD5cXG4gICAgPGdkcy1saW5rPkxpbmsgd2l0aG91dCBocmVmPC9nZHMtbGluaz5cXG4gIDwvcD5cXG5gXFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJsaW5rXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjo5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MTZ9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6OX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjoxNn19fX0sfSxcbiAgLy8gVGhpcyBpcyB0aGUgZm9sZGVyIHdoZXJlIHRoaXMgY29tcG9uZW50IHNob3dzIGluIFN0b3J5Ym9vay5cbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxufVxuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBMaW5rID0gKCkgPT4gaHRtbGBcbiAgPHA+XG4gICAgPGdkcy1saW5rIGhyZWY9XCJodHRwczovL3d3dy5nZW5lcm8uZmlcIiB0YXJnZXQ9XCJfYmxhbmtcIj5CYXNpYyBMaW5rPC9nZHMtbGluaz5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLWxpbms+TGluayB3aXRob3V0IGhyZWY8L2dkcy1saW5rPlxuICA8L3A+XG5gOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuaW1wb3J0IHsgZ2V0TW9ja0ltYWdlVXJsIH0gZnJvbSAnLi4vLi4vc3Rvcmllcy91dGlscydcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbnRhaW5lcnMnLFxcbiAgY29tcG9uZW50OiAnZ2RzLWxvZ28tZ3JpZCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmNvbnN0IGl0ZW0gPSBodG1sYDxnZHMtbG9nby1ncmlkLWl0ZW1cXG4gIGltYWdlLXVybD1cXFwiJHtnZXRNb2NrSW1hZ2VVcmwoJ2xvZ28nLCA0MDAsIDQwMCwgdHJ1ZSl9XFxcIlxcbiAgPjwvZ2RzLWxvZ28tZ3JpZC1pdGVtPmBcXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgTG9nb0dyaWQgPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1sb2dvLWdyaWQ+XFxuICAgIDxnZHMtbG9nby1ncmlkLWl0ZW1cXG4gICAgICBocmVmPVxcXCJodHRwczovL3d3dy5nZW5lcm8uZmlcXFwiXFxuICAgICAgaW1hZ2UtdXJsPVxcXCJpbWFnZXMvZ2VuZXJvLWxvZ28uc3ZnXFxcIlxcbiAgICA+PC9nZHMtbG9nby1ncmlkLWl0ZW0+XFxuICAgICR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX1cXG4gIDwvZ2RzLWxvZ28tZ3JpZD5cXG5gXFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJsb2dvLWdyaWRcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI0LFwibGluZVwiOjE2fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6MjR9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjQsXCJsaW5lXCI6MTZ9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjR9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmltcG9ydCB7IGdldE1vY2tJbWFnZVVybCB9IGZyb20gJy4uLy4uL3N0b3JpZXMvdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmltcG9ydCB7IGdldE1vY2tJbWFnZVVybCB9IGZyb20gJy4uLy4uL3N0b3JpZXMvdXRpbHMnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250YWluZXJzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1sb2dvLWdyaWQnLFxcbn1cXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5jb25zdCBpdGVtID0gaHRtbGA8Z2RzLWxvZ28tZ3JpZC1pdGVtXFxuICBpbWFnZS11cmw9XFxcIiR7Z2V0TW9ja0ltYWdlVXJsKCdsb2dvJywgNDAwLCA0MDAsIHRydWUpfVxcXCJcXG4gID48L2dkcy1sb2dvLWdyaWQtaXRlbT5gXFxuXFxuLy8gcHJldHRpZXItaWdub3JlXFxuZXhwb3J0IGNvbnN0IExvZ29HcmlkID0gKCkgPT4gaHRtbGBcXG4gIDxnZHMtbG9nby1ncmlkPlxcbiAgICA8Z2RzLWxvZ28tZ3JpZC1pdGVtXFxuICAgICAgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ2VuZXJvLmZpXFxcIlxcbiAgICAgIGltYWdlLXVybD1cXFwiaW1hZ2VzL2dlbmVyby1sb2dvLnN2Z1xcXCJcXG4gICAgPjwvZ2RzLWxvZ28tZ3JpZC1pdGVtPlxcbiAgICAke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19XFxuICA8L2dkcy1sb2dvLWdyaWQ+XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wibG9nby1ncmlkXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNCxcImxpbmVcIjoxNn0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjI0fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI0LFwibGluZVwiOjE2fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjI0fX19fSx9LFxuICB0aXRsZTogJ0NvbnRhaW5lcnMnLFxuICBjb21wb25lbnQ6ICdnZHMtbG9nby1ncmlkJyxcbn1cblxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBpdGVtID0gaHRtbGA8Z2RzLWxvZ28tZ3JpZC1pdGVtXG4gIGltYWdlLXVybD1cIiR7Z2V0TW9ja0ltYWdlVXJsKCdsb2dvJywgNDAwLCA0MDAsIHRydWUpfVwiXG4gID48L2dkcy1sb2dvLWdyaWQtaXRlbT5gXG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IExvZ29HcmlkID0gKCkgPT4gaHRtbGBcbiAgPGdkcy1sb2dvLWdyaWQ+XG4gICAgPGdkcy1sb2dvLWdyaWQtaXRlbVxuICAgICAgaHJlZj1cImh0dHBzOi8vd3d3LmdlbmVyby5maVwiXG4gICAgICBpbWFnZS11cmw9XCJpbWFnZXMvZ2VuZXJvLWxvZ28uc3ZnXCJcbiAgICA+PC9nZHMtbG9nby1ncmlkLWl0ZW0+XG4gICAgJHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfSR7aXRlbX0ke2l0ZW19JHtpdGVtfVxuICA8L2dkcy1sb2dvLWdyaWQ+XG5gOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuaW1wb3J0IHsgZ2V0TW9ja0ltYWdlVXJsIH0gZnJvbSAnLi4vLi4vc3Rvcmllcy91dGlscydcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbXBsZXggQ29tcG9uZW50cycsXFxuICBjb21wb25lbnQ6ICdnZHMtbWVkaWEtY2FyZCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBNZWRpYUNhcmQgPSAoKSA9PiBodG1sYFxcbiAgPHA+XFxuICAgIDxnZHMtbWVkaWEtY2FyZCBoZWFkbGluZT1cXFwiQ2FyZCBIZWFkbGluZVxcXCIgaW1hZ2UtdXJsPVxcXCIke2dldE1vY2tJbWFnZVVybCgncHJvZHVjdCcsIDUwMCwgNTAwKX1cXFwiPlxcbiAgICAgIDxnZHMtdGFnPkZpcnN0IFRhZzwvZ2RzLXRhZz5cXG4gICAgICA8Z2RzLXRhZyBocmVmPVxcXCJodHRwczovL3d3dy5nZW5lcm8uZmlcXFwiPlRhZyB3aXRoIGEgbGluazwvZ2RzLXRhZz5cXG4gICAgPC9nZHMtbWVkaWEtY2FyZD5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLW1lZGlhLWNhcmRcXG4gICAgICBoZWFkbGluZT1cXFwiQ2FyZCBIZWFkbGluZVxcXCJcXG4gICAgICBpbWFnZS11cmw9XFxcIiR7Z2V0TW9ja0ltYWdlVXJsKCdwcm9kdWN0JywgNTAwLCA1MDApfVxcXCJcXG4gICAgICBkZXNjcmlwdGlvbj1cXFwiTCBCb2R5OiBBIHNpbmdsZSBtaWNybyBzZXJ2aWNlIHBsYXRmb3JtIGZvciBmaXZlIG1lZGlhIHNpdGVzIGFuZCAxNiBtZWRpYSBicmFuZHMuXFxcIlxcbiAgICA+XFxuICAgICAgPGdkcy10YWc+Rmlyc3QgVGFnPC9nZHMtdGFnPlxcbiAgICAgIDxnZHMtdGFnIGhyZWY9XFxcImh0dHBzOi8vd3d3LmdlbmVyby5maVxcXCI+VGFnIHdpdGggYSBsaW5rPC9nZHMtdGFnPlxcbiAgICA8L2dkcy1tZWRpYS1jYXJkPlxcbiAgPC9wPlxcbiAgYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wibWVkaWEtY2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6MTF9LFwiZW5kTG9jXCI6e1wiY29sXCI6MyxcImxpbmVcIjoyOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjoxMX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MyxcImxpbmVcIjoyOH19fTtcbiAgICBcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCdcblxuaW1wb3J0IHsgZ2V0TW9ja0ltYWdlVXJsIH0gZnJvbSAnLi4vLi4vc3Rvcmllcy91dGlscydcblxuZXhwb3J0IGRlZmF1bHQge3BhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuaW1wb3J0IHsgZ2V0TW9ja0ltYWdlVXJsIH0gZnJvbSAnLi4vLi4vc3Rvcmllcy91dGlscydcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbXBsZXggQ29tcG9uZW50cycsXFxuICBjb21wb25lbnQ6ICdnZHMtbWVkaWEtY2FyZCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBNZWRpYUNhcmQgPSAoKSA9PiBodG1sYFxcbiAgPHA+XFxuICAgIDxnZHMtbWVkaWEtY2FyZCBoZWFkbGluZT1cXFwiQ2FyZCBIZWFkbGluZVxcXCIgaW1hZ2UtdXJsPVxcXCIke2dldE1vY2tJbWFnZVVybCgncHJvZHVjdCcsIDUwMCwgNTAwKX1cXFwiPlxcbiAgICAgIDxnZHMtdGFnPkZpcnN0IFRhZzwvZ2RzLXRhZz5cXG4gICAgICA8Z2RzLXRhZyBocmVmPVxcXCJodHRwczovL3d3dy5nZW5lcm8uZmlcXFwiPlRhZyB3aXRoIGEgbGluazwvZ2RzLXRhZz5cXG4gICAgPC9nZHMtbWVkaWEtY2FyZD5cXG4gIDwvcD5cXG4gIDxwPlxcbiAgICA8Z2RzLW1lZGlhLWNhcmRcXG4gICAgICBoZWFkbGluZT1cXFwiQ2FyZCBIZWFkbGluZVxcXCJcXG4gICAgICBpbWFnZS11cmw9XFxcIiR7Z2V0TW9ja0ltYWdlVXJsKCdwcm9kdWN0JywgNTAwLCA1MDApfVxcXCJcXG4gICAgICBkZXNjcmlwdGlvbj1cXFwiTCBCb2R5OiBBIHNpbmdsZSBtaWNybyBzZXJ2aWNlIHBsYXRmb3JtIGZvciBmaXZlIG1lZGlhIHNpdGVzIGFuZCAxNiBtZWRpYSBicmFuZHMuXFxcIlxcbiAgICA+XFxuICAgICAgPGdkcy10YWc+Rmlyc3QgVGFnPC9nZHMtdGFnPlxcbiAgICAgIDxnZHMtdGFnIGhyZWY9XFxcImh0dHBzOi8vd3d3LmdlbmVyby5maVxcXCI+VGFnIHdpdGggYSBsaW5rPC9nZHMtdGFnPlxcbiAgICA8L2dkcy1tZWRpYS1jYXJkPlxcbiAgPC9wPlxcbiAgYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wibWVkaWEtY2FyZFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6MTF9LFwiZW5kTG9jXCI6e1wiY29sXCI6MyxcImxpbmVcIjoyOH0sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjoxMX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MyxcImxpbmVcIjoyOH19fX0sfSxcbiAgdGl0bGU6ICdDb21wbGV4IENvbXBvbmVudHMnLFxuICBjb21wb25lbnQ6ICdnZHMtbWVkaWEtY2FyZCcsXG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IE1lZGlhQ2FyZCA9ICgpID0+IGh0bWxgXG4gIDxwPlxuICAgIDxnZHMtbWVkaWEtY2FyZCBoZWFkbGluZT1cIkNhcmQgSGVhZGxpbmVcIiBpbWFnZS11cmw9XCIke2dldE1vY2tJbWFnZVVybCgncHJvZHVjdCcsIDUwMCwgNTAwKX1cIj5cbiAgICAgIDxnZHMtdGFnPkZpcnN0IFRhZzwvZ2RzLXRhZz5cbiAgICAgIDxnZHMtdGFnIGhyZWY9XCJodHRwczovL3d3dy5nZW5lcm8uZmlcIj5UYWcgd2l0aCBhIGxpbms8L2dkcy10YWc+XG4gICAgPC9nZHMtbWVkaWEtY2FyZD5cbiAgPC9wPlxuICA8cD5cbiAgICA8Z2RzLW1lZGlhLWNhcmRcbiAgICAgIGhlYWRsaW5lPVwiQ2FyZCBIZWFkbGluZVwiXG4gICAgICBpbWFnZS11cmw9XCIke2dldE1vY2tJbWFnZVVybCgncHJvZHVjdCcsIDUwMCwgNTAwKX1cIlxuICAgICAgZGVzY3JpcHRpb249XCJMIEJvZHk6IEEgc2luZ2xlIG1pY3JvIHNlcnZpY2UgcGxhdGZvcm0gZm9yIGZpdmUgbWVkaWEgc2l0ZXMgYW5kIDE2IG1lZGlhIGJyYW5kcy5cIlxuICAgID5cbiAgICAgIDxnZHMtdGFnPkZpcnN0IFRhZzwvZ2RzLXRhZz5cbiAgICAgIDxnZHMtdGFnIGhyZWY9XCJodHRwczovL3d3dy5nZW5lcm8uZmlcIj5UYWcgd2l0aCBhIGxpbms8L2dkcy10YWc+XG4gICAgPC9nZHMtbWVkaWEtY2FyZD5cbiAgPC9wPlxuICBgOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250YWluZXJzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1tZW51JyxcXG59XFxuXFxuY29uc3QgZ2V0TWVudSA9IGRpcmVjdGlvbiA9PiBodG1sYFxcbiAgPGdkcy1tZW51IGRpcmVjdGlvbj1cXFwiJHtkaXJlY3Rpb259XFxcIj5cXG4gICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI2ZpcnN0XFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbT5GaXJzdCBpdGVtPC9nZHMtbWVudS1pdGVtPlxcbiAgICA8L2E+XFxuICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiMyXFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbSBhY3RpdmU+U2Vjb25kIGl0ZW08L2dkcy1tZW51LWl0ZW0+XFxuICAgIDwvYT5cXG4gICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI3Nob3J0XFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbT5TaG9ydDwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgPC9hPlxcbiAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjNFxcXCI+XFxuICAgICAgPGdkcy1tZW51LWl0ZW0+QW5kIHdpdGggw5bDhMOFPC9nZHMtbWVudS1pdGVtPlxcbiAgICA8L2E+XFxuICA8L2dkcy1tZW51PlxcbmBcXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgTWVudSA9ICgpID0+IGh0bWxgXFxuICA8Z2RzLXBhcmFncmFwaD5NZW51IGNhbiBhZGp1c3QgdG8gdGhlIHNjcmVlbiB3aWR0aC48L2dkcy1wYXJhZ3JhcGg+XFxuICAke2dldE1lbnUoKX1cXG4gIDxnZHMtcGFyYWdyYXBoPk1lbnUgYmUgZm9yY2VkIHRvIGhvcml6b250YWwuPC9nZHMtcGFyYWdyYXBoPlxcbiAgJHtnZXRNZW51KCdob3Jpem9udGFsJyl9XFxuICA8Z2RzLXBhcmFncmFwaD5NZW51IGJlIGZvcmNlZCB0byB2ZXJ0aWNhbC48L2dkcy1wYXJhZ3JhcGg+XFxuICAke2dldE1lbnUoJ3ZlcnRpY2FsJyl9XFxuYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wibWVudVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjozM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjozM319fTtcbiAgICBcbmltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCdcblxuZXhwb3J0IGRlZmF1bHQge3BhcmFtZXRlcnM6IHtcInN0b3J5U291cmNlXCI6e1wic291cmNlXCI6XCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdDb250YWluZXJzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1tZW51JyxcXG59XFxuXFxuY29uc3QgZ2V0TWVudSA9IGRpcmVjdGlvbiA9PiBodG1sYFxcbiAgPGdkcy1tZW51IGRpcmVjdGlvbj1cXFwiJHtkaXJlY3Rpb259XFxcIj5cXG4gICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI2ZpcnN0XFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbT5GaXJzdCBpdGVtPC9nZHMtbWVudS1pdGVtPlxcbiAgICA8L2E+XFxuICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiMyXFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbSBhY3RpdmU+U2Vjb25kIGl0ZW08L2dkcy1tZW51LWl0ZW0+XFxuICAgIDwvYT5cXG4gICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI3Nob3J0XFxcIj5cXG4gICAgICA8Z2RzLW1lbnUtaXRlbT5TaG9ydDwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgPC9hPlxcbiAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjNFxcXCI+XFxuICAgICAgPGdkcy1tZW51LWl0ZW0+QW5kIHdpdGggw5bDhMOFPC9nZHMtbWVudS1pdGVtPlxcbiAgICA8L2E+XFxuICA8L2dkcy1tZW51PlxcbmBcXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgTWVudSA9ICgpID0+IGh0bWxgXFxuICA8Z2RzLXBhcmFncmFwaD5NZW51IGNhbiBhZGp1c3QgdG8gdGhlIHNjcmVlbiB3aWR0aC48L2dkcy1wYXJhZ3JhcGg+XFxuICAke2dldE1lbnUoKX1cXG4gIDxnZHMtcGFyYWdyYXBoPk1lbnUgYmUgZm9yY2VkIHRvIGhvcml6b250YWwuPC9nZHMtcGFyYWdyYXBoPlxcbiAgJHtnZXRNZW51KCdob3Jpem9udGFsJyl9XFxuICA8Z2RzLXBhcmFncmFwaD5NZW51IGJlIGZvcmNlZCB0byB2ZXJ0aWNhbC48L2dkcy1wYXJhZ3JhcGg+XFxuICAke2dldE1lbnUoJ3ZlcnRpY2FsJyl9XFxuYFxcblwiLFwibG9jYXRpb25zTWFwXCI6e1wibWVudVwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjAsXCJsaW5lXCI6MjZ9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjozM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyMCxcImxpbmVcIjoyNn0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjozM319fX0sfSxcbiAgdGl0bGU6ICdDb250YWluZXJzJyxcbiAgY29tcG9uZW50OiAnZ2RzLW1lbnUnLFxufVxuXG5jb25zdCBnZXRNZW51ID0gZGlyZWN0aW9uID0+IGh0bWxgXG4gIDxnZHMtbWVudSBkaXJlY3Rpb249XCIke2RpcmVjdGlvbn1cIj5cbiAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZmlyc3RcIj5cbiAgICAgIDxnZHMtbWVudS1pdGVtPkZpcnN0IGl0ZW08L2dkcy1tZW51LWl0ZW0+XG4gICAgPC9hPlxuICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiMyXCI+XG4gICAgICA8Z2RzLW1lbnUtaXRlbSBhY3RpdmU+U2Vjb25kIGl0ZW08L2dkcy1tZW51LWl0ZW0+XG4gICAgPC9hPlxuICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiNzaG9ydFwiPlxuICAgICAgPGdkcy1tZW51LWl0ZW0+U2hvcnQ8L2dkcy1tZW51LWl0ZW0+XG4gICAgPC9hPlxuICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiM0XCI+XG4gICAgICA8Z2RzLW1lbnUtaXRlbT5BbmQgd2l0aCDDlsOEw4U8L2dkcy1tZW51LWl0ZW0+XG4gICAgPC9hPlxuICA8L2dkcy1tZW51PlxuYFxuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBNZW51ID0gKCkgPT4gaHRtbGBcbiAgPGdkcy1wYXJhZ3JhcGg+TWVudSBjYW4gYWRqdXN0IHRvIHRoZSBzY3JlZW4gd2lkdGguPC9nZHMtcGFyYWdyYXBoPlxuICAke2dldE1lbnUoKX1cbiAgPGdkcy1wYXJhZ3JhcGg+TWVudSBiZSBmb3JjZWQgdG8gaG9yaXpvbnRhbC48L2dkcy1wYXJhZ3JhcGg+XG4gICR7Z2V0TWVudSgnaG9yaXpvbnRhbCcpfVxuICA8Z2RzLXBhcmFncmFwaD5NZW51IGJlIGZvcmNlZCB0byB2ZXJ0aWNhbC48L2dkcy1wYXJhZ3JhcGg+XG4gICR7Z2V0TWVudSgndmVydGljYWwnKX1cbmA7IiwiXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgLy8gQHRzLW5vY2hlY2tcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX1NUT1JZX18gPSBcImltcG9ydCB7IGh0bWwgfSBmcm9tICdsaXQtaHRtbCdcXG5cXG5leHBvcnQgZGVmYXVsdCB7XFxuICB0aXRsZTogJ0NvbXBsZXggQ29tcG9uZW50cycsXFxuICBjb21wb25lbnQ6ICdnZHMtbmF2aWdhdGlvbicsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uID0gKCkgPT4gaHRtbGBcXG4gIDxnZHMtbmF2aWdhdGlvbj5cXG4gICAgPGEgc2xvdD1cXFwibG9nb1xcXCIgaHJlZj1cXFwiL1xcXCI+XFxuICAgICAgPGltZyBzcmM9XFxcImltYWdlcy9nZW5lcm8tbG9nby5wbmdcXFwiIC8+XFxuICAgIDwvYT5cXG4gICAgPGRpdiBzbG90PVxcXCJtZW51XFxcIj5cXG4gICAgICA8Z2RzLW1lbnUga2V5PVxcXCIxMjNcXFwiPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI2ZpcnN0XFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+Rmlyc3QgaXRlbTwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiMyXFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0gYWN0aXZlPlNlY29uZCBpdGVtPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI3Nob3J0XFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+U2hvcnQ8L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjNFxcXCI+XFxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPkFuZCB3aXRoIMOWw4TDhTwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2dkcy1tZW51PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBzbG90PVxcXCJkZXNrdG9wLWV4dGVuc2lvbnNcXFwiPlxcbiAgICAgIDxnZHMtbWVudSBrZXk9XFxcIjMyMVxcXCI+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjZmlcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GSTwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiNzZVxcXCI+XFxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPlNFPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI2VuXFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+RU48L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgPC9nZHMtbWVudT5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgc2xvdD1cXFwibW9iaWxlLWV4dGVuc2lvbnNcXFwiPlxcbiAgICAgIDxnZHMtbWVudSBrZXk9XFxcIjMyMVxcXCI+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjZmlcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GaW5uaXNoPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI3NlXFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+U3ZlcmdlPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI2VuXFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+RW5nbGlzaDwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2dkcy1tZW51PlxcbiAgICA8L2Rpdj5cXG4gIDwvZ2RzLW5hdmlnYXRpb24+XFxuICA8Z2RzLXBhcmFncmFwaD5OYXZpZ2F0aW9uIGFkanVzdHMgdG8gdGhlIHNjcmVlbiB3aWR0aC48L2dkcy1wYXJhZ3JhcGg+XFxuYFxcblwiO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fTE9DQVRJT05TX01BUF9fID0ge1wibmF2aWdhdGlvblwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjYsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjU4fSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI2LFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6NTh9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQ29tcGxleCBDb21wb25lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1uYXZpZ2F0aW9uJyxcXG59XFxuXFxuLy8gcHJldHRpZXItaWdub3JlXFxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb24gPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1uYXZpZ2F0aW9uPlxcbiAgICA8YSBzbG90PVxcXCJsb2dvXFxcIiBocmVmPVxcXCIvXFxcIj5cXG4gICAgICA8aW1nIHNyYz1cXFwiaW1hZ2VzL2dlbmVyby1sb2dvLnBuZ1xcXCIgLz5cXG4gICAgPC9hPlxcbiAgICA8ZGl2IHNsb3Q9XFxcIm1lbnVcXFwiPlxcbiAgICAgIDxnZHMtbWVudSBrZXk9XFxcIjEyM1xcXCI+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjZmlyc3RcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GaXJzdCBpdGVtPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiIzJcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbSBhY3RpdmU+U2Vjb25kIGl0ZW08L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjc2hvcnRcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5TaG9ydDwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiM0XFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+QW5kIHdpdGggw5bDhMOFPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgIDwvZ2RzLW1lbnU+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IHNsb3Q9XFxcImRlc2t0b3AtZXh0ZW5zaW9uc1xcXCI+XFxuICAgICAgPGdkcy1tZW51IGtleT1cXFwiMzIxXFxcIj5cXG4gICAgICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiNmaVxcXCI+XFxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPkZJPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPGEgc2xvdD1cXFwiaXRlbVxcXCIgaHJlZj1cXFwiI3NlXFxcIj5cXG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+U0U8L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjZW5cXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5FTjwvZ2RzLW1lbnUtaXRlbT5cXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2dkcy1tZW51PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBzbG90PVxcXCJtb2JpbGUtZXh0ZW5zaW9uc1xcXCI+XFxuICAgICAgPGdkcy1tZW51IGtleT1cXFwiMzIxXFxcIj5cXG4gICAgICAgIDxhIHNsb3Q9XFxcIml0ZW1cXFwiIGhyZWY9XFxcIiNmaVxcXCI+XFxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPkZpbm5pc2g8L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjc2VcXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5TdmVyZ2U8L2dkcy1tZW51LWl0ZW0+XFxuICAgICAgICA8L2E+XFxuICAgICAgICA8YSBzbG90PVxcXCJpdGVtXFxcIiBocmVmPVxcXCIjZW5cXFwiPlxcbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5FbmdsaXNoPC9nZHMtbWVudS1pdGVtPlxcbiAgICAgICAgPC9hPlxcbiAgICAgIDwvZ2RzLW1lbnU+XFxuICAgIDwvZGl2PlxcbiAgPC9nZHMtbmF2aWdhdGlvbj5cXG4gIDxnZHMtcGFyYWdyYXBoPk5hdmlnYXRpb24gYWRqdXN0cyB0byB0aGUgc2NyZWVuIHdpZHRoLjwvZ2RzLXBhcmFncmFwaD5cXG5gXFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJuYXZpZ2F0aW9uXCI6e1wic3RhcnRMb2NcIjp7XCJjb2xcIjoyNixcImxpbmVcIjo5fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6NTh9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjYsXCJsaW5lXCI6OX0sXCJlbmRCb2R5XCI6e1wiY29sXCI6MSxcImxpbmVcIjo1OH19fX0sfSxcbiAgdGl0bGU6ICdDb21wbGV4IENvbXBvbmVudHMnLFxuICBjb21wb25lbnQ6ICdnZHMtbmF2aWdhdGlvbicsXG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb24gPSAoKSA9PiBodG1sYFxuICA8Z2RzLW5hdmlnYXRpb24+XG4gICAgPGEgc2xvdD1cImxvZ29cIiBocmVmPVwiL1wiPlxuICAgICAgPGltZyBzcmM9XCJpbWFnZXMvZ2VuZXJvLWxvZ28ucG5nXCIgLz5cbiAgICA8L2E+XG4gICAgPGRpdiBzbG90PVwibWVudVwiPlxuICAgICAgPGdkcy1tZW51IGtleT1cIjEyM1wiPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZmlyc3RcIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GaXJzdCBpdGVtPC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiMyXCI+XG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0gYWN0aXZlPlNlY29uZCBpdGVtPC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiNzaG9ydFwiPlxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPlNob3J0PC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiM0XCI+XG4gICAgICAgICAgPGdkcy1tZW51LWl0ZW0+QW5kIHdpdGggw5bDhMOFPC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICA8L2dkcy1tZW51PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgc2xvdD1cImRlc2t0b3AtZXh0ZW5zaW9uc1wiPlxuICAgICAgPGdkcy1tZW51IGtleT1cIjMyMVwiPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZmlcIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GSTwvZ2RzLW1lbnUtaXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjc2VcIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5TRTwvZ2RzLW1lbnUtaXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZW5cIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5FTjwvZ2RzLW1lbnUtaXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgPC9nZHMtbWVudT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHNsb3Q9XCJtb2JpbGUtZXh0ZW5zaW9uc1wiPlxuICAgICAgPGdkcy1tZW51IGtleT1cIjMyMVwiPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZmlcIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5GaW5uaXNoPC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIHNsb3Q9XCJpdGVtXCIgaHJlZj1cIiNzZVwiPlxuICAgICAgICAgIDxnZHMtbWVudS1pdGVtPlN2ZXJnZTwvZ2RzLW1lbnUtaXRlbT5cbiAgICAgICAgPC9hPlxuICAgICAgICA8YSBzbG90PVwiaXRlbVwiIGhyZWY9XCIjZW5cIj5cbiAgICAgICAgICA8Z2RzLW1lbnUtaXRlbT5FbmdsaXNoPC9nZHMtbWVudS1pdGVtPlxuICAgICAgICA8L2E+XG4gICAgICA8L2dkcy1tZW51PlxuICAgIDwvZGl2PlxuICA8L2dkcy1uYXZpZ2F0aW9uPlxuICA8Z2RzLXBhcmFncmFwaD5OYXZpZ2F0aW9uIGFkanVzdHMgdG8gdGhlIHNjcmVlbiB3aWR0aC48L2dkcy1wYXJhZ3JhcGg+XG5gOyIsIlxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIC8vIEB0cy1ub2NoZWNrXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19TVE9SWV9fID0gXCJpbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgdGl0bGU6ICdBdG9taWMgRWxlbWVudHMnLFxcbiAgY29tcG9uZW50OiAnZ2RzLXBhcmFncmFwaCcsXFxufVxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBQYXJhZ3JhcGggPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1wYXJhZ3JhcGggc2l6ZT1cXFwibFxcXCI+TCBQYXJhZ3JhcGg8L2dkcy1wYXJhZ3JhcGg+XFxuICA8Z2RzLXBhcmFncmFwaCBzaXplPVxcXCJtXFxcIj5NIFBhcmFncmFwaDwvZ2RzLXBhcmFncmFwaD5cXG4gIDxnZHMtcGFyYWdyYXBoIHNpemU9XFxcInNcXFwiPlMgUGFyYWdyYXBoPC9nZHMtcGFyYWdyYXBoPlxcbmBcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInBhcmFncmFwaFwiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MjUsXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEzfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjI1LFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MTN9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1wYXJhZ3JhcGgnLFxcbn1cXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgUGFyYWdyYXBoID0gKCkgPT4gaHRtbGBcXG4gIDxnZHMtcGFyYWdyYXBoIHNpemU9XFxcImxcXFwiPkwgUGFyYWdyYXBoPC9nZHMtcGFyYWdyYXBoPlxcbiAgPGdkcy1wYXJhZ3JhcGggc2l6ZT1cXFwibVxcXCI+TSBQYXJhZ3JhcGg8L2dkcy1wYXJhZ3JhcGg+XFxuICA8Z2RzLXBhcmFncmFwaCBzaXplPVxcXCJzXFxcIj5TIFBhcmFncmFwaDwvZ2RzLXBhcmFncmFwaD5cXG5gXFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJwYXJhZ3JhcGhcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjI1LFwibGluZVwiOjl9LFwiZW5kTG9jXCI6e1wiY29sXCI6MSxcImxpbmVcIjoxM30sXCJzdGFydEJvZHlcIjp7XCJjb2xcIjoyNSxcImxpbmVcIjo5fSxcImVuZEJvZHlcIjp7XCJjb2xcIjoxLFwibGluZVwiOjEzfX19fSx9LFxuICB0aXRsZTogJ0F0b21pYyBFbGVtZW50cycsXG4gIGNvbXBvbmVudDogJ2dkcy1wYXJhZ3JhcGgnLFxufVxuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBQYXJhZ3JhcGggPSAoKSA9PiBodG1sYFxuICA8Z2RzLXBhcmFncmFwaCBzaXplPVwibFwiPkwgUGFyYWdyYXBoPC9nZHMtcGFyYWdyYXBoPlxuICA8Z2RzLXBhcmFncmFwaCBzaXplPVwibVwiPk0gUGFyYWdyYXBoPC9nZHMtcGFyYWdyYXBoPlxuICA8Z2RzLXBhcmFncmFwaCBzaXplPVwic1wiPlMgUGFyYWdyYXBoPC9nZHMtcGFyYWdyYXBoPlxuYDsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy10YWcnLFxcbn1cXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgVGFnID0gKCkgPT4gaHRtbGBcXG4gIDxzdHlsZT5cXG4gICAgLm92ZXJyaWRlIHtcXG4gICAgICAtLXRhZy1jb2xvcjogcmVkO1xcbiAgICAgIC0tdGFnLWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgIC0tdGFnLWJvcmRlci1jb2xvcjogcmVkO1xcbiAgICB9XFxuICA8L3N0eWxlPlxcbiAgPGdkcy10YWc+TGFiZWwgZm9yIGxhYmVscyBhbmQgdGFnczwvZ2RzLXRhZz5cXG4gIDxnZHMtdGFnIGhyZWY9XFxcImh0dHBzOi8vd3d3LmdlbmVyby5maVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkxhYmVsIHdpdGggYSBsaW5rPC9nZHMtdGFnPlxcbiAgPGdkcy10YWcgY2xhc3M9XFxcIm92ZXJyaWRlXFxcIj5MYWJlbCBjYW4gb3ZlcnJpZGUgY29sb3JzIGFuZCBib3JkZXJzPC9nZHMtdGFnPlxcbmBcXG5cIjtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHZhciBfX0xPQ0FUSU9OU19NQVBfXyA9IHtcInRhZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MTksXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIwfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjE5LFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjB9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy10YWcnLFxcbn1cXG5cXG4vLyBwcmV0dGllci1pZ25vcmVcXG5leHBvcnQgY29uc3QgVGFnID0gKCkgPT4gaHRtbGBcXG4gIDxzdHlsZT5cXG4gICAgLm92ZXJyaWRlIHtcXG4gICAgICAtLXRhZy1jb2xvcjogcmVkO1xcbiAgICAgIC0tdGFnLWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgIC0tdGFnLWJvcmRlci1jb2xvcjogcmVkO1xcbiAgICB9XFxuICA8L3N0eWxlPlxcbiAgPGdkcy10YWc+TGFiZWwgZm9yIGxhYmVscyBhbmQgdGFnczwvZ2RzLXRhZz5cXG4gIDxnZHMtdGFnIGhyZWY9XFxcImh0dHBzOi8vd3d3LmdlbmVyby5maVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkxhYmVsIHdpdGggYSBsaW5rPC9nZHMtdGFnPlxcbiAgPGdkcy10YWcgY2xhc3M9XFxcIm92ZXJyaWRlXFxcIj5MYWJlbCBjYW4gb3ZlcnJpZGUgY29sb3JzIGFuZCBib3JkZXJzPC9nZHMtdGFnPlxcbmBcXG5cIixcImxvY2F0aW9uc01hcFwiOntcInRhZ1wiOntcInN0YXJ0TG9jXCI6e1wiY29sXCI6MTksXCJsaW5lXCI6OX0sXCJlbmRMb2NcIjp7XCJjb2xcIjoxLFwibGluZVwiOjIwfSxcInN0YXJ0Qm9keVwiOntcImNvbFwiOjE5LFwibGluZVwiOjl9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6MjB9fX19LH0sXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcbiAgY29tcG9uZW50OiAnZ2RzLXRhZycsXG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0IGNvbnN0IFRhZyA9ICgpID0+IGh0bWxgXG4gIDxzdHlsZT5cbiAgICAub3ZlcnJpZGUge1xuICAgICAgLS10YWctY29sb3I6IHJlZDtcbiAgICAgIC0tdGFnLWJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgLS10YWctYm9yZGVyLWNvbG9yOiByZWQ7XG4gICAgfVxuICA8L3N0eWxlPlxuICA8Z2RzLXRhZz5MYWJlbCBmb3IgbGFiZWxzIGFuZCB0YWdzPC9nZHMtdGFnPlxuICA8Z2RzLXRhZyBocmVmPVwiaHR0cHM6Ly93d3cuZ2VuZXJvLmZpXCIgdGFyZ2V0PVwiX2JsYW5rXCI+TGFiZWwgd2l0aCBhIGxpbms8L2dkcy10YWc+XG4gIDxnZHMtdGFnIGNsYXNzPVwib3ZlcnJpZGVcIj5MYWJlbCBjYW4gb3ZlcnJpZGUgY29sb3JzIGFuZCBib3JkZXJzPC9nZHMtdGFnPlxuYDsiLCJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAvLyBAdHMtbm9jaGVja1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFyIF9fU1RPUllfXyA9IFwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1wYXJhZ3JhcGgnLFxcbn1cXG5cXG5jb25zdCBzdHlsZSA9IGBcXG4gIHBhZGRpbmc6IDIwcHg7XFxuICBtYXJnaW46IDIwcHg7XFxuICBjb2xvcjogd2hpdGU7XFxuYFxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBDb2xvcnMgPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1wYXJhZ3JhcGg+XFxuICAgIDxnZHMtY2FyZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7ICR7c3R5bGV9XFxcIj5cXG4gICAgICBQcmltYXJ5XFxuICAgIDwvZ2RzLWNhcmQ+XFxuICAgIDxnZHMtY2FyZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3Itc2Vjb25kYXJ5KTsgJHtzdHlsZX1cXFwiPlxcbiAgICAgIFNlY29uZGFyeVxcbiAgICA8L2dkcy1jYXJkPlxcbiAgICA8Z2RzLWNhcmQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IHZhcigtLWJvZHktYmFja2dyb3VuZC1jb2xvcik7ICR7c3R5bGV9IGNvbG9yOiBibGFjaztcXFwiPlxcbiAgICAgIEJvZHlcXG4gICAgPC9nZHMtY2FyZD5cXG4gIDwvZ2RzLXBhcmFncmFwaD5cXG5gXFxuXCI7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB2YXIgX19MT0NBVElPTlNfTUFQX18gPSB7XCJjb2xvcnNcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIyLFwibGluZVwiOjE1fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjIsXCJsaW5lXCI6MTV9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjd9fX07XG4gICAgXG5pbXBvcnQgeyBodG1sIH0gZnJvbSAnbGl0LWh0bWwnXG5cbmV4cG9ydCBkZWZhdWx0IHtwYXJhbWV0ZXJzOiB7XCJzdG9yeVNvdXJjZVwiOntcInNvdXJjZVwiOlwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdC1odG1sJ1xcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcXG4gIGNvbXBvbmVudDogJ2dkcy1wYXJhZ3JhcGgnLFxcbn1cXG5cXG5jb25zdCBzdHlsZSA9IGBcXG4gIHBhZGRpbmc6IDIwcHg7XFxuICBtYXJnaW46IDIwcHg7XFxuICBjb2xvcjogd2hpdGU7XFxuYFxcblxcbi8vIHByZXR0aWVyLWlnbm9yZVxcbmV4cG9ydCBjb25zdCBDb2xvcnMgPSAoKSA9PiBodG1sYFxcbiAgPGdkcy1wYXJhZ3JhcGg+XFxuICAgIDxnZHMtY2FyZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7ICR7c3R5bGV9XFxcIj5cXG4gICAgICBQcmltYXJ5XFxuICAgIDwvZ2RzLWNhcmQ+XFxuICAgIDxnZHMtY2FyZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3Itc2Vjb25kYXJ5KTsgJHtzdHlsZX1cXFwiPlxcbiAgICAgIFNlY29uZGFyeVxcbiAgICA8L2dkcy1jYXJkPlxcbiAgICA8Z2RzLWNhcmQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IHZhcigtLWJvZHktYmFja2dyb3VuZC1jb2xvcik7ICR7c3R5bGV9IGNvbG9yOiBibGFjaztcXFwiPlxcbiAgICAgIEJvZHlcXG4gICAgPC9nZHMtY2FyZD5cXG4gIDwvZ2RzLXBhcmFncmFwaD5cXG5gXFxuXCIsXCJsb2NhdGlvbnNNYXBcIjp7XCJjb2xvcnNcIjp7XCJzdGFydExvY1wiOntcImNvbFwiOjIyLFwibGluZVwiOjE1fSxcImVuZExvY1wiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjd9LFwic3RhcnRCb2R5XCI6e1wiY29sXCI6MjIsXCJsaW5lXCI6MTV9LFwiZW5kQm9keVwiOntcImNvbFwiOjEsXCJsaW5lXCI6Mjd9fX19LH0sXG4gIHRpdGxlOiAnQXRvbWljIEVsZW1lbnRzJyxcbiAgY29tcG9uZW50OiAnZ2RzLXBhcmFncmFwaCcsXG59XG5cbmNvbnN0IHN0eWxlID0gYFxuICBwYWRkaW5nOiAyMHB4O1xuICBtYXJnaW46IDIwcHg7XG4gIGNvbG9yOiB3aGl0ZTtcbmBcblxuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgY29uc3QgQ29sb3JzID0gKCkgPT4gaHRtbGBcbiAgPGdkcy1wYXJhZ3JhcGg+XG4gICAgPGdkcy1jYXJkIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7ICR7c3R5bGV9XCI+XG4gICAgICBQcmltYXJ5XG4gICAgPC9nZHMtY2FyZD5cbiAgICA8Z2RzLWNhcmQgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1zZWNvbmRhcnkpOyAke3N0eWxlfVwiPlxuICAgICAgU2Vjb25kYXJ5XG4gICAgPC9nZHMtY2FyZD5cbiAgICA8Z2RzLWNhcmQgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ib2R5LWJhY2tncm91bmQtY29sb3IpOyAke3N0eWxlfSBjb2xvcjogYmxhY2s7XCI+XG4gICAgICBCb2R5XG4gICAgPC9nZHMtY2FyZD5cbiAgPC9nZHMtcGFyYWdyYXBoPlxuYDsiLCJpbXBvcnQgeyBhIGFzIHBhdGNoRXNtLCBiIGFzIGJvb3RzdHJhcExhenkgfSBmcm9tICcuL2luZGV4LWFlNWFlNjY0LmpzJztcblxuY29uc3QgZGVmaW5lQ3VzdG9tRWxlbWVudHMgPSAod2luLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICByZXR1cm4gcGF0Y2hFc20oKS50aGVuKCgpID0+IHtcbiAgcmV0dXJuIGJvb3RzdHJhcExhenkoW1tcImdkcy1tZWRpYS1jYXJkXCIsW1sxLFwiZ2RzLW1lZGlhLWNhcmRcIix7XCJocmVmXCI6WzFdLFwidGFyZ2V0XCI6WzFdLFwiaGVhZGxpbmVcIjpbMV0sXCJpbWFnZVVybFwiOlsxLFwiaW1hZ2UtdXJsXCJdLFwic3VwZXJpbXBvc2VkSW1hZ2VVcmxcIjpbMSxcInN1cGVyaW1wb3NlZC1pbWFnZS11cmxcIl0sXCJzdXBlcmltcG9zZWRJbWFnZUZpdFwiOlsxLFwic3VwZXJpbXBvc2VkLWltYWdlLWZpdFwiXSxcImRlc2NyaXB0aW9uXCI6WzFdfV1dXSxbXCJnZHMtdGFnXCIsW1s0LFwiZ2RzLXRhZ1wiLHtcImhyZWZcIjpbMV0sXCJ0YXJnZXRcIjpbMV19XV1dLFtcImdkcy1sb2dvLWdyaWQtaXRlbVwiLFtbMSxcImdkcy1sb2dvLWdyaWQtaXRlbVwiLHtcImhyZWZcIjpbMV0sXCJ0YXJnZXRcIjpbMV0sXCJpbWFnZVVybFwiOlsxLFwiaW1hZ2UtdXJsXCJdfV1dXSxbXCJnZHMtbWVudS1pdGVtXCIsW1sxLFwiZ2RzLW1lbnUtaXRlbVwiLHtcImFjdGl2ZVwiOls1MTZdfV1dXSxbXCJnZHMtbmF2aWdhdGlvblwiLFtbNCxcImdkcy1uYXZpZ2F0aW9uXCIse1wibWVudUljb25cIjpbMzJdLFwib3BlblwiOlszMl19XV1dLFtcImdkcy1sb2dvLWdyaWRcIixbWzEsXCJnZHMtbG9nby1ncmlkXCJdXV0sW1wiZ2RzLW1lbnVcIixbWzEsXCJnZHMtbWVudVwiLHtcImRpcmVjdGlvblwiOlsxXX1dXV0sW1wiZ2RzLWJ1dHRvbl8yXCIsW1sxLFwiZ2RzLWJ1dHRvblwiLHtcImRpc2FibGVkXCI6WzUxNl0sXCJ0ZXh0XCI6WzRdLFwic2l6ZVwiOlsxXSxcImxlZnRJY29uXCI6WzEsXCJsZWZ0LWljb25cIl0sXCJyaWdodEljb25cIjpbMSxcInJpZ2h0LWljb25cIl0sXCJyaWdodEljb25Sb3RhdGVcIjpbMixcInJpZ2h0LWljb24tcm90YXRlXCJdLFwibGVmdEljb25Sb3RhdGVcIjpbMixcImxlZnQtaWNvbi1yb3RhdGVcIl19XSxbMSxcImdkcy1wYXJhZ3JhcGhcIix7XCJzaXplXCI6WzFdLFwiY2xhc3NcIjpbMV19XV1dLFtcImdkcy1jYXJkXzJcIixbWzEsXCJnZHMtY2FyZFwiXSxbNCxcImdkcy1oZWFkaW5nXCIse1wic2l6ZVwiOlsxXSxcImFzXCI6WzFdfV1dXSxbXCJnZHMtbGFiZWxcIixbWzEsXCJnZHMtbGFiZWxcIix7XCJzaXplXCI6WzFdLFwiY29sb3JcIjpbMV19XV1dLFtcImdkcy1saW5rXCIsW1s0LFwiZ2RzLWxpbmtcIix7XCJocmVmXCI6WzUxM10sXCJ0YXJnZXRcIjpbMV0sXCJibG9ja1wiOls0XX1dXV1dLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBkZWZpbmVDdXN0b21FbGVtZW50cyB9O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG4vLyBOT1RFOiBVc2UgcGxhaW4gY3NzIGZvciBub3cuIFN3aXRjaCB0byB1c2luZyBTYXNzIG9uY2Ugc29tZW9uZSBnZXQncyBpdCB0byBsb2FkIGluIHN0b3J5Ym9vayBwcmV2aWV3IGlmcmFtZS5cbmltcG9ydCAnLi4vc3JjL3N0eWxlcy9pbmRleC5jc3MnXG5cbmltcG9ydCB7IGRlZmluZUN1c3RvbUVsZW1lbnRzIH0gZnJvbSBcIi4uL2Rpc3QvZXNtL2xvYWRlci5tanNcIlxuXG5kZWZpbmVDdXN0b21FbGVtZW50cygpXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=